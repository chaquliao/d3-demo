{"map":"{\"version\":3,\"sources\":[],\"names\":[],\"mappings\":\"\"}","code":"webpackHotUpdate(0,{10:function(module,__webpack_exports__,__webpack_require__){\"use strict\";eval('__webpack_require__.r(__webpack_exports__);\\n\\n// EXTERNAL MODULE: ./node_modules/vue/dist/vue.esm.js\\nvar vue_esm = __webpack_require__(0);\\n\\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-867e5006\",\"hasScoped\":false,\"optionsId\":\"0\",\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/components/header.vue\\nvar render = function() {\\n  var _vm = this\\n  var _h = _vm.$createElement\\n  var _c = _vm._self._c || _h\\n  return _vm._m(0)\\n}\\nvar staticRenderFns = [\\n  function() {\\n    var _vm = this\\n    var _h = _vm.$createElement\\n    var _c = _vm._self._c || _h\\n    return _c(\"div\", [\\n      _c(\"h1\", [_vm._v(\"共同header\")]),\\n      _vm._v(\" \"),\\n      _c(\"img\", { attrs: { src: __webpack_require__(14) } })\\n    ])\\n  }\\n]\\nrender._withStripped = true\\n\\nif (true) {\\n  module.hot.accept()\\n  if (module.hot.data) {\\n    __webpack_require__(1)      .rerender(\"data-v-867e5006\", { render: render, staticRenderFns: staticRenderFns })\\n  }\\n}\\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/runtime/component-normalizer.js\\n/* globals __VUE_SSR_CONTEXT__ */\\n\\n// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).\\n// This module is a runtime utility for cleaner component module output and will\\n// be included in the final webpack user bundle.\\n\\nfunction normalizeComponent (\\n  scriptExports,\\n  render,\\n  staticRenderFns,\\n  functionalTemplate,\\n  injectStyles,\\n  scopeId,\\n  moduleIdentifier, /* server only */\\n  shadowMode /* vue-cli only */\\n) {\\n  scriptExports = scriptExports || {}\\n\\n  // ES6 modules interop\\n  var type = typeof scriptExports.default\\n  if (type === \\'object\\' || type === \\'function\\') {\\n    scriptExports = scriptExports.default\\n  }\\n\\n  // Vue.extend constructor export interop\\n  var options = typeof scriptExports === \\'function\\'\\n    ? scriptExports.options\\n    : scriptExports\\n\\n  // render functions\\n  if (render) {\\n    options.render = render\\n    options.staticRenderFns = staticRenderFns\\n    options._compiled = true\\n  }\\n\\n  // functional template\\n  if (functionalTemplate) {\\n    options.functional = true\\n  }\\n\\n  // scopedId\\n  if (scopeId) {\\n    options._scopeId = scopeId\\n  }\\n\\n  var hook\\n  if (moduleIdentifier) { // server build\\n    hook = function (context) {\\n      // 2.3 injection\\n      context =\\n        context || // cached call\\n        (this.$vnode && this.$vnode.ssrContext) || // stateful\\n        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional\\n      // 2.2 with runInNewContext: true\\n      if (!context && typeof __VUE_SSR_CONTEXT__ !== \\'undefined\\') {\\n        context = __VUE_SSR_CONTEXT__\\n      }\\n      // inject component styles\\n      if (injectStyles) {\\n        injectStyles.call(this, context)\\n      }\\n      // register component module identifier for async chunk inferrence\\n      if (context && context._registeredComponents) {\\n        context._registeredComponents.add(moduleIdentifier)\\n      }\\n    }\\n    // used by ssr in case component is cached and beforeCreate\\n    // never gets called\\n    options._ssrRegister = hook\\n  } else if (injectStyles) {\\n    hook = shadowMode\\n      ? function () { injectStyles.call(this, this.$root.$options.shadowRoot) }\\n      : injectStyles\\n  }\\n\\n  if (hook) {\\n    if (options.functional) {\\n      // for template-only hot-reload because in that case the render fn doesn\\'t\\n      // go through the normalizer\\n      options._injectStyles = hook\\n      // register for functioal component in vue file\\n      var originalRender = options.render\\n      options.render = function renderWithStyleInjection (h, context) {\\n        hook.call(context)\\n        return originalRender(h, context)\\n      }\\n    } else {\\n      // inject component registration as beforeCreate hook\\n      var existing = options.beforeCreate\\n      options.beforeCreate = existing\\n        ? [].concat(existing, hook)\\n        : [hook]\\n    }\\n  }\\n\\n  return {\\n    exports: scriptExports,\\n    options: options\\n  }\\n}\\n\\n// CONCATENATED MODULE: ./src/components/header.vue\\nvar header_disposed = false\\n/* script */\\nvar header_vue_script_ = null\\n/* template */\\n\\n/* template functional */\\nvar header_vue_template_functional_ = false\\n/* styles */\\nvar header_vue_styles_ = null\\n/* scopeId */\\nvar header_vue_scopeId_ = null\\n/* moduleIdentifier (server only) */\\nvar header_vue_module_identifier_ = null\\n\\nvar header_Component = normalizeComponent(\\n  header_vue_script_,\\n  render,\\n  staticRenderFns,\\n  header_vue_template_functional_,\\n  header_vue_styles_,\\n  header_vue_scopeId_,\\n  header_vue_module_identifier_\\n)\\nheader_Component.options.__file = \"src\\\\\\\\components\\\\\\\\header.vue\"\\n\\n/* hot reload */\\nif (true) {(function () {\\n  var hotAPI = __webpack_require__(1)\\n  hotAPI.install(__webpack_require__(0), false)\\n  if (!hotAPI.compatible) return\\n  module.hot.accept()\\n  if (!module.hot.data) {\\n    hotAPI.createRecord(\"data-v-867e5006\", header_Component.options)\\n  } else {\\n    hotAPI.reload(\"data-v-867e5006\", header_Component.options)\\n  }\\n  module.hot.dispose(function (data) {\\n    header_disposed = true\\n  })\\n})()}\\n\\n/* harmony default export */ var header = (header_Component.exports);\\n\\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib/selector.js?type=script&index=0!./src/App.vue\\n//\\n//\\n//\\n//\\n//\\n//\\n//\\n//\\n//\\n//\\n//\\n//\\n//\\n//\\n//\\n//\\n\\n\\n/* harmony default export */ var App = ({\\n  name: \\'app\\',\\n  data() {\\n    return {\\n      msg: \\'Welcome to Your Vue.js App\\'\\n    };\\n  },\\n  components: {\\n    HeaderTab: header\\n  }\\n});\\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-04c2046b\",\"hasScoped\":false,\"optionsId\":\"0\",\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/App.vue\\nvar App_render = function() {\\n  var _vm = this\\n  var _h = _vm.$createElement\\n  var _c = _vm._self._c || _h\\n  return _c(\\n    \"div\",\\n    { attrs: { id: \"app\" } },\\n    [\\n      _c(\"header-tab\"),\\n      _vm._v(\" \"),\\n      _c(\"h2\", [_vm._v(_vm._s(_vm.msg))]),\\n      _vm._v(\" \"),\\n      _c(\"div\", { staticClass: \"nav-box\" }, [\\n        _c(\\n          \"p\",\\n          { staticClass: \"nav-list\" },\\n          [\\n            _c(\"router-link\", { staticClass: \"nav-item\", attrs: { to: \"/\" } }, [\\n              _vm._v(\"首页\")\\n            ]),\\n            _vm._v(\" \"),\\n            _c(\\n              \"router-link\",\\n              { staticClass: \"nav-item\", attrs: { to: \"/about\" } },\\n              [_vm._v(\"关于\")]\\n            )\\n          ],\\n          1\\n        )\\n      ]),\\n      _vm._v(\" \"),\\n      _c(\"div\", [_c(\"router-view\")], 1)\\n    ],\\n    1\\n  )\\n}\\nvar App_staticRenderFns = []\\nApp_render._withStripped = true\\n\\nif (true) {\\n  module.hot.accept()\\n  if (module.hot.data) {\\n    __webpack_require__(1)      .rerender(\"data-v-04c2046b\", { render: App_render, staticRenderFns: App_staticRenderFns })\\n  }\\n}\\n// CONCATENATED MODULE: ./src/App.vue\\nvar App_disposed = false\\nfunction App_injectStyle (context) {\\n  if (App_disposed) return\\n  __webpack_require__(15)\\n}\\n/* script */\\n\\n\\n/* template */\\n\\n/* template functional */\\nvar App_vue_template_functional_ = false\\n/* styles */\\nvar App_vue_styles_ = App_injectStyle\\n/* scopeId */\\nvar App_vue_scopeId_ = null\\n/* moduleIdentifier (server only) */\\nvar App_vue_module_identifier_ = null\\n\\nvar App_Component = normalizeComponent(\\n  App,\\n  App_render,\\n  App_staticRenderFns,\\n  App_vue_template_functional_,\\n  App_vue_styles_,\\n  App_vue_scopeId_,\\n  App_vue_module_identifier_\\n)\\nApp_Component.options.__file = \"src\\\\\\\\App.vue\"\\n\\n/* hot reload */\\nif (true) {(function () {\\n  var hotAPI = __webpack_require__(1)\\n  hotAPI.install(__webpack_require__(0), false)\\n  if (!hotAPI.compatible) return\\n  module.hot.accept()\\n  if (!module.hot.data) {\\n    hotAPI.createRecord(\"data-v-04c2046b\", App_Component.options)\\n  } else {\\n    hotAPI.reload(\"data-v-04c2046b\", App_Component.options)\\n  }\\n  module.hot.dispose(function (data) {\\n    App_disposed = true\\n  })\\n})()}\\n\\n/* harmony default export */ var src_App = (App_Component.exports);\\n\\n// CONCATENATED MODULE: ./node_modules/vue-router/dist/vue-router.esm.js\\n/**\\n  * vue-router v3.0.1\\n  * (c) 2017 Evan You\\n  * @license MIT\\n  */\\n/*  */\\n\\nfunction assert (condition, message) {\\n  if (!condition) {\\n    throw new Error((\"[vue-router] \" + message))\\n  }\\n}\\n\\nfunction warn (condition, message) {\\n  if (false) {}\\n}\\n\\nfunction isError (err) {\\n  return Object.prototype.toString.call(err).indexOf(\\'Error\\') > -1\\n}\\n\\nvar View = {\\n  name: \\'router-view\\',\\n  functional: true,\\n  props: {\\n    name: {\\n      type: String,\\n      default: \\'default\\'\\n    }\\n  },\\n  render: function render (_, ref) {\\n    var props = ref.props;\\n    var children = ref.children;\\n    var parent = ref.parent;\\n    var data = ref.data;\\n\\n    data.routerView = true;\\n\\n    // directly use parent context\\'s createElement() function\\n    // so that components rendered by router-view can resolve named slots\\n    var h = parent.$createElement;\\n    var name = props.name;\\n    var route = parent.$route;\\n    var cache = parent._routerViewCache || (parent._routerViewCache = {});\\n\\n    // determine current view depth, also check to see if the tree\\n    // has been toggled inactive but kept-alive.\\n    var depth = 0;\\n    var inactive = false;\\n    while (parent && parent._routerRoot !== parent) {\\n      if (parent.$vnode && parent.$vnode.data.routerView) {\\n        depth++;\\n      }\\n      if (parent._inactive) {\\n        inactive = true;\\n      }\\n      parent = parent.$parent;\\n    }\\n    data.routerViewDepth = depth;\\n\\n    // render previous view if the tree is inactive and kept-alive\\n    if (inactive) {\\n      return h(cache[name], data, children)\\n    }\\n\\n    var matched = route.matched[depth];\\n    // render empty node if no matched route\\n    if (!matched) {\\n      cache[name] = null;\\n      return h()\\n    }\\n\\n    var component = cache[name] = matched.components[name];\\n\\n    // attach instance registration hook\\n    // this will be called in the instance\\'s injected lifecycle hooks\\n    data.registerRouteInstance = function (vm, val) {\\n      // val could be undefined for unregistration\\n      var current = matched.instances[name];\\n      if (\\n        (val && current !== vm) ||\\n        (!val && current === vm)\\n      ) {\\n        matched.instances[name] = val;\\n      }\\n    }\\n\\n    // also register instance in prepatch hook\\n    // in case the same component instance is reused across different routes\\n    ;(data.hook || (data.hook = {})).prepatch = function (_, vnode) {\\n      matched.instances[name] = vnode.componentInstance;\\n    };\\n\\n    // resolve props\\n    var propsToPass = data.props = resolveProps(route, matched.props && matched.props[name]);\\n    if (propsToPass) {\\n      // clone to prevent mutation\\n      propsToPass = data.props = extend({}, propsToPass);\\n      // pass non-declared props as attrs\\n      var attrs = data.attrs = data.attrs || {};\\n      for (var key in propsToPass) {\\n        if (!component.props || !(key in component.props)) {\\n          attrs[key] = propsToPass[key];\\n          delete propsToPass[key];\\n        }\\n      }\\n    }\\n\\n    return h(component, data, children)\\n  }\\n};\\n\\nfunction resolveProps (route, config) {\\n  switch (typeof config) {\\n    case \\'undefined\\':\\n      return\\n    case \\'object\\':\\n      return config\\n    case \\'function\\':\\n      return config(route)\\n    case \\'boolean\\':\\n      return config ? route.params : undefined\\n    default:\\n      if (false) {}\\n  }\\n}\\n\\nfunction extend (to, from) {\\n  for (var key in from) {\\n    to[key] = from[key];\\n  }\\n  return to\\n}\\n\\n/*  */\\n\\nvar encodeReserveRE = /[!\\'()*]/g;\\nvar encodeReserveReplacer = function (c) { return \\'%\\' + c.charCodeAt(0).toString(16); };\\nvar commaRE = /%2C/g;\\n\\n// fixed encodeURIComponent which is more conformant to RFC3986:\\n// - escapes [!\\'()*]\\n// - preserve commas\\nvar encode = function (str) { return encodeURIComponent(str)\\n  .replace(encodeReserveRE, encodeReserveReplacer)\\n  .replace(commaRE, \\',\\'); };\\n\\nvar decode = decodeURIComponent;\\n\\nfunction resolveQuery (\\n  query,\\n  extraQuery,\\n  _parseQuery\\n) {\\n  if ( extraQuery === void 0 ) extraQuery = {};\\n\\n  var parse = _parseQuery || parseQuery;\\n  var parsedQuery;\\n  try {\\n    parsedQuery = parse(query || \\'\\');\\n  } catch (e) {\\n    \"production\" !== \\'production\\' && warn(false, e.message);\\n    parsedQuery = {};\\n  }\\n  for (var key in extraQuery) {\\n    parsedQuery[key] = extraQuery[key];\\n  }\\n  return parsedQuery\\n}\\n\\nfunction parseQuery (query) {\\n  var res = {};\\n\\n  query = query.trim().replace(/^(\\\\?|#|&)/, \\'\\');\\n\\n  if (!query) {\\n    return res\\n  }\\n\\n  query.split(\\'&\\').forEach(function (param) {\\n    var parts = param.replace(/\\\\+/g, \\' \\').split(\\'=\\');\\n    var key = decode(parts.shift());\\n    var val = parts.length > 0\\n      ? decode(parts.join(\\'=\\'))\\n      : null;\\n\\n    if (res[key] === undefined) {\\n      res[key] = val;\\n    } else if (Array.isArray(res[key])) {\\n      res[key].push(val);\\n    } else {\\n      res[key] = [res[key], val];\\n    }\\n  });\\n\\n  return res\\n}\\n\\nfunction stringifyQuery (obj) {\\n  var res = obj ? Object.keys(obj).map(function (key) {\\n    var val = obj[key];\\n\\n    if (val === undefined) {\\n      return \\'\\'\\n    }\\n\\n    if (val === null) {\\n      return encode(key)\\n    }\\n\\n    if (Array.isArray(val)) {\\n      var result = [];\\n      val.forEach(function (val2) {\\n        if (val2 === undefined) {\\n          return\\n        }\\n        if (val2 === null) {\\n          result.push(encode(key));\\n        } else {\\n          result.push(encode(key) + \\'=\\' + encode(val2));\\n        }\\n      });\\n      return result.join(\\'&\\')\\n    }\\n\\n    return encode(key) + \\'=\\' + encode(val)\\n  }).filter(function (x) { return x.length > 0; }).join(\\'&\\') : null;\\n  return res ? (\"?\" + res) : \\'\\'\\n}\\n\\n/*  */\\n\\n\\nvar trailingSlashRE = /\\\\/?$/;\\n\\nfunction createRoute (\\n  record,\\n  location,\\n  redirectedFrom,\\n  router\\n) {\\n  var stringifyQuery$$1 = router && router.options.stringifyQuery;\\n\\n  var query = location.query || {};\\n  try {\\n    query = clone(query);\\n  } catch (e) {}\\n\\n  var route = {\\n    name: location.name || (record && record.name),\\n    meta: (record && record.meta) || {},\\n    path: location.path || \\'/\\',\\n    hash: location.hash || \\'\\',\\n    query: query,\\n    params: location.params || {},\\n    fullPath: getFullPath(location, stringifyQuery$$1),\\n    matched: record ? formatMatch(record) : []\\n  };\\n  if (redirectedFrom) {\\n    route.redirectedFrom = getFullPath(redirectedFrom, stringifyQuery$$1);\\n  }\\n  return Object.freeze(route)\\n}\\n\\nfunction clone (value) {\\n  if (Array.isArray(value)) {\\n    return value.map(clone)\\n  } else if (value && typeof value === \\'object\\') {\\n    var res = {};\\n    for (var key in value) {\\n      res[key] = clone(value[key]);\\n    }\\n    return res\\n  } else {\\n    return value\\n  }\\n}\\n\\n// the starting route that represents the initial state\\nvar START = createRoute(null, {\\n  path: \\'/\\'\\n});\\n\\nfunction formatMatch (record) {\\n  var res = [];\\n  while (record) {\\n    res.unshift(record);\\n    record = record.parent;\\n  }\\n  return res\\n}\\n\\nfunction getFullPath (\\n  ref,\\n  _stringifyQuery\\n) {\\n  var path = ref.path;\\n  var query = ref.query; if ( query === void 0 ) query = {};\\n  var hash = ref.hash; if ( hash === void 0 ) hash = \\'\\';\\n\\n  var stringify = _stringifyQuery || stringifyQuery;\\n  return (path || \\'/\\') + stringify(query) + hash\\n}\\n\\nfunction isSameRoute (a, b) {\\n  if (b === START) {\\n    return a === b\\n  } else if (!b) {\\n    return false\\n  } else if (a.path && b.path) {\\n    return (\\n      a.path.replace(trailingSlashRE, \\'\\') === b.path.replace(trailingSlashRE, \\'\\') &&\\n      a.hash === b.hash &&\\n      isObjectEqual(a.query, b.query)\\n    )\\n  } else if (a.name && b.name) {\\n    return (\\n      a.name === b.name &&\\n      a.hash === b.hash &&\\n      isObjectEqual(a.query, b.query) &&\\n      isObjectEqual(a.params, b.params)\\n    )\\n  } else {\\n    return false\\n  }\\n}\\n\\nfunction isObjectEqual (a, b) {\\n  if ( a === void 0 ) a = {};\\n  if ( b === void 0 ) b = {};\\n\\n  // handle null value #1566\\n  if (!a || !b) { return a === b }\\n  var aKeys = Object.keys(a);\\n  var bKeys = Object.keys(b);\\n  if (aKeys.length !== bKeys.length) {\\n    return false\\n  }\\n  return aKeys.every(function (key) {\\n    var aVal = a[key];\\n    var bVal = b[key];\\n    // check nested equality\\n    if (typeof aVal === \\'object\\' && typeof bVal === \\'object\\') {\\n      return isObjectEqual(aVal, bVal)\\n    }\\n    return String(aVal) === String(bVal)\\n  })\\n}\\n\\nfunction isIncludedRoute (current, target) {\\n  return (\\n    current.path.replace(trailingSlashRE, \\'/\\').indexOf(\\n      target.path.replace(trailingSlashRE, \\'/\\')\\n    ) === 0 &&\\n    (!target.hash || current.hash === target.hash) &&\\n    queryIncludes(current.query, target.query)\\n  )\\n}\\n\\nfunction queryIncludes (current, target) {\\n  for (var key in target) {\\n    if (!(key in current)) {\\n      return false\\n    }\\n  }\\n  return true\\n}\\n\\n/*  */\\n\\n// work around weird flow bug\\nvar toTypes = [String, Object];\\nvar eventTypes = [String, Array];\\n\\nvar Link = {\\n  name: \\'router-link\\',\\n  props: {\\n    to: {\\n      type: toTypes,\\n      required: true\\n    },\\n    tag: {\\n      type: String,\\n      default: \\'a\\'\\n    },\\n    exact: Boolean,\\n    append: Boolean,\\n    replace: Boolean,\\n    activeClass: String,\\n    exactActiveClass: String,\\n    event: {\\n      type: eventTypes,\\n      default: \\'click\\'\\n    }\\n  },\\n  render: function render (h) {\\n    var this$1 = this;\\n\\n    var router = this.$router;\\n    var current = this.$route;\\n    var ref = router.resolve(this.to, current, this.append);\\n    var location = ref.location;\\n    var route = ref.route;\\n    var href = ref.href;\\n\\n    var classes = {};\\n    var globalActiveClass = router.options.linkActiveClass;\\n    var globalExactActiveClass = router.options.linkExactActiveClass;\\n    // Support global empty active class\\n    var activeClassFallback = globalActiveClass == null\\n            ? \\'router-link-active\\'\\n            : globalActiveClass;\\n    var exactActiveClassFallback = globalExactActiveClass == null\\n            ? \\'router-link-exact-active\\'\\n            : globalExactActiveClass;\\n    var activeClass = this.activeClass == null\\n            ? activeClassFallback\\n            : this.activeClass;\\n    var exactActiveClass = this.exactActiveClass == null\\n            ? exactActiveClassFallback\\n            : this.exactActiveClass;\\n    var compareTarget = location.path\\n      ? createRoute(null, location, null, router)\\n      : route;\\n\\n    classes[exactActiveClass] = isSameRoute(current, compareTarget);\\n    classes[activeClass] = this.exact\\n      ? classes[exactActiveClass]\\n      : isIncludedRoute(current, compareTarget);\\n\\n    var handler = function (e) {\\n      if (guardEvent(e)) {\\n        if (this$1.replace) {\\n          router.replace(location);\\n        } else {\\n          router.push(location);\\n        }\\n      }\\n    };\\n\\n    var on = { click: guardEvent };\\n    if (Array.isArray(this.event)) {\\n      this.event.forEach(function (e) { on[e] = handler; });\\n    } else {\\n      on[this.event] = handler;\\n    }\\n\\n    var data = {\\n      class: classes\\n    };\\n\\n    if (this.tag === \\'a\\') {\\n      data.on = on;\\n      data.attrs = { href: href };\\n    } else {\\n      // find the first <a> child and apply listener and href\\n      var a = findAnchor(this.$slots.default);\\n      if (a) {\\n        // in case the <a> is a static node\\n        a.isStatic = false;\\n        var extend = _Vue.util.extend;\\n        var aData = a.data = extend({}, a.data);\\n        aData.on = on;\\n        var aAttrs = a.data.attrs = extend({}, a.data.attrs);\\n        aAttrs.href = href;\\n      } else {\\n        // doesn\\'t have <a> child, apply listener to self\\n        data.on = on;\\n      }\\n    }\\n\\n    return h(this.tag, data, this.$slots.default)\\n  }\\n};\\n\\nfunction guardEvent (e) {\\n  // don\\'t redirect with control keys\\n  if (e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) { return }\\n  // don\\'t redirect when preventDefault called\\n  if (e.defaultPrevented) { return }\\n  // don\\'t redirect on right click\\n  if (e.button !== undefined && e.button !== 0) { return }\\n  // don\\'t redirect if `target=\"_blank\"`\\n  if (e.currentTarget && e.currentTarget.getAttribute) {\\n    var target = e.currentTarget.getAttribute(\\'target\\');\\n    if (/\\\\b_blank\\\\b/i.test(target)) { return }\\n  }\\n  // this may be a Weex event which doesn\\'t have this method\\n  if (e.preventDefault) {\\n    e.preventDefault();\\n  }\\n  return true\\n}\\n\\nfunction findAnchor (children) {\\n  if (children) {\\n    var child;\\n    for (var i = 0; i < children.length; i++) {\\n      child = children[i];\\n      if (child.tag === \\'a\\') {\\n        return child\\n      }\\n      if (child.children && (child = findAnchor(child.children))) {\\n        return child\\n      }\\n    }\\n  }\\n}\\n\\nvar _Vue;\\n\\nfunction install (Vue) {\\n  if (install.installed && _Vue === Vue) { return }\\n  install.installed = true;\\n\\n  _Vue = Vue;\\n\\n  var isDef = function (v) { return v !== undefined; };\\n\\n  var registerInstance = function (vm, callVal) {\\n    var i = vm.$options._parentVnode;\\n    if (isDef(i) && isDef(i = i.data) && isDef(i = i.registerRouteInstance)) {\\n      i(vm, callVal);\\n    }\\n  };\\n\\n  Vue.mixin({\\n    beforeCreate: function beforeCreate () {\\n      if (isDef(this.$options.router)) {\\n        this._routerRoot = this;\\n        this._router = this.$options.router;\\n        this._router.init(this);\\n        Vue.util.defineReactive(this, \\'_route\\', this._router.history.current);\\n      } else {\\n        this._routerRoot = (this.$parent && this.$parent._routerRoot) || this;\\n      }\\n      registerInstance(this, this);\\n    },\\n    destroyed: function destroyed () {\\n      registerInstance(this);\\n    }\\n  });\\n\\n  Object.defineProperty(Vue.prototype, \\'$router\\', {\\n    get: function get () { return this._routerRoot._router }\\n  });\\n\\n  Object.defineProperty(Vue.prototype, \\'$route\\', {\\n    get: function get () { return this._routerRoot._route }\\n  });\\n\\n  Vue.component(\\'router-view\\', View);\\n  Vue.component(\\'router-link\\', Link);\\n\\n  var strats = Vue.config.optionMergeStrategies;\\n  // use the same hook merging strategy for route hooks\\n  strats.beforeRouteEnter = strats.beforeRouteLeave = strats.beforeRouteUpdate = strats.created;\\n}\\n\\n/*  */\\n\\nvar inBrowser = typeof window !== \\'undefined\\';\\n\\n/*  */\\n\\nfunction resolvePath (\\n  relative,\\n  base,\\n  append\\n) {\\n  var firstChar = relative.charAt(0);\\n  if (firstChar === \\'/\\') {\\n    return relative\\n  }\\n\\n  if (firstChar === \\'?\\' || firstChar === \\'#\\') {\\n    return base + relative\\n  }\\n\\n  var stack = base.split(\\'/\\');\\n\\n  // remove trailing segment if:\\n  // - not appending\\n  // - appending to trailing slash (last segment is empty)\\n  if (!append || !stack[stack.length - 1]) {\\n    stack.pop();\\n  }\\n\\n  // resolve relative path\\n  var segments = relative.replace(/^\\\\//, \\'\\').split(\\'/\\');\\n  for (var i = 0; i < segments.length; i++) {\\n    var segment = segments[i];\\n    if (segment === \\'..\\') {\\n      stack.pop();\\n    } else if (segment !== \\'.\\') {\\n      stack.push(segment);\\n    }\\n  }\\n\\n  // ensure leading slash\\n  if (stack[0] !== \\'\\') {\\n    stack.unshift(\\'\\');\\n  }\\n\\n  return stack.join(\\'/\\')\\n}\\n\\nfunction parsePath (path) {\\n  var hash = \\'\\';\\n  var query = \\'\\';\\n\\n  var hashIndex = path.indexOf(\\'#\\');\\n  if (hashIndex >= 0) {\\n    hash = path.slice(hashIndex);\\n    path = path.slice(0, hashIndex);\\n  }\\n\\n  var queryIndex = path.indexOf(\\'?\\');\\n  if (queryIndex >= 0) {\\n    query = path.slice(queryIndex + 1);\\n    path = path.slice(0, queryIndex);\\n  }\\n\\n  return {\\n    path: path,\\n    query: query,\\n    hash: hash\\n  }\\n}\\n\\nfunction cleanPath (path) {\\n  return path.replace(/\\\\/\\\\//g, \\'/\\')\\n}\\n\\nvar isarray = Array.isArray || function (arr) {\\n  return Object.prototype.toString.call(arr) == \\'[object Array]\\';\\n};\\n\\n/**\\n * Expose `pathToRegexp`.\\n */\\nvar pathToRegexp_1 = pathToRegexp;\\nvar parse_1 = vue_router_esm_parse;\\nvar compile_1 = compile;\\nvar tokensToFunction_1 = tokensToFunction;\\nvar tokensToRegExp_1 = tokensToRegExp;\\n\\n/**\\n * The main path matching regexp utility.\\n *\\n * @type {RegExp}\\n */\\nvar PATH_REGEXP = new RegExp([\\n  // Match escaped characters that would otherwise appear in future matches.\\n  // This allows the user to escape special characters that won\\'t transform.\\n  \\'(\\\\\\\\\\\\\\\\.)\\',\\n  // Match Express-style parameters and un-named parameters with a prefix\\n  // and optional suffixes. Matches appear as:\\n  //\\n  // \"/:test(\\\\\\\\d+)?\" => [\"/\", \"test\", \"\\\\d+\", undefined, \"?\", undefined]\\n  // \"/route(\\\\\\\\d+)\"  => [undefined, undefined, undefined, \"\\\\d+\", undefined, undefined]\\n  // \"/*\"            => [\"/\", undefined, undefined, undefined, undefined, \"*\"]\\n  \\'([\\\\\\\\/.])?(?:(?:\\\\\\\\:(\\\\\\\\w+)(?:\\\\\\\\(((?:\\\\\\\\\\\\\\\\.|[^\\\\\\\\\\\\\\\\()])+)\\\\\\\\))?|\\\\\\\\(((?:\\\\\\\\\\\\\\\\.|[^\\\\\\\\\\\\\\\\()])+)\\\\\\\\))([+*?])?|(\\\\\\\\*))\\'\\n].join(\\'|\\'), \\'g\\');\\n\\n/**\\n * Parse a string for the raw tokens.\\n *\\n * @param  {string}  str\\n * @param  {Object=} options\\n * @return {!Array}\\n */\\nfunction vue_router_esm_parse (str, options) {\\n  var tokens = [];\\n  var key = 0;\\n  var index = 0;\\n  var path = \\'\\';\\n  var defaultDelimiter = options && options.delimiter || \\'/\\';\\n  var res;\\n\\n  while ((res = PATH_REGEXP.exec(str)) != null) {\\n    var m = res[0];\\n    var escaped = res[1];\\n    var offset = res.index;\\n    path += str.slice(index, offset);\\n    index = offset + m.length;\\n\\n    // Ignore already escaped sequences.\\n    if (escaped) {\\n      path += escaped[1];\\n      continue\\n    }\\n\\n    var next = str[index];\\n    var prefix = res[2];\\n    var name = res[3];\\n    var capture = res[4];\\n    var group = res[5];\\n    var modifier = res[6];\\n    var asterisk = res[7];\\n\\n    // Push the current path onto the tokens.\\n    if (path) {\\n      tokens.push(path);\\n      path = \\'\\';\\n    }\\n\\n    var partial = prefix != null && next != null && next !== prefix;\\n    var repeat = modifier === \\'+\\' || modifier === \\'*\\';\\n    var optional = modifier === \\'?\\' || modifier === \\'*\\';\\n    var delimiter = res[2] || defaultDelimiter;\\n    var pattern = capture || group;\\n\\n    tokens.push({\\n      name: name || key++,\\n      prefix: prefix || \\'\\',\\n      delimiter: delimiter,\\n      optional: optional,\\n      repeat: repeat,\\n      partial: partial,\\n      asterisk: !!asterisk,\\n      pattern: pattern ? escapeGroup(pattern) : (asterisk ? \\'.*\\' : \\'[^\\' + escapeString(delimiter) + \\']+?\\')\\n    });\\n  }\\n\\n  // Match any characters still remaining.\\n  if (index < str.length) {\\n    path += str.substr(index);\\n  }\\n\\n  // If the path exists, push it onto the end.\\n  if (path) {\\n    tokens.push(path);\\n  }\\n\\n  return tokens\\n}\\n\\n/**\\n * Compile a string to a template function for the path.\\n *\\n * @param  {string}             str\\n * @param  {Object=}            options\\n * @return {!function(Object=, Object=)}\\n */\\nfunction compile (str, options) {\\n  return tokensToFunction(vue_router_esm_parse(str, options))\\n}\\n\\n/**\\n * Prettier encoding of URI path segments.\\n *\\n * @param  {string}\\n * @return {string}\\n */\\nfunction encodeURIComponentPretty (str) {\\n  return encodeURI(str).replace(/[\\\\/?#]/g, function (c) {\\n    return \\'%\\' + c.charCodeAt(0).toString(16).toUpperCase()\\n  })\\n}\\n\\n/**\\n * Encode the asterisk parameter. Similar to `pretty`, but allows slashes.\\n *\\n * @param  {string}\\n * @return {string}\\n */\\nfunction encodeAsterisk (str) {\\n  return encodeURI(str).replace(/[?#]/g, function (c) {\\n    return \\'%\\' + c.charCodeAt(0).toString(16).toUpperCase()\\n  })\\n}\\n\\n/**\\n * Expose a method for transforming tokens into the path function.\\n */\\nfunction tokensToFunction (tokens) {\\n  // Compile all the tokens into regexps.\\n  var matches = new Array(tokens.length);\\n\\n  // Compile all the patterns before compilation.\\n  for (var i = 0; i < tokens.length; i++) {\\n    if (typeof tokens[i] === \\'object\\') {\\n      matches[i] = new RegExp(\\'^(?:\\' + tokens[i].pattern + \\')$\\');\\n    }\\n  }\\n\\n  return function (obj, opts) {\\n    var path = \\'\\';\\n    var data = obj || {};\\n    var options = opts || {};\\n    var encode = options.pretty ? encodeURIComponentPretty : encodeURIComponent;\\n\\n    for (var i = 0; i < tokens.length; i++) {\\n      var token = tokens[i];\\n\\n      if (typeof token === \\'string\\') {\\n        path += token;\\n\\n        continue\\n      }\\n\\n      var value = data[token.name];\\n      var segment;\\n\\n      if (value == null) {\\n        if (token.optional) {\\n          // Prepend partial segment prefixes.\\n          if (token.partial) {\\n            path += token.prefix;\\n          }\\n\\n          continue\\n        } else {\\n          throw new TypeError(\\'Expected \"\\' + token.name + \\'\" to be defined\\')\\n        }\\n      }\\n\\n      if (isarray(value)) {\\n        if (!token.repeat) {\\n          throw new TypeError(\\'Expected \"\\' + token.name + \\'\" to not repeat, but received `\\' + JSON.stringify(value) + \\'`\\')\\n        }\\n\\n        if (value.length === 0) {\\n          if (token.optional) {\\n            continue\\n          } else {\\n            throw new TypeError(\\'Expected \"\\' + token.name + \\'\" to not be empty\\')\\n          }\\n        }\\n\\n        for (var j = 0; j < value.length; j++) {\\n          segment = encode(value[j]);\\n\\n          if (!matches[i].test(segment)) {\\n            throw new TypeError(\\'Expected all \"\\' + token.name + \\'\" to match \"\\' + token.pattern + \\'\", but received `\\' + JSON.stringify(segment) + \\'`\\')\\n          }\\n\\n          path += (j === 0 ? token.prefix : token.delimiter) + segment;\\n        }\\n\\n        continue\\n      }\\n\\n      segment = token.asterisk ? encodeAsterisk(value) : encode(value);\\n\\n      if (!matches[i].test(segment)) {\\n        throw new TypeError(\\'Expected \"\\' + token.name + \\'\" to match \"\\' + token.pattern + \\'\", but received \"\\' + segment + \\'\"\\')\\n      }\\n\\n      path += token.prefix + segment;\\n    }\\n\\n    return path\\n  }\\n}\\n\\n/**\\n * Escape a regular expression string.\\n *\\n * @param  {string} str\\n * @return {string}\\n */\\nfunction escapeString (str) {\\n  return str.replace(/([.+*?=^!:${}()[\\\\]|\\\\/\\\\\\\\])/g, \\'\\\\\\\\$1\\')\\n}\\n\\n/**\\n * Escape the capturing group by escaping special characters and meaning.\\n *\\n * @param  {string} group\\n * @return {string}\\n */\\nfunction escapeGroup (group) {\\n  return group.replace(/([=!:$\\\\/()])/g, \\'\\\\\\\\$1\\')\\n}\\n\\n/**\\n * Attach the keys as a property of the regexp.\\n *\\n * @param  {!RegExp} re\\n * @param  {Array}   keys\\n * @return {!RegExp}\\n */\\nfunction attachKeys (re, keys) {\\n  re.keys = keys;\\n  return re\\n}\\n\\n/**\\n * Get the flags for a regexp from the options.\\n *\\n * @param  {Object} options\\n * @return {string}\\n */\\nfunction flags (options) {\\n  return options.sensitive ? \\'\\' : \\'i\\'\\n}\\n\\n/**\\n * Pull out keys from a regexp.\\n *\\n * @param  {!RegExp} path\\n * @param  {!Array}  keys\\n * @return {!RegExp}\\n */\\nfunction regexpToRegexp (path, keys) {\\n  // Use a negative lookahead to match only capturing groups.\\n  var groups = path.source.match(/\\\\((?!\\\\?)/g);\\n\\n  if (groups) {\\n    for (var i = 0; i < groups.length; i++) {\\n      keys.push({\\n        name: i,\\n        prefix: null,\\n        delimiter: null,\\n        optional: false,\\n        repeat: false,\\n        partial: false,\\n        asterisk: false,\\n        pattern: null\\n      });\\n    }\\n  }\\n\\n  return attachKeys(path, keys)\\n}\\n\\n/**\\n * Transform an array into a regexp.\\n *\\n * @param  {!Array}  path\\n * @param  {Array}   keys\\n * @param  {!Object} options\\n * @return {!RegExp}\\n */\\nfunction arrayToRegexp (path, keys, options) {\\n  var parts = [];\\n\\n  for (var i = 0; i < path.length; i++) {\\n    parts.push(pathToRegexp(path[i], keys, options).source);\\n  }\\n\\n  var regexp = new RegExp(\\'(?:\\' + parts.join(\\'|\\') + \\')\\', flags(options));\\n\\n  return attachKeys(regexp, keys)\\n}\\n\\n/**\\n * Create a path regexp from string input.\\n *\\n * @param  {string}  path\\n * @param  {!Array}  keys\\n * @param  {!Object} options\\n * @return {!RegExp}\\n */\\nfunction stringToRegexp (path, keys, options) {\\n  return tokensToRegExp(vue_router_esm_parse(path, options), keys, options)\\n}\\n\\n/**\\n * Expose a function for taking tokens and returning a RegExp.\\n *\\n * @param  {!Array}          tokens\\n * @param  {(Array|Object)=} keys\\n * @param  {Object=}         options\\n * @return {!RegExp}\\n */\\nfunction tokensToRegExp (tokens, keys, options) {\\n  if (!isarray(keys)) {\\n    options = /** @type {!Object} */ (keys || options);\\n    keys = [];\\n  }\\n\\n  options = options || {};\\n\\n  var strict = options.strict;\\n  var end = options.end !== false;\\n  var route = \\'\\';\\n\\n  // Iterate over the tokens and create our regexp string.\\n  for (var i = 0; i < tokens.length; i++) {\\n    var token = tokens[i];\\n\\n    if (typeof token === \\'string\\') {\\n      route += escapeString(token);\\n    } else {\\n      var prefix = escapeString(token.prefix);\\n      var capture = \\'(?:\\' + token.pattern + \\')\\';\\n\\n      keys.push(token);\\n\\n      if (token.repeat) {\\n        capture += \\'(?:\\' + prefix + capture + \\')*\\';\\n      }\\n\\n      if (token.optional) {\\n        if (!token.partial) {\\n          capture = \\'(?:\\' + prefix + \\'(\\' + capture + \\'))?\\';\\n        } else {\\n          capture = prefix + \\'(\\' + capture + \\')?\\';\\n        }\\n      } else {\\n        capture = prefix + \\'(\\' + capture + \\')\\';\\n      }\\n\\n      route += capture;\\n    }\\n  }\\n\\n  var delimiter = escapeString(options.delimiter || \\'/\\');\\n  var endsWithDelimiter = route.slice(-delimiter.length) === delimiter;\\n\\n  // In non-strict mode we allow a slash at the end of match. If the path to\\n  // match already ends with a slash, we remove it for consistency. The slash\\n  // is valid at the end of a path match, not in the middle. This is important\\n  // in non-ending mode, where \"/test/\" shouldn\\'t match \"/test//route\".\\n  if (!strict) {\\n    route = (endsWithDelimiter ? route.slice(0, -delimiter.length) : route) + \\'(?:\\' + delimiter + \\'(?=$))?\\';\\n  }\\n\\n  if (end) {\\n    route += \\'$\\';\\n  } else {\\n    // In non-ending mode, we need the capturing groups to match as much as\\n    // possible by using a positive lookahead to the end or next path segment.\\n    route += strict && endsWithDelimiter ? \\'\\' : \\'(?=\\' + delimiter + \\'|$)\\';\\n  }\\n\\n  return attachKeys(new RegExp(\\'^\\' + route, flags(options)), keys)\\n}\\n\\n/**\\n * Normalize the given path string, returning a regular expression.\\n *\\n * An empty array can be passed in for the keys, which will hold the\\n * placeholder key descriptions. For example, using `/user/:id`, `keys` will\\n * contain `[{ name: \\'id\\', delimiter: \\'/\\', optional: false, repeat: false }]`.\\n *\\n * @param  {(string|RegExp|Array)} path\\n * @param  {(Array|Object)=}       keys\\n * @param  {Object=}               options\\n * @return {!RegExp}\\n */\\nfunction pathToRegexp (path, keys, options) {\\n  if (!isarray(keys)) {\\n    options = /** @type {!Object} */ (keys || options);\\n    keys = [];\\n  }\\n\\n  options = options || {};\\n\\n  if (path instanceof RegExp) {\\n    return regexpToRegexp(path, /** @type {!Array} */ (keys))\\n  }\\n\\n  if (isarray(path)) {\\n    return arrayToRegexp(/** @type {!Array} */ (path), /** @type {!Array} */ (keys), options)\\n  }\\n\\n  return stringToRegexp(/** @type {string} */ (path), /** @type {!Array} */ (keys), options)\\n}\\n\\npathToRegexp_1.parse = parse_1;\\npathToRegexp_1.compile = compile_1;\\npathToRegexp_1.tokensToFunction = tokensToFunction_1;\\npathToRegexp_1.tokensToRegExp = tokensToRegExp_1;\\n\\n/*  */\\n\\n// $flow-disable-line\\nvar regexpCompileCache = Object.create(null);\\n\\nfunction fillParams (\\n  path,\\n  params,\\n  routeMsg\\n) {\\n  try {\\n    var filler =\\n      regexpCompileCache[path] ||\\n      (regexpCompileCache[path] = pathToRegexp_1.compile(path));\\n    return filler(params || {}, { pretty: true })\\n  } catch (e) {\\n    if (false) {}\\n    return \\'\\'\\n  }\\n}\\n\\n/*  */\\n\\nfunction createRouteMap (\\n  routes,\\n  oldPathList,\\n  oldPathMap,\\n  oldNameMap\\n) {\\n  // the path list is used to control path matching priority\\n  var pathList = oldPathList || [];\\n  // $flow-disable-line\\n  var pathMap = oldPathMap || Object.create(null);\\n  // $flow-disable-line\\n  var nameMap = oldNameMap || Object.create(null);\\n\\n  routes.forEach(function (route) {\\n    addRouteRecord(pathList, pathMap, nameMap, route);\\n  });\\n\\n  // ensure wildcard routes are always at the end\\n  for (var i = 0, l = pathList.length; i < l; i++) {\\n    if (pathList[i] === \\'*\\') {\\n      pathList.push(pathList.splice(i, 1)[0]);\\n      l--;\\n      i--;\\n    }\\n  }\\n\\n  return {\\n    pathList: pathList,\\n    pathMap: pathMap,\\n    nameMap: nameMap\\n  }\\n}\\n\\nfunction addRouteRecord (\\n  pathList,\\n  pathMap,\\n  nameMap,\\n  route,\\n  parent,\\n  matchAs\\n) {\\n  var path = route.path;\\n  var name = route.name;\\n  if (false) {}\\n\\n  var pathToRegexpOptions = route.pathToRegexpOptions || {};\\n  var normalizedPath = normalizePath(\\n    path,\\n    parent,\\n    pathToRegexpOptions.strict\\n  );\\n\\n  if (typeof route.caseSensitive === \\'boolean\\') {\\n    pathToRegexpOptions.sensitive = route.caseSensitive;\\n  }\\n\\n  var record = {\\n    path: normalizedPath,\\n    regex: compileRouteRegex(normalizedPath, pathToRegexpOptions),\\n    components: route.components || { default: route.component },\\n    instances: {},\\n    name: name,\\n    parent: parent,\\n    matchAs: matchAs,\\n    redirect: route.redirect,\\n    beforeEnter: route.beforeEnter,\\n    meta: route.meta || {},\\n    props: route.props == null\\n      ? {}\\n      : route.components\\n        ? route.props\\n        : { default: route.props }\\n  };\\n\\n  if (route.children) {\\n    // Warn if route is named, does not redirect and has a default child route.\\n    // If users navigate to this route by name, the default child will\\n    // not be rendered (GH Issue #629)\\n    if (false) {}\\n    route.children.forEach(function (child) {\\n      var childMatchAs = matchAs\\n        ? cleanPath((matchAs + \"/\" + (child.path)))\\n        : undefined;\\n      addRouteRecord(pathList, pathMap, nameMap, child, record, childMatchAs);\\n    });\\n  }\\n\\n  if (route.alias !== undefined) {\\n    var aliases = Array.isArray(route.alias)\\n      ? route.alias\\n      : [route.alias];\\n\\n    aliases.forEach(function (alias) {\\n      var aliasRoute = {\\n        path: alias,\\n        children: route.children\\n      };\\n      addRouteRecord(\\n        pathList,\\n        pathMap,\\n        nameMap,\\n        aliasRoute,\\n        parent,\\n        record.path || \\'/\\' // matchAs\\n      );\\n    });\\n  }\\n\\n  if (!pathMap[record.path]) {\\n    pathList.push(record.path);\\n    pathMap[record.path] = record;\\n  }\\n\\n  if (name) {\\n    if (!nameMap[name]) {\\n      nameMap[name] = record;\\n    } else if (false) {}\\n  }\\n}\\n\\nfunction compileRouteRegex (path, pathToRegexpOptions) {\\n  var regex = pathToRegexp_1(path, [], pathToRegexpOptions);\\n  if (false) { var keys; }\\n  return regex\\n}\\n\\nfunction normalizePath (path, parent, strict) {\\n  if (!strict) { path = path.replace(/\\\\/$/, \\'\\'); }\\n  if (path[0] === \\'/\\') { return path }\\n  if (parent == null) { return path }\\n  return cleanPath(((parent.path) + \"/\" + path))\\n}\\n\\n/*  */\\n\\n\\nfunction normalizeLocation (\\n  raw,\\n  current,\\n  append,\\n  router\\n) {\\n  var next = typeof raw === \\'string\\' ? { path: raw } : raw;\\n  // named target\\n  if (next.name || next._normalized) {\\n    return next\\n  }\\n\\n  // relative params\\n  if (!next.path && next.params && current) {\\n    next = vue_router_esm_assign({}, next);\\n    next._normalized = true;\\n    var params = vue_router_esm_assign(vue_router_esm_assign({}, current.params), next.params);\\n    if (current.name) {\\n      next.name = current.name;\\n      next.params = params;\\n    } else if (current.matched.length) {\\n      var rawPath = current.matched[current.matched.length - 1].path;\\n      next.path = fillParams(rawPath, params, (\"path \" + (current.path)));\\n    } else if (false) {}\\n    return next\\n  }\\n\\n  var parsedPath = parsePath(next.path || \\'\\');\\n  var basePath = (current && current.path) || \\'/\\';\\n  var path = parsedPath.path\\n    ? resolvePath(parsedPath.path, basePath, append || next.append)\\n    : basePath;\\n\\n  var query = resolveQuery(\\n    parsedPath.query,\\n    next.query,\\n    router && router.options.parseQuery\\n  );\\n\\n  var hash = next.hash || parsedPath.hash;\\n  if (hash && hash.charAt(0) !== \\'#\\') {\\n    hash = \"#\" + hash;\\n  }\\n\\n  return {\\n    _normalized: true,\\n    path: path,\\n    query: query,\\n    hash: hash\\n  }\\n}\\n\\nfunction vue_router_esm_assign (a, b) {\\n  for (var key in b) {\\n    a[key] = b[key];\\n  }\\n  return a\\n}\\n\\n/*  */\\n\\n\\nfunction createMatcher (\\n  routes,\\n  router\\n) {\\n  var ref = createRouteMap(routes);\\n  var pathList = ref.pathList;\\n  var pathMap = ref.pathMap;\\n  var nameMap = ref.nameMap;\\n\\n  function addRoutes (routes) {\\n    createRouteMap(routes, pathList, pathMap, nameMap);\\n  }\\n\\n  function match (\\n    raw,\\n    currentRoute,\\n    redirectedFrom\\n  ) {\\n    var location = normalizeLocation(raw, currentRoute, false, router);\\n    var name = location.name;\\n\\n    if (name) {\\n      var record = nameMap[name];\\n      if (false) {}\\n      if (!record) { return _createRoute(null, location) }\\n      var paramNames = record.regex.keys\\n        .filter(function (key) { return !key.optional; })\\n        .map(function (key) { return key.name; });\\n\\n      if (typeof location.params !== \\'object\\') {\\n        location.params = {};\\n      }\\n\\n      if (currentRoute && typeof currentRoute.params === \\'object\\') {\\n        for (var key in currentRoute.params) {\\n          if (!(key in location.params) && paramNames.indexOf(key) > -1) {\\n            location.params[key] = currentRoute.params[key];\\n          }\\n        }\\n      }\\n\\n      if (record) {\\n        location.path = fillParams(record.path, location.params, (\"named route \\\\\"\" + name + \"\\\\\"\"));\\n        return _createRoute(record, location, redirectedFrom)\\n      }\\n    } else if (location.path) {\\n      location.params = {};\\n      for (var i = 0; i < pathList.length; i++) {\\n        var path = pathList[i];\\n        var record$1 = pathMap[path];\\n        if (matchRoute(record$1.regex, location.path, location.params)) {\\n          return _createRoute(record$1, location, redirectedFrom)\\n        }\\n      }\\n    }\\n    // no match\\n    return _createRoute(null, location)\\n  }\\n\\n  function redirect (\\n    record,\\n    location\\n  ) {\\n    var originalRedirect = record.redirect;\\n    var redirect = typeof originalRedirect === \\'function\\'\\n        ? originalRedirect(createRoute(record, location, null, router))\\n        : originalRedirect;\\n\\n    if (typeof redirect === \\'string\\') {\\n      redirect = { path: redirect };\\n    }\\n\\n    if (!redirect || typeof redirect !== \\'object\\') {\\n      if (false) {}\\n      return _createRoute(null, location)\\n    }\\n\\n    var re = redirect;\\n    var name = re.name;\\n    var path = re.path;\\n    var query = location.query;\\n    var hash = location.hash;\\n    var params = location.params;\\n    query = re.hasOwnProperty(\\'query\\') ? re.query : query;\\n    hash = re.hasOwnProperty(\\'hash\\') ? re.hash : hash;\\n    params = re.hasOwnProperty(\\'params\\') ? re.params : params;\\n\\n    if (name) {\\n      // resolved named direct\\n      var targetRecord = nameMap[name];\\n      if (false) {}\\n      return match({\\n        _normalized: true,\\n        name: name,\\n        query: query,\\n        hash: hash,\\n        params: params\\n      }, undefined, location)\\n    } else if (path) {\\n      // 1. resolve relative redirect\\n      var rawPath = resolveRecordPath(path, record);\\n      // 2. resolve params\\n      var resolvedPath = fillParams(rawPath, params, (\"redirect route with path \\\\\"\" + rawPath + \"\\\\\"\"));\\n      // 3. rematch with existing query and hash\\n      return match({\\n        _normalized: true,\\n        path: resolvedPath,\\n        query: query,\\n        hash: hash\\n      }, undefined, location)\\n    } else {\\n      if (false) {}\\n      return _createRoute(null, location)\\n    }\\n  }\\n\\n  function alias (\\n    record,\\n    location,\\n    matchAs\\n  ) {\\n    var aliasedPath = fillParams(matchAs, location.params, (\"aliased route with path \\\\\"\" + matchAs + \"\\\\\"\"));\\n    var aliasedMatch = match({\\n      _normalized: true,\\n      path: aliasedPath\\n    });\\n    if (aliasedMatch) {\\n      var matched = aliasedMatch.matched;\\n      var aliasedRecord = matched[matched.length - 1];\\n      location.params = aliasedMatch.params;\\n      return _createRoute(aliasedRecord, location)\\n    }\\n    return _createRoute(null, location)\\n  }\\n\\n  function _createRoute (\\n    record,\\n    location,\\n    redirectedFrom\\n  ) {\\n    if (record && record.redirect) {\\n      return redirect(record, redirectedFrom || location)\\n    }\\n    if (record && record.matchAs) {\\n      return alias(record, location, record.matchAs)\\n    }\\n    return createRoute(record, location, redirectedFrom, router)\\n  }\\n\\n  return {\\n    match: match,\\n    addRoutes: addRoutes\\n  }\\n}\\n\\nfunction matchRoute (\\n  regex,\\n  path,\\n  params\\n) {\\n  var m = path.match(regex);\\n\\n  if (!m) {\\n    return false\\n  } else if (!params) {\\n    return true\\n  }\\n\\n  for (var i = 1, len = m.length; i < len; ++i) {\\n    var key = regex.keys[i - 1];\\n    var val = typeof m[i] === \\'string\\' ? decodeURIComponent(m[i]) : m[i];\\n    if (key) {\\n      params[key.name] = val;\\n    }\\n  }\\n\\n  return true\\n}\\n\\nfunction resolveRecordPath (path, record) {\\n  return resolvePath(path, record.parent ? record.parent.path : \\'/\\', true)\\n}\\n\\n/*  */\\n\\n\\nvar positionStore = Object.create(null);\\n\\nfunction setupScroll () {\\n  // Fix for #1585 for Firefox\\n  window.history.replaceState({ key: getStateKey() }, \\'\\');\\n  window.addEventListener(\\'popstate\\', function (e) {\\n    saveScrollPosition();\\n    if (e.state && e.state.key) {\\n      setStateKey(e.state.key);\\n    }\\n  });\\n}\\n\\nfunction handleScroll (\\n  router,\\n  to,\\n  from,\\n  isPop\\n) {\\n  if (!router.app) {\\n    return\\n  }\\n\\n  var behavior = router.options.scrollBehavior;\\n  if (!behavior) {\\n    return\\n  }\\n\\n  if (false) {}\\n\\n  // wait until re-render finishes before scrolling\\n  router.app.$nextTick(function () {\\n    var position = getScrollPosition();\\n    var shouldScroll = behavior(to, from, isPop ? position : null);\\n\\n    if (!shouldScroll) {\\n      return\\n    }\\n\\n    if (typeof shouldScroll.then === \\'function\\') {\\n      shouldScroll.then(function (shouldScroll) {\\n        scrollToPosition((shouldScroll), position);\\n      }).catch(function (err) {\\n        if (false) {}\\n      });\\n    } else {\\n      scrollToPosition(shouldScroll, position);\\n    }\\n  });\\n}\\n\\nfunction saveScrollPosition () {\\n  var key = getStateKey();\\n  if (key) {\\n    positionStore[key] = {\\n      x: window.pageXOffset,\\n      y: window.pageYOffset\\n    };\\n  }\\n}\\n\\nfunction getScrollPosition () {\\n  var key = getStateKey();\\n  if (key) {\\n    return positionStore[key]\\n  }\\n}\\n\\nfunction getElementPosition (el, offset) {\\n  var docEl = document.documentElement;\\n  var docRect = docEl.getBoundingClientRect();\\n  var elRect = el.getBoundingClientRect();\\n  return {\\n    x: elRect.left - docRect.left - offset.x,\\n    y: elRect.top - docRect.top - offset.y\\n  }\\n}\\n\\nfunction isValidPosition (obj) {\\n  return isNumber(obj.x) || isNumber(obj.y)\\n}\\n\\nfunction normalizePosition (obj) {\\n  return {\\n    x: isNumber(obj.x) ? obj.x : window.pageXOffset,\\n    y: isNumber(obj.y) ? obj.y : window.pageYOffset\\n  }\\n}\\n\\nfunction normalizeOffset (obj) {\\n  return {\\n    x: isNumber(obj.x) ? obj.x : 0,\\n    y: isNumber(obj.y) ? obj.y : 0\\n  }\\n}\\n\\nfunction isNumber (v) {\\n  return typeof v === \\'number\\'\\n}\\n\\nfunction scrollToPosition (shouldScroll, position) {\\n  var isObject = typeof shouldScroll === \\'object\\';\\n  if (isObject && typeof shouldScroll.selector === \\'string\\') {\\n    var el = document.querySelector(shouldScroll.selector);\\n    if (el) {\\n      var offset = shouldScroll.offset && typeof shouldScroll.offset === \\'object\\' ? shouldScroll.offset : {};\\n      offset = normalizeOffset(offset);\\n      position = getElementPosition(el, offset);\\n    } else if (isValidPosition(shouldScroll)) {\\n      position = normalizePosition(shouldScroll);\\n    }\\n  } else if (isObject && isValidPosition(shouldScroll)) {\\n    position = normalizePosition(shouldScroll);\\n  }\\n\\n  if (position) {\\n    window.scrollTo(position.x, position.y);\\n  }\\n}\\n\\n/*  */\\n\\nvar supportsPushState = inBrowser && (function () {\\n  var ua = window.navigator.userAgent;\\n\\n  if (\\n    (ua.indexOf(\\'Android 2.\\') !== -1 || ua.indexOf(\\'Android 4.0\\') !== -1) &&\\n    ua.indexOf(\\'Mobile Safari\\') !== -1 &&\\n    ua.indexOf(\\'Chrome\\') === -1 &&\\n    ua.indexOf(\\'Windows Phone\\') === -1\\n  ) {\\n    return false\\n  }\\n\\n  return window.history && \\'pushState\\' in window.history\\n})();\\n\\n// use User Timing api (if present) for more accurate key precision\\nvar Time = inBrowser && window.performance && window.performance.now\\n  ? window.performance\\n  : Date;\\n\\nvar _key = genKey();\\n\\nfunction genKey () {\\n  return Time.now().toFixed(3)\\n}\\n\\nfunction getStateKey () {\\n  return _key\\n}\\n\\nfunction setStateKey (key) {\\n  _key = key;\\n}\\n\\nfunction pushState (url, replace) {\\n  saveScrollPosition();\\n  // try...catch the pushState call to get around Safari\\n  // DOM Exception 18 where it limits to 100 pushState calls\\n  var history = window.history;\\n  try {\\n    if (replace) {\\n      history.replaceState({ key: _key }, \\'\\', url);\\n    } else {\\n      _key = genKey();\\n      history.pushState({ key: _key }, \\'\\', url);\\n    }\\n  } catch (e) {\\n    window.location[replace ? \\'replace\\' : \\'assign\\'](url);\\n  }\\n}\\n\\nfunction replaceState (url) {\\n  pushState(url, true);\\n}\\n\\n/*  */\\n\\nfunction runQueue (queue, fn, cb) {\\n  var step = function (index) {\\n    if (index >= queue.length) {\\n      cb();\\n    } else {\\n      if (queue[index]) {\\n        fn(queue[index], function () {\\n          step(index + 1);\\n        });\\n      } else {\\n        step(index + 1);\\n      }\\n    }\\n  };\\n  step(0);\\n}\\n\\n/*  */\\n\\nfunction resolveAsyncComponents (matched) {\\n  return function (to, from, next) {\\n    var hasAsync = false;\\n    var pending = 0;\\n    var error = null;\\n\\n    flatMapComponents(matched, function (def, _, match, key) {\\n      // if it\\'s a function and doesn\\'t have cid attached,\\n      // assume it\\'s an async component resolve function.\\n      // we are not using Vue\\'s default async resolving mechanism because\\n      // we want to halt the navigation until the incoming component has been\\n      // resolved.\\n      if (typeof def === \\'function\\' && def.cid === undefined) {\\n        hasAsync = true;\\n        pending++;\\n\\n        var resolve = once(function (resolvedDef) {\\n          if (isESModule(resolvedDef)) {\\n            resolvedDef = resolvedDef.default;\\n          }\\n          // save resolved on async factory in case it\\'s used elsewhere\\n          def.resolved = typeof resolvedDef === \\'function\\'\\n            ? resolvedDef\\n            : _Vue.extend(resolvedDef);\\n          match.components[key] = resolvedDef;\\n          pending--;\\n          if (pending <= 0) {\\n            next();\\n          }\\n        });\\n\\n        var reject = once(function (reason) {\\n          var msg = \"Failed to resolve async component \" + key + \": \" + reason;\\n          \"production\" !== \\'production\\' && warn(false, msg);\\n          if (!error) {\\n            error = isError(reason)\\n              ? reason\\n              : new Error(msg);\\n            next(error);\\n          }\\n        });\\n\\n        var res;\\n        try {\\n          res = def(resolve, reject);\\n        } catch (e) {\\n          reject(e);\\n        }\\n        if (res) {\\n          if (typeof res.then === \\'function\\') {\\n            res.then(resolve, reject);\\n          } else {\\n            // new syntax in Vue 2.3\\n            var comp = res.component;\\n            if (comp && typeof comp.then === \\'function\\') {\\n              comp.then(resolve, reject);\\n            }\\n          }\\n        }\\n      }\\n    });\\n\\n    if (!hasAsync) { next(); }\\n  }\\n}\\n\\nfunction flatMapComponents (\\n  matched,\\n  fn\\n) {\\n  return flatten(matched.map(function (m) {\\n    return Object.keys(m.components).map(function (key) { return fn(\\n      m.components[key],\\n      m.instances[key],\\n      m, key\\n    ); })\\n  }))\\n}\\n\\nfunction flatten (arr) {\\n  return Array.prototype.concat.apply([], arr)\\n}\\n\\nvar hasSymbol =\\n  typeof Symbol === \\'function\\' &&\\n  typeof Symbol.toStringTag === \\'symbol\\';\\n\\nfunction isESModule (obj) {\\n  return obj.__esModule || (hasSymbol && obj[Symbol.toStringTag] === \\'Module\\')\\n}\\n\\n// in Webpack 2, require.ensure now also returns a Promise\\n// so the resolve/reject functions may get called an extra time\\n// if the user uses an arrow function shorthand that happens to\\n// return that Promise.\\nfunction once (fn) {\\n  var called = false;\\n  return function () {\\n    var args = [], len = arguments.length;\\n    while ( len-- ) args[ len ] = arguments[ len ];\\n\\n    if (called) { return }\\n    called = true;\\n    return fn.apply(this, args)\\n  }\\n}\\n\\n/*  */\\n\\nvar History = function History (router, base) {\\n  this.router = router;\\n  this.base = normalizeBase(base);\\n  // start with a route object that stands for \"nowhere\"\\n  this.current = START;\\n  this.pending = null;\\n  this.ready = false;\\n  this.readyCbs = [];\\n  this.readyErrorCbs = [];\\n  this.errorCbs = [];\\n};\\n\\nHistory.prototype.listen = function listen (cb) {\\n  this.cb = cb;\\n};\\n\\nHistory.prototype.onReady = function onReady (cb, errorCb) {\\n  if (this.ready) {\\n    cb();\\n  } else {\\n    this.readyCbs.push(cb);\\n    if (errorCb) {\\n      this.readyErrorCbs.push(errorCb);\\n    }\\n  }\\n};\\n\\nHistory.prototype.onError = function onError (errorCb) {\\n  this.errorCbs.push(errorCb);\\n};\\n\\nHistory.prototype.transitionTo = function transitionTo (location, onComplete, onAbort) {\\n    var this$1 = this;\\n\\n  var route = this.router.match(location, this.current);\\n  this.confirmTransition(route, function () {\\n    this$1.updateRoute(route);\\n    onComplete && onComplete(route);\\n    this$1.ensureURL();\\n\\n    // fire ready cbs once\\n    if (!this$1.ready) {\\n      this$1.ready = true;\\n      this$1.readyCbs.forEach(function (cb) { cb(route); });\\n    }\\n  }, function (err) {\\n    if (onAbort) {\\n      onAbort(err);\\n    }\\n    if (err && !this$1.ready) {\\n      this$1.ready = true;\\n      this$1.readyErrorCbs.forEach(function (cb) { cb(err); });\\n    }\\n  });\\n};\\n\\nHistory.prototype.confirmTransition = function confirmTransition (route, onComplete, onAbort) {\\n    var this$1 = this;\\n\\n  var current = this.current;\\n  var abort = function (err) {\\n    if (isError(err)) {\\n      if (this$1.errorCbs.length) {\\n        this$1.errorCbs.forEach(function (cb) { cb(err); });\\n      } else {\\n        warn(false, \\'uncaught error during route navigation:\\');\\n        console.error(err);\\n      }\\n    }\\n    onAbort && onAbort(err);\\n  };\\n  if (\\n    isSameRoute(route, current) &&\\n    // in the case the route map has been dynamically appended to\\n    route.matched.length === current.matched.length\\n  ) {\\n    this.ensureURL();\\n    return abort()\\n  }\\n\\n  var ref = resolveQueue(this.current.matched, route.matched);\\n    var updated = ref.updated;\\n    var deactivated = ref.deactivated;\\n    var activated = ref.activated;\\n\\n  var queue = [].concat(\\n    // in-component leave guards\\n    extractLeaveGuards(deactivated),\\n    // global before hooks\\n    this.router.beforeHooks,\\n    // in-component update hooks\\n    extractUpdateHooks(updated),\\n    // in-config enter guards\\n    activated.map(function (m) { return m.beforeEnter; }),\\n    // async components\\n    resolveAsyncComponents(activated)\\n  );\\n\\n  this.pending = route;\\n  var iterator = function (hook, next) {\\n    if (this$1.pending !== route) {\\n      return abort()\\n    }\\n    try {\\n      hook(route, current, function (to) {\\n        if (to === false || isError(to)) {\\n          // next(false) -> abort navigation, ensure current URL\\n          this$1.ensureURL(true);\\n          abort(to);\\n        } else if (\\n          typeof to === \\'string\\' ||\\n          (typeof to === \\'object\\' && (\\n            typeof to.path === \\'string\\' ||\\n            typeof to.name === \\'string\\'\\n          ))\\n        ) {\\n          // next(\\'/\\') or next({ path: \\'/\\' }) -> redirect\\n          abort();\\n          if (typeof to === \\'object\\' && to.replace) {\\n            this$1.replace(to);\\n          } else {\\n            this$1.push(to);\\n          }\\n        } else {\\n          // confirm transition and pass on the value\\n          next(to);\\n        }\\n      });\\n    } catch (e) {\\n      abort(e);\\n    }\\n  };\\n\\n  runQueue(queue, iterator, function () {\\n    var postEnterCbs = [];\\n    var isValid = function () { return this$1.current === route; };\\n    // wait until async components are resolved before\\n    // extracting in-component enter guards\\n    var enterGuards = extractEnterGuards(activated, postEnterCbs, isValid);\\n    var queue = enterGuards.concat(this$1.router.resolveHooks);\\n    runQueue(queue, iterator, function () {\\n      if (this$1.pending !== route) {\\n        return abort()\\n      }\\n      this$1.pending = null;\\n      onComplete(route);\\n      if (this$1.router.app) {\\n        this$1.router.app.$nextTick(function () {\\n          postEnterCbs.forEach(function (cb) { cb(); });\\n        });\\n      }\\n    });\\n  });\\n};\\n\\nHistory.prototype.updateRoute = function updateRoute (route) {\\n  var prev = this.current;\\n  this.current = route;\\n  this.cb && this.cb(route);\\n  this.router.afterHooks.forEach(function (hook) {\\n    hook && hook(route, prev);\\n  });\\n};\\n\\nfunction normalizeBase (base) {\\n  if (!base) {\\n    if (inBrowser) {\\n      // respect <base> tag\\n      var baseEl = document.querySelector(\\'base\\');\\n      base = (baseEl && baseEl.getAttribute(\\'href\\')) || \\'/\\';\\n      // strip full URL origin\\n      base = base.replace(/^https?:\\\\/\\\\/[^\\\\/]+/, \\'\\');\\n    } else {\\n      base = \\'/\\';\\n    }\\n  }\\n  // make sure there\\'s the starting slash\\n  if (base.charAt(0) !== \\'/\\') {\\n    base = \\'/\\' + base;\\n  }\\n  // remove trailing slash\\n  return base.replace(/\\\\/$/, \\'\\')\\n}\\n\\nfunction resolveQueue (\\n  current,\\n  next\\n) {\\n  var i;\\n  var max = Math.max(current.length, next.length);\\n  for (i = 0; i < max; i++) {\\n    if (current[i] !== next[i]) {\\n      break\\n    }\\n  }\\n  return {\\n    updated: next.slice(0, i),\\n    activated: next.slice(i),\\n    deactivated: current.slice(i)\\n  }\\n}\\n\\nfunction extractGuards (\\n  records,\\n  name,\\n  bind,\\n  reverse\\n) {\\n  var guards = flatMapComponents(records, function (def, instance, match, key) {\\n    var guard = extractGuard(def, name);\\n    if (guard) {\\n      return Array.isArray(guard)\\n        ? guard.map(function (guard) { return bind(guard, instance, match, key); })\\n        : bind(guard, instance, match, key)\\n    }\\n  });\\n  return flatten(reverse ? guards.reverse() : guards)\\n}\\n\\nfunction extractGuard (\\n  def,\\n  key\\n) {\\n  if (typeof def !== \\'function\\') {\\n    // extend now so that global mixins are applied.\\n    def = _Vue.extend(def);\\n  }\\n  return def.options[key]\\n}\\n\\nfunction extractLeaveGuards (deactivated) {\\n  return extractGuards(deactivated, \\'beforeRouteLeave\\', bindGuard, true)\\n}\\n\\nfunction extractUpdateHooks (updated) {\\n  return extractGuards(updated, \\'beforeRouteUpdate\\', bindGuard)\\n}\\n\\nfunction bindGuard (guard, instance) {\\n  if (instance) {\\n    return function boundRouteGuard () {\\n      return guard.apply(instance, arguments)\\n    }\\n  }\\n}\\n\\nfunction extractEnterGuards (\\n  activated,\\n  cbs,\\n  isValid\\n) {\\n  return extractGuards(activated, \\'beforeRouteEnter\\', function (guard, _, match, key) {\\n    return bindEnterGuard(guard, match, key, cbs, isValid)\\n  })\\n}\\n\\nfunction bindEnterGuard (\\n  guard,\\n  match,\\n  key,\\n  cbs,\\n  isValid\\n) {\\n  return function routeEnterGuard (to, from, next) {\\n    return guard(to, from, function (cb) {\\n      next(cb);\\n      if (typeof cb === \\'function\\') {\\n        cbs.push(function () {\\n          // #750\\n          // if a router-view is wrapped with an out-in transition,\\n          // the instance may not have been registered at this time.\\n          // we will need to poll for registration until current route\\n          // is no longer valid.\\n          poll(cb, match.instances, key, isValid);\\n        });\\n      }\\n    })\\n  }\\n}\\n\\nfunction poll (\\n  cb, // somehow flow cannot infer this is a function\\n  instances,\\n  key,\\n  isValid\\n) {\\n  if (instances[key]) {\\n    cb(instances[key]);\\n  } else if (isValid()) {\\n    setTimeout(function () {\\n      poll(cb, instances, key, isValid);\\n    }, 16);\\n  }\\n}\\n\\n/*  */\\n\\n\\nvar HTML5History = (function (History$$1) {\\n  function HTML5History (router, base) {\\n    var this$1 = this;\\n\\n    History$$1.call(this, router, base);\\n\\n    var expectScroll = router.options.scrollBehavior;\\n\\n    if (expectScroll) {\\n      setupScroll();\\n    }\\n\\n    var initLocation = getLocation(this.base);\\n    window.addEventListener(\\'popstate\\', function (e) {\\n      var current = this$1.current;\\n\\n      // Avoiding first `popstate` event dispatched in some browsers but first\\n      // history route not updated since async guard at the same time.\\n      var location = getLocation(this$1.base);\\n      if (this$1.current === START && location === initLocation) {\\n        return\\n      }\\n\\n      this$1.transitionTo(location, function (route) {\\n        if (expectScroll) {\\n          handleScroll(router, route, current, true);\\n        }\\n      });\\n    });\\n  }\\n\\n  if ( History$$1 ) HTML5History.__proto__ = History$$1;\\n  HTML5History.prototype = Object.create( History$$1 && History$$1.prototype );\\n  HTML5History.prototype.constructor = HTML5History;\\n\\n  HTML5History.prototype.go = function go (n) {\\n    window.history.go(n);\\n  };\\n\\n  HTML5History.prototype.push = function push (location, onComplete, onAbort) {\\n    var this$1 = this;\\n\\n    var ref = this;\\n    var fromRoute = ref.current;\\n    this.transitionTo(location, function (route) {\\n      pushState(cleanPath(this$1.base + route.fullPath));\\n      handleScroll(this$1.router, route, fromRoute, false);\\n      onComplete && onComplete(route);\\n    }, onAbort);\\n  };\\n\\n  HTML5History.prototype.replace = function replace (location, onComplete, onAbort) {\\n    var this$1 = this;\\n\\n    var ref = this;\\n    var fromRoute = ref.current;\\n    this.transitionTo(location, function (route) {\\n      replaceState(cleanPath(this$1.base + route.fullPath));\\n      handleScroll(this$1.router, route, fromRoute, false);\\n      onComplete && onComplete(route);\\n    }, onAbort);\\n  };\\n\\n  HTML5History.prototype.ensureURL = function ensureURL (push) {\\n    if (getLocation(this.base) !== this.current.fullPath) {\\n      var current = cleanPath(this.base + this.current.fullPath);\\n      push ? pushState(current) : replaceState(current);\\n    }\\n  };\\n\\n  HTML5History.prototype.getCurrentLocation = function getCurrentLocation () {\\n    return getLocation(this.base)\\n  };\\n\\n  return HTML5History;\\n}(History));\\n\\nfunction getLocation (base) {\\n  var path = window.location.pathname;\\n  if (base && path.indexOf(base) === 0) {\\n    path = path.slice(base.length);\\n  }\\n  return (path || \\'/\\') + window.location.search + window.location.hash\\n}\\n\\n/*  */\\n\\n\\nvar HashHistory = (function (History$$1) {\\n  function HashHistory (router, base, fallback) {\\n    History$$1.call(this, router, base);\\n    // check history fallback deeplinking\\n    if (fallback && checkFallback(this.base)) {\\n      return\\n    }\\n    ensureSlash();\\n  }\\n\\n  if ( History$$1 ) HashHistory.__proto__ = History$$1;\\n  HashHistory.prototype = Object.create( History$$1 && History$$1.prototype );\\n  HashHistory.prototype.constructor = HashHistory;\\n\\n  // this is delayed until the app mounts\\n  // to avoid the hashchange listener being fired too early\\n  HashHistory.prototype.setupListeners = function setupListeners () {\\n    var this$1 = this;\\n\\n    var router = this.router;\\n    var expectScroll = router.options.scrollBehavior;\\n    var supportsScroll = supportsPushState && expectScroll;\\n\\n    if (supportsScroll) {\\n      setupScroll();\\n    }\\n\\n    window.addEventListener(supportsPushState ? \\'popstate\\' : \\'hashchange\\', function () {\\n      var current = this$1.current;\\n      if (!ensureSlash()) {\\n        return\\n      }\\n      this$1.transitionTo(getHash(), function (route) {\\n        if (supportsScroll) {\\n          handleScroll(this$1.router, route, current, true);\\n        }\\n        if (!supportsPushState) {\\n          replaceHash(route.fullPath);\\n        }\\n      });\\n    });\\n  };\\n\\n  HashHistory.prototype.push = function push (location, onComplete, onAbort) {\\n    var this$1 = this;\\n\\n    var ref = this;\\n    var fromRoute = ref.current;\\n    this.transitionTo(location, function (route) {\\n      pushHash(route.fullPath);\\n      handleScroll(this$1.router, route, fromRoute, false);\\n      onComplete && onComplete(route);\\n    }, onAbort);\\n  };\\n\\n  HashHistory.prototype.replace = function replace (location, onComplete, onAbort) {\\n    var this$1 = this;\\n\\n    var ref = this;\\n    var fromRoute = ref.current;\\n    this.transitionTo(location, function (route) {\\n      replaceHash(route.fullPath);\\n      handleScroll(this$1.router, route, fromRoute, false);\\n      onComplete && onComplete(route);\\n    }, onAbort);\\n  };\\n\\n  HashHistory.prototype.go = function go (n) {\\n    window.history.go(n);\\n  };\\n\\n  HashHistory.prototype.ensureURL = function ensureURL (push) {\\n    var current = this.current.fullPath;\\n    if (getHash() !== current) {\\n      push ? pushHash(current) : replaceHash(current);\\n    }\\n  };\\n\\n  HashHistory.prototype.getCurrentLocation = function getCurrentLocation () {\\n    return getHash()\\n  };\\n\\n  return HashHistory;\\n}(History));\\n\\nfunction checkFallback (base) {\\n  var location = getLocation(base);\\n  if (!/^\\\\/#/.test(location)) {\\n    window.location.replace(\\n      cleanPath(base + \\'/#\\' + location)\\n    );\\n    return true\\n  }\\n}\\n\\nfunction ensureSlash () {\\n  var path = getHash();\\n  if (path.charAt(0) === \\'/\\') {\\n    return true\\n  }\\n  replaceHash(\\'/\\' + path);\\n  return false\\n}\\n\\nfunction getHash () {\\n  // We can\\'t use window.location.hash here because it\\'s not\\n  // consistent across browsers - Firefox will pre-decode it!\\n  var href = window.location.href;\\n  var index = href.indexOf(\\'#\\');\\n  return index === -1 ? \\'\\' : href.slice(index + 1)\\n}\\n\\nfunction getUrl (path) {\\n  var href = window.location.href;\\n  var i = href.indexOf(\\'#\\');\\n  var base = i >= 0 ? href.slice(0, i) : href;\\n  return (base + \"#\" + path)\\n}\\n\\nfunction pushHash (path) {\\n  if (supportsPushState) {\\n    pushState(getUrl(path));\\n  } else {\\n    window.location.hash = path;\\n  }\\n}\\n\\nfunction replaceHash (path) {\\n  if (supportsPushState) {\\n    replaceState(getUrl(path));\\n  } else {\\n    window.location.replace(getUrl(path));\\n  }\\n}\\n\\n/*  */\\n\\n\\nvar AbstractHistory = (function (History$$1) {\\n  function AbstractHistory (router, base) {\\n    History$$1.call(this, router, base);\\n    this.stack = [];\\n    this.index = -1;\\n  }\\n\\n  if ( History$$1 ) AbstractHistory.__proto__ = History$$1;\\n  AbstractHistory.prototype = Object.create( History$$1 && History$$1.prototype );\\n  AbstractHistory.prototype.constructor = AbstractHistory;\\n\\n  AbstractHistory.prototype.push = function push (location, onComplete, onAbort) {\\n    var this$1 = this;\\n\\n    this.transitionTo(location, function (route) {\\n      this$1.stack = this$1.stack.slice(0, this$1.index + 1).concat(route);\\n      this$1.index++;\\n      onComplete && onComplete(route);\\n    }, onAbort);\\n  };\\n\\n  AbstractHistory.prototype.replace = function replace (location, onComplete, onAbort) {\\n    var this$1 = this;\\n\\n    this.transitionTo(location, function (route) {\\n      this$1.stack = this$1.stack.slice(0, this$1.index).concat(route);\\n      onComplete && onComplete(route);\\n    }, onAbort);\\n  };\\n\\n  AbstractHistory.prototype.go = function go (n) {\\n    var this$1 = this;\\n\\n    var targetIndex = this.index + n;\\n    if (targetIndex < 0 || targetIndex >= this.stack.length) {\\n      return\\n    }\\n    var route = this.stack[targetIndex];\\n    this.confirmTransition(route, function () {\\n      this$1.index = targetIndex;\\n      this$1.updateRoute(route);\\n    });\\n  };\\n\\n  AbstractHistory.prototype.getCurrentLocation = function getCurrentLocation () {\\n    var current = this.stack[this.stack.length - 1];\\n    return current ? current.fullPath : \\'/\\'\\n  };\\n\\n  AbstractHistory.prototype.ensureURL = function ensureURL () {\\n    // noop\\n  };\\n\\n  return AbstractHistory;\\n}(History));\\n\\n/*  */\\n\\nvar VueRouter = function VueRouter (options) {\\n  if ( options === void 0 ) options = {};\\n\\n  this.app = null;\\n  this.apps = [];\\n  this.options = options;\\n  this.beforeHooks = [];\\n  this.resolveHooks = [];\\n  this.afterHooks = [];\\n  this.matcher = createMatcher(options.routes || [], this);\\n\\n  var mode = options.mode || \\'hash\\';\\n  this.fallback = mode === \\'history\\' && !supportsPushState && options.fallback !== false;\\n  if (this.fallback) {\\n    mode = \\'hash\\';\\n  }\\n  if (!inBrowser) {\\n    mode = \\'abstract\\';\\n  }\\n  this.mode = mode;\\n\\n  switch (mode) {\\n    case \\'history\\':\\n      this.history = new HTML5History(this, options.base);\\n      break\\n    case \\'hash\\':\\n      this.history = new HashHistory(this, options.base, this.fallback);\\n      break\\n    case \\'abstract\\':\\n      this.history = new AbstractHistory(this, options.base);\\n      break\\n    default:\\n      if (false) {}\\n  }\\n};\\n\\nvar prototypeAccessors = { currentRoute: { configurable: true } };\\n\\nVueRouter.prototype.match = function match (\\n  raw,\\n  current,\\n  redirectedFrom\\n) {\\n  return this.matcher.match(raw, current, redirectedFrom)\\n};\\n\\nprototypeAccessors.currentRoute.get = function () {\\n  return this.history && this.history.current\\n};\\n\\nVueRouter.prototype.init = function init (app /* Vue component instance */) {\\n    var this$1 = this;\\n\\n  \"production\" !== \\'production\\' && assert(\\n    install.installed,\\n    \"not installed. Make sure to call `Vue.use(VueRouter)` \" +\\n    \"before creating root instance.\"\\n  );\\n\\n  this.apps.push(app);\\n\\n  // main app already initialized.\\n  if (this.app) {\\n    return\\n  }\\n\\n  this.app = app;\\n\\n  var history = this.history;\\n\\n  if (history instanceof HTML5History) {\\n    history.transitionTo(history.getCurrentLocation());\\n  } else if (history instanceof HashHistory) {\\n    var setupHashListener = function () {\\n      history.setupListeners();\\n    };\\n    history.transitionTo(\\n      history.getCurrentLocation(),\\n      setupHashListener,\\n      setupHashListener\\n    );\\n  }\\n\\n  history.listen(function (route) {\\n    this$1.apps.forEach(function (app) {\\n      app._route = route;\\n    });\\n  });\\n};\\n\\nVueRouter.prototype.beforeEach = function beforeEach (fn) {\\n  return registerHook(this.beforeHooks, fn)\\n};\\n\\nVueRouter.prototype.beforeResolve = function beforeResolve (fn) {\\n  return registerHook(this.resolveHooks, fn)\\n};\\n\\nVueRouter.prototype.afterEach = function afterEach (fn) {\\n  return registerHook(this.afterHooks, fn)\\n};\\n\\nVueRouter.prototype.onReady = function onReady (cb, errorCb) {\\n  this.history.onReady(cb, errorCb);\\n};\\n\\nVueRouter.prototype.onError = function onError (errorCb) {\\n  this.history.onError(errorCb);\\n};\\n\\nVueRouter.prototype.push = function push (location, onComplete, onAbort) {\\n  this.history.push(location, onComplete, onAbort);\\n};\\n\\nVueRouter.prototype.replace = function replace (location, onComplete, onAbort) {\\n  this.history.replace(location, onComplete, onAbort);\\n};\\n\\nVueRouter.prototype.go = function go (n) {\\n  this.history.go(n);\\n};\\n\\nVueRouter.prototype.back = function back () {\\n  this.go(-1);\\n};\\n\\nVueRouter.prototype.forward = function forward () {\\n  this.go(1);\\n};\\n\\nVueRouter.prototype.getMatchedComponents = function getMatchedComponents (to) {\\n  var route = to\\n    ? to.matched\\n      ? to\\n      : this.resolve(to).route\\n    : this.currentRoute;\\n  if (!route) {\\n    return []\\n  }\\n  return [].concat.apply([], route.matched.map(function (m) {\\n    return Object.keys(m.components).map(function (key) {\\n      return m.components[key]\\n    })\\n  }))\\n};\\n\\nVueRouter.prototype.resolve = function resolve (\\n  to,\\n  current,\\n  append\\n) {\\n  var location = normalizeLocation(\\n    to,\\n    current || this.history.current,\\n    append,\\n    this\\n  );\\n  var route = this.match(location, current);\\n  var fullPath = route.redirectedFrom || route.fullPath;\\n  var base = this.history.base;\\n  var href = createHref(base, fullPath, this.mode);\\n  return {\\n    location: location,\\n    route: route,\\n    href: href,\\n    // for backwards compat\\n    normalizedTo: location,\\n    resolved: route\\n  }\\n};\\n\\nVueRouter.prototype.addRoutes = function addRoutes (routes) {\\n  this.matcher.addRoutes(routes);\\n  if (this.history.current !== START) {\\n    this.history.transitionTo(this.history.getCurrentLocation());\\n  }\\n};\\n\\nObject.defineProperties( VueRouter.prototype, prototypeAccessors );\\n\\nfunction registerHook (list, fn) {\\n  list.push(fn);\\n  return function () {\\n    var i = list.indexOf(fn);\\n    if (i > -1) { list.splice(i, 1); }\\n  }\\n}\\n\\nfunction createHref (base, fullPath, mode) {\\n  var path = mode === \\'hash\\' ? \\'#\\' + fullPath : fullPath;\\n  return base ? cleanPath(base + \\'/\\' + path) : path\\n}\\n\\nVueRouter.install = install;\\nVueRouter.version = \\'3.0.1\\';\\n\\nif (inBrowser && window.Vue) {\\n  window.Vue.use(VueRouter);\\n}\\n\\n/* harmony default export */ var vue_router_esm = (VueRouter);\\n\\n// CONCATENATED MODULE: ./node_modules/d3/build/package.js\\nvar package_name = \"d3\";\\nvar version = \"4.13.0\";\\nvar description = \"Data-Driven Documents\";\\nvar keywords = [\"dom\",\"visualization\",\"svg\",\"animation\",\"canvas\"];\\nvar homepage = \"https://d3js.org\";\\nvar license = \"BSD-3-Clause\";\\nvar author = {\"name\":\"Mike Bostock\",\"url\":\"https://bost.ocks.org/mike\"};\\nvar main = \"build/d3.node.js\";\\nvar unpkg = \"build/d3.min.js\";\\nvar jsdelivr = \"build/d3.min.js\";\\nvar package_module = \"index\";\\nvar repository = {\"type\":\"git\",\"url\":\"https://github.com/d3/d3.git\"};\\nvar scripts = {\"pretest\":\"rimraf build && mkdir build && json2module package.json > build/package.js && node rollup.node\",\"test\":\"tape \\'test/**/*-test.js\\'\",\"prepublishOnly\":\"npm run test && rollup -c --banner \\\\\"$(preamble)\\\\\" && uglifyjs -b beautify=false,preamble=\\\\\"\\'$(preamble)\\'\\\\\" build/d3.js -c negate_iife=false -m -o build/d3.min.js\",\"postpublish\":\"git push && git push --tags && cd ../d3.github.com && git pull && cp ../d3/build/d3.js d3.v4.js && cp ../d3/build/d3.min.js d3.v4.min.js && git add d3.v4.js d3.v4.min.js && git commit -m \\\\\"d3 ${npm_package_version}\\\\\" && git push && cd - && cd ../d3-bower && git pull && cp ../d3/LICENSE ../d3/README.md ../d3/build/d3.js ../d3/build/d3.min.js . && git add -- LICENSE README.md d3.js d3.min.js && git commit -m \\\\\"${npm_package_version}\\\\\" && git tag -am \\\\\"${npm_package_version}\\\\\" v${npm_package_version} && git push && git push --tags && cd - && zip -j build/d3.zip -- LICENSE README.md API.md CHANGES.md build/d3.js build/d3.min.js\"};\\nvar devDependencies = {\"json2module\":\"0.0\",\"package-preamble\":\"0.1\",\"rimraf\":\"2\",\"rollup\":\"0.53\",\"rollup-plugin-ascii\":\"0.0\",\"rollup-plugin-node-resolve\":\"3\",\"tape\":\"4\",\"uglify-js\":\"3.2\"};\\nvar dependencies = {\"d3-array\":\"1.2.1\",\"d3-axis\":\"1.0.8\",\"d3-brush\":\"1.0.4\",\"d3-chord\":\"1.0.4\",\"d3-collection\":\"1.0.4\",\"d3-color\":\"1.0.3\",\"d3-dispatch\":\"1.0.3\",\"d3-drag\":\"1.2.1\",\"d3-dsv\":\"1.0.8\",\"d3-ease\":\"1.0.3\",\"d3-force\":\"1.1.0\",\"d3-format\":\"1.2.2\",\"d3-geo\":\"1.9.1\",\"d3-hierarchy\":\"1.1.5\",\"d3-interpolate\":\"1.1.6\",\"d3-path\":\"1.0.5\",\"d3-polygon\":\"1.0.3\",\"d3-quadtree\":\"1.0.3\",\"d3-queue\":\"3.0.7\",\"d3-random\":\"1.1.0\",\"d3-request\":\"1.0.6\",\"d3-scale\":\"1.0.7\",\"d3-selection\":\"1.3.0\",\"d3-shape\":\"1.2.0\",\"d3-time\":\"1.0.8\",\"d3-time-format\":\"2.1.1\",\"d3-timer\":\"1.0.7\",\"d3-transition\":\"1.1.1\",\"d3-voronoi\":\"1.1.2\",\"d3-zoom\":\"1.7.1\"};\\n\\n// CONCATENATED MODULE: ./node_modules/d3-array/src/ascending.js\\n/* harmony default export */ var src_ascending = (function(a, b) {\\n  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-array/src/bisector.js\\n\\n\\n/* harmony default export */ var bisector = (function(compare) {\\n  if (compare.length === 1) compare = bisector_ascendingComparator(compare);\\n  return {\\n    left: function(a, x, lo, hi) {\\n      if (lo == null) lo = 0;\\n      if (hi == null) hi = a.length;\\n      while (lo < hi) {\\n        var mid = lo + hi >>> 1;\\n        if (compare(a[mid], x) < 0) lo = mid + 1;\\n        else hi = mid;\\n      }\\n      return lo;\\n    },\\n    right: function(a, x, lo, hi) {\\n      if (lo == null) lo = 0;\\n      if (hi == null) hi = a.length;\\n      while (lo < hi) {\\n        var mid = lo + hi >>> 1;\\n        if (compare(a[mid], x) > 0) hi = mid;\\n        else lo = mid + 1;\\n      }\\n      return lo;\\n    }\\n  };\\n});\\n\\nfunction bisector_ascendingComparator(f) {\\n  return function(d, x) {\\n    return src_ascending(f(d), x);\\n  };\\n}\\n\\n// CONCATENATED MODULE: ./node_modules/d3-array/src/bisect.js\\n\\n\\n\\nvar bisect_ascendingBisect = bisector(src_ascending);\\nvar bisect_bisectRight = bisect_ascendingBisect.right;\\nvar bisect_bisectLeft = bisect_ascendingBisect.left;\\n/* harmony default export */ var bisect = (bisect_bisectRight);\\n\\n// CONCATENATED MODULE: ./node_modules/d3-array/src/pairs.js\\n/* harmony default export */ var pairs = (function(array, f) {\\n  if (f == null) f = pair;\\n  var i = 0, n = array.length - 1, p = array[0], pairs = new Array(n < 0 ? 0 : n);\\n  while (i < n) pairs[i] = f(p, p = array[++i]);\\n  return pairs;\\n});\\n\\nfunction pair(a, b) {\\n  return [a, b];\\n}\\n\\n// CONCATENATED MODULE: ./node_modules/d3-array/src/cross.js\\n\\n\\n/* harmony default export */ var cross = (function(values0, values1, reduce) {\\n  var n0 = values0.length,\\n      n1 = values1.length,\\n      values = new Array(n0 * n1),\\n      i0,\\n      i1,\\n      i,\\n      value0;\\n\\n  if (reduce == null) reduce = pair;\\n\\n  for (i0 = i = 0; i0 < n0; ++i0) {\\n    for (value0 = values0[i0], i1 = 0; i1 < n1; ++i1, ++i) {\\n      values[i] = reduce(value0, values1[i1]);\\n    }\\n  }\\n\\n  return values;\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-array/src/descending.js\\n/* harmony default export */ var descending = (function(a, b) {\\n  return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-array/src/number.js\\n/* harmony default export */ var src_number = (function(x) {\\n  return x === null ? NaN : +x;\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-array/src/variance.js\\n\\n\\n/* harmony default export */ var variance = (function(values, valueof) {\\n  var n = values.length,\\n      m = 0,\\n      i = -1,\\n      mean = 0,\\n      value,\\n      delta,\\n      sum = 0;\\n\\n  if (valueof == null) {\\n    while (++i < n) {\\n      if (!isNaN(value = src_number(values[i]))) {\\n        delta = value - mean;\\n        mean += delta / ++m;\\n        sum += delta * (value - mean);\\n      }\\n    }\\n  }\\n\\n  else {\\n    while (++i < n) {\\n      if (!isNaN(value = src_number(valueof(values[i], i, values)))) {\\n        delta = value - mean;\\n        mean += delta / ++m;\\n        sum += delta * (value - mean);\\n      }\\n    }\\n  }\\n\\n  if (m > 1) return sum / (m - 1);\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-array/src/deviation.js\\n\\n\\n/* harmony default export */ var deviation = (function(array, f) {\\n  var v = variance(array, f);\\n  return v ? Math.sqrt(v) : v;\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-array/src/extent.js\\n/* harmony default export */ var src_extent = (function(values, valueof) {\\n  var n = values.length,\\n      i = -1,\\n      value,\\n      min,\\n      max;\\n\\n  if (valueof == null) {\\n    while (++i < n) { // Find the first comparable value.\\n      if ((value = values[i]) != null && value >= value) {\\n        min = max = value;\\n        while (++i < n) { // Compare the remaining values.\\n          if ((value = values[i]) != null) {\\n            if (min > value) min = value;\\n            if (max < value) max = value;\\n          }\\n        }\\n      }\\n    }\\n  }\\n\\n  else {\\n    while (++i < n) { // Find the first comparable value.\\n      if ((value = valueof(values[i], i, values)) != null && value >= value) {\\n        min = max = value;\\n        while (++i < n) { // Compare the remaining values.\\n          if ((value = valueof(values[i], i, values)) != null) {\\n            if (min > value) min = value;\\n            if (max < value) max = value;\\n          }\\n        }\\n      }\\n    }\\n  }\\n\\n  return [min, max];\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-array/src/array.js\\nvar array_array = Array.prototype;\\n\\nvar slice = array_array.slice;\\nvar map = array_array.map;\\n\\n// CONCATENATED MODULE: ./node_modules/d3-array/src/constant.js\\n/* harmony default export */ var constant = (function(x) {\\n  return function() {\\n    return x;\\n  };\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-array/src/identity.js\\n/* harmony default export */ var src_identity = (function(x) {\\n  return x;\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-array/src/range.js\\n/* harmony default export */ var src_range = (function(start, stop, step) {\\n  start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;\\n\\n  var i = -1,\\n      n = Math.max(0, Math.ceil((stop - start) / step)) | 0,\\n      range = new Array(n);\\n\\n  while (++i < n) {\\n    range[i] = start + i * step;\\n  }\\n\\n  return range;\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-array/src/ticks.js\\nvar e10 = Math.sqrt(50),\\n    e5 = Math.sqrt(10),\\n    e2 = Math.sqrt(2);\\n\\n/* harmony default export */ var ticks = (function(start, stop, count) {\\n  var reverse,\\n      i = -1,\\n      n,\\n      ticks,\\n      step;\\n\\n  stop = +stop, start = +start, count = +count;\\n  if (start === stop && count > 0) return [start];\\n  if (reverse = stop < start) n = start, start = stop, stop = n;\\n  if ((step = tickIncrement(start, stop, count)) === 0 || !isFinite(step)) return [];\\n\\n  if (step > 0) {\\n    start = Math.ceil(start / step);\\n    stop = Math.floor(stop / step);\\n    ticks = new Array(n = Math.ceil(stop - start + 1));\\n    while (++i < n) ticks[i] = (start + i) * step;\\n  } else {\\n    start = Math.floor(start * step);\\n    stop = Math.ceil(stop * step);\\n    ticks = new Array(n = Math.ceil(start - stop + 1));\\n    while (++i < n) ticks[i] = (start - i) / step;\\n  }\\n\\n  if (reverse) ticks.reverse();\\n\\n  return ticks;\\n});\\n\\nfunction tickIncrement(start, stop, count) {\\n  var step = (stop - start) / Math.max(0, count),\\n      power = Math.floor(Math.log(step) / Math.LN10),\\n      error = step / Math.pow(10, power);\\n  return power >= 0\\n      ? (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1) * Math.pow(10, power)\\n      : -Math.pow(10, -power) / (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1);\\n}\\n\\nfunction tickStep(start, stop, count) {\\n  var step0 = Math.abs(stop - start) / Math.max(0, count),\\n      step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)),\\n      error = step0 / step1;\\n  if (error >= e10) step1 *= 10;\\n  else if (error >= e5) step1 *= 5;\\n  else if (error >= e2) step1 *= 2;\\n  return stop < start ? -step1 : step1;\\n}\\n\\n// CONCATENATED MODULE: ./node_modules/d3-array/src/threshold/sturges.js\\n/* harmony default export */ var sturges = (function(values) {\\n  return Math.ceil(Math.log(values.length) / Math.LN2) + 1;\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-array/src/histogram.js\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n/* harmony default export */ var src_histogram = (function() {\\n  var value = src_identity,\\n      domain = src_extent,\\n      threshold = sturges;\\n\\n  function histogram(data) {\\n    var i,\\n        n = data.length,\\n        x,\\n        values = new Array(n);\\n\\n    for (i = 0; i < n; ++i) {\\n      values[i] = value(data[i], i, data);\\n    }\\n\\n    var xz = domain(values),\\n        x0 = xz[0],\\n        x1 = xz[1],\\n        tz = threshold(values, x0, x1);\\n\\n    // Convert number of thresholds into uniform thresholds.\\n    if (!Array.isArray(tz)) {\\n      tz = tickStep(x0, x1, tz);\\n      tz = src_range(Math.ceil(x0 / tz) * tz, Math.floor(x1 / tz) * tz, tz); // exclusive\\n    }\\n\\n    // Remove any thresholds outside the domain.\\n    var m = tz.length;\\n    while (tz[0] <= x0) tz.shift(), --m;\\n    while (tz[m - 1] > x1) tz.pop(), --m;\\n\\n    var bins = new Array(m + 1),\\n        bin;\\n\\n    // Initialize bins.\\n    for (i = 0; i <= m; ++i) {\\n      bin = bins[i] = [];\\n      bin.x0 = i > 0 ? tz[i - 1] : x0;\\n      bin.x1 = i < m ? tz[i] : x1;\\n    }\\n\\n    // Assign data to bins by value, ignoring any outside the domain.\\n    for (i = 0; i < n; ++i) {\\n      x = values[i];\\n      if (x0 <= x && x <= x1) {\\n        bins[bisect(tz, x, 0, m)].push(data[i]);\\n      }\\n    }\\n\\n    return bins;\\n  }\\n\\n  histogram.value = function(_) {\\n    return arguments.length ? (value = typeof _ === \"function\" ? _ : constant(_), histogram) : value;\\n  };\\n\\n  histogram.domain = function(_) {\\n    return arguments.length ? (domain = typeof _ === \"function\" ? _ : constant([_[0], _[1]]), histogram) : domain;\\n  };\\n\\n  histogram.thresholds = function(_) {\\n    return arguments.length ? (threshold = typeof _ === \"function\" ? _ : Array.isArray(_) ? constant(slice.call(_)) : constant(_), histogram) : threshold;\\n  };\\n\\n  return histogram;\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-array/src/quantile.js\\n\\n\\n/* harmony default export */ var src_quantile = (function(values, p, valueof) {\\n  if (valueof == null) valueof = src_number;\\n  if (!(n = values.length)) return;\\n  if ((p = +p) <= 0 || n < 2) return +valueof(values[0], 0, values);\\n  if (p >= 1) return +valueof(values[n - 1], n - 1, values);\\n  var n,\\n      i = (n - 1) * p,\\n      i0 = Math.floor(i),\\n      value0 = +valueof(values[i0], i0, values),\\n      value1 = +valueof(values[i0 + 1], i0 + 1, values);\\n  return value0 + (value1 - value0) * (i - i0);\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-array/src/threshold/freedmanDiaconis.js\\n\\n\\n\\n\\n\\n/* harmony default export */ var freedmanDiaconis = (function(values, min, max) {\\n  values = map.call(values, src_number).sort(src_ascending);\\n  return Math.ceil((max - min) / (2 * (src_quantile(values, 0.75) - src_quantile(values, 0.25)) * Math.pow(values.length, -1 / 3)));\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-array/src/threshold/scott.js\\n\\n\\n/* harmony default export */ var scott = (function(values, min, max) {\\n  return Math.ceil((max - min) / (3.5 * deviation(values) * Math.pow(values.length, -1 / 3)));\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-array/src/max.js\\n/* harmony default export */ var src_max = (function(values, valueof) {\\n  var n = values.length,\\n      i = -1,\\n      value,\\n      max;\\n\\n  if (valueof == null) {\\n    while (++i < n) { // Find the first comparable value.\\n      if ((value = values[i]) != null && value >= value) {\\n        max = value;\\n        while (++i < n) { // Compare the remaining values.\\n          if ((value = values[i]) != null && value > max) {\\n            max = value;\\n          }\\n        }\\n      }\\n    }\\n  }\\n\\n  else {\\n    while (++i < n) { // Find the first comparable value.\\n      if ((value = valueof(values[i], i, values)) != null && value >= value) {\\n        max = value;\\n        while (++i < n) { // Compare the remaining values.\\n          if ((value = valueof(values[i], i, values)) != null && value > max) {\\n            max = value;\\n          }\\n        }\\n      }\\n    }\\n  }\\n\\n  return max;\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-array/src/mean.js\\n\\n\\n/* harmony default export */ var src_mean = (function(values, valueof) {\\n  var n = values.length,\\n      m = n,\\n      i = -1,\\n      value,\\n      sum = 0;\\n\\n  if (valueof == null) {\\n    while (++i < n) {\\n      if (!isNaN(value = src_number(values[i]))) sum += value;\\n      else --m;\\n    }\\n  }\\n\\n  else {\\n    while (++i < n) {\\n      if (!isNaN(value = src_number(valueof(values[i], i, values)))) sum += value;\\n      else --m;\\n    }\\n  }\\n\\n  if (m) return sum / m;\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-array/src/median.js\\n\\n\\n\\n\\n/* harmony default export */ var median = (function(values, valueof) {\\n  var n = values.length,\\n      i = -1,\\n      value,\\n      numbers = [];\\n\\n  if (valueof == null) {\\n    while (++i < n) {\\n      if (!isNaN(value = src_number(values[i]))) {\\n        numbers.push(value);\\n      }\\n    }\\n  }\\n\\n  else {\\n    while (++i < n) {\\n      if (!isNaN(value = src_number(valueof(values[i], i, values)))) {\\n        numbers.push(value);\\n      }\\n    }\\n  }\\n\\n  return src_quantile(numbers.sort(src_ascending), 0.5);\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-array/src/merge.js\\n/* harmony default export */ var src_merge = (function(arrays) {\\n  var n = arrays.length,\\n      m,\\n      i = -1,\\n      j = 0,\\n      merged,\\n      array;\\n\\n  while (++i < n) j += arrays[i].length;\\n  merged = new Array(j);\\n\\n  while (--n >= 0) {\\n    array = arrays[n];\\n    m = array.length;\\n    while (--m >= 0) {\\n      merged[--j] = array[m];\\n    }\\n  }\\n\\n  return merged;\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-array/src/min.js\\n/* harmony default export */ var src_min = (function(values, valueof) {\\n  var n = values.length,\\n      i = -1,\\n      value,\\n      min;\\n\\n  if (valueof == null) {\\n    while (++i < n) { // Find the first comparable value.\\n      if ((value = values[i]) != null && value >= value) {\\n        min = value;\\n        while (++i < n) { // Compare the remaining values.\\n          if ((value = values[i]) != null && min > value) {\\n            min = value;\\n          }\\n        }\\n      }\\n    }\\n  }\\n\\n  else {\\n    while (++i < n) { // Find the first comparable value.\\n      if ((value = valueof(values[i], i, values)) != null && value >= value) {\\n        min = value;\\n        while (++i < n) { // Compare the remaining values.\\n          if ((value = valueof(values[i], i, values)) != null && min > value) {\\n            min = value;\\n          }\\n        }\\n      }\\n    }\\n  }\\n\\n  return min;\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-array/src/permute.js\\n/* harmony default export */ var permute = (function(array, indexes) {\\n  var i = indexes.length, permutes = new Array(i);\\n  while (i--) permutes[i] = array[indexes[i]];\\n  return permutes;\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-array/src/scan.js\\n\\n\\n/* harmony default export */ var scan = (function(values, compare) {\\n  if (!(n = values.length)) return;\\n  var n,\\n      i = 0,\\n      j = 0,\\n      xi,\\n      xj = values[j];\\n\\n  if (compare == null) compare = src_ascending;\\n\\n  while (++i < n) {\\n    if (compare(xi = values[i], xj) < 0 || compare(xj, xj) !== 0) {\\n      xj = xi, j = i;\\n    }\\n  }\\n\\n  if (compare(xj, xj) === 0) return j;\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-array/src/shuffle.js\\n/* harmony default export */ var shuffle = (function(array, i0, i1) {\\n  var m = (i1 == null ? array.length : i1) - (i0 = i0 == null ? 0 : +i0),\\n      t,\\n      i;\\n\\n  while (m) {\\n    i = Math.random() * m-- | 0;\\n    t = array[m + i0];\\n    array[m + i0] = array[i + i0];\\n    array[i + i0] = t;\\n  }\\n\\n  return array;\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-array/src/sum.js\\n/* harmony default export */ var src_sum = (function(values, valueof) {\\n  var n = values.length,\\n      i = -1,\\n      value,\\n      sum = 0;\\n\\n  if (valueof == null) {\\n    while (++i < n) {\\n      if (value = +values[i]) sum += value; // Note: zero and null are equivalent.\\n    }\\n  }\\n\\n  else {\\n    while (++i < n) {\\n      if (value = +valueof(values[i], i, values)) sum += value;\\n    }\\n  }\\n\\n  return sum;\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-array/src/transpose.js\\n\\n\\n/* harmony default export */ var src_transpose = (function(matrix) {\\n  if (!(n = matrix.length)) return [];\\n  for (var i = -1, m = src_min(matrix, transpose_length), transpose = new Array(m); ++i < m;) {\\n    for (var j = -1, n, row = transpose[i] = new Array(n); ++j < n;) {\\n      row[j] = matrix[j][i];\\n    }\\n  }\\n  return transpose;\\n});\\n\\nfunction transpose_length(d) {\\n  return d.length;\\n}\\n\\n// CONCATENATED MODULE: ./node_modules/d3-array/src/zip.js\\n\\n\\n/* harmony default export */ var zip = (function() {\\n  return src_transpose(arguments);\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-array/index.js\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n// CONCATENATED MODULE: ./node_modules/d3-axis/src/array.js\\nvar array_slice = Array.prototype.slice;\\n\\n// CONCATENATED MODULE: ./node_modules/d3-axis/src/identity.js\\n/* harmony default export */ var d3_axis_src_identity = (function(x) {\\n  return x;\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-axis/src/axis.js\\n\\n\\n\\nvar axis_top = 1,\\n    axis_right = 2,\\n    axis_bottom = 3,\\n    axis_left = 4,\\n    axis_epsilon = 1e-6;\\n\\nfunction axis_translateX(x) {\\n  return \"translate(\" + (x + 0.5) + \",0)\";\\n}\\n\\nfunction axis_translateY(y) {\\n  return \"translate(0,\" + (y + 0.5) + \")\";\\n}\\n\\nfunction axis_number(scale) {\\n  return function(d) {\\n    return +scale(d);\\n  };\\n}\\n\\nfunction axis_center(scale) {\\n  var offset = Math.max(0, scale.bandwidth() - 1) / 2; // Adjust for 0.5px offset.\\n  if (scale.round()) offset = Math.round(offset);\\n  return function(d) {\\n    return +scale(d) + offset;\\n  };\\n}\\n\\nfunction axis_entering() {\\n  return !this.__axis;\\n}\\n\\nfunction axis_axis(orient, scale) {\\n  var tickArguments = [],\\n      tickValues = null,\\n      tickFormat = null,\\n      tickSizeInner = 6,\\n      tickSizeOuter = 6,\\n      tickPadding = 3,\\n      k = orient === axis_top || orient === axis_left ? -1 : 1,\\n      x = orient === axis_left || orient === axis_right ? \"x\" : \"y\",\\n      transform = orient === axis_top || orient === axis_bottom ? axis_translateX : axis_translateY;\\n\\n  function axis(context) {\\n    var values = tickValues == null ? (scale.ticks ? scale.ticks.apply(scale, tickArguments) : scale.domain()) : tickValues,\\n        format = tickFormat == null ? (scale.tickFormat ? scale.tickFormat.apply(scale, tickArguments) : d3_axis_src_identity) : tickFormat,\\n        spacing = Math.max(tickSizeInner, 0) + tickPadding,\\n        range = scale.range(),\\n        range0 = +range[0] + 0.5,\\n        range1 = +range[range.length - 1] + 0.5,\\n        position = (scale.bandwidth ? axis_center : axis_number)(scale.copy()),\\n        selection = context.selection ? context.selection() : context,\\n        path = selection.selectAll(\".domain\").data([null]),\\n        tick = selection.selectAll(\".tick\").data(values, scale).order(),\\n        tickExit = tick.exit(),\\n        tickEnter = tick.enter().append(\"g\").attr(\"class\", \"tick\"),\\n        line = tick.select(\"line\"),\\n        text = tick.select(\"text\");\\n\\n    path = path.merge(path.enter().insert(\"path\", \".tick\")\\n        .attr(\"class\", \"domain\")\\n        .attr(\"stroke\", \"#000\"));\\n\\n    tick = tick.merge(tickEnter);\\n\\n    line = line.merge(tickEnter.append(\"line\")\\n        .attr(\"stroke\", \"#000\")\\n        .attr(x + \"2\", k * tickSizeInner));\\n\\n    text = text.merge(tickEnter.append(\"text\")\\n        .attr(\"fill\", \"#000\")\\n        .attr(x, k * spacing)\\n        .attr(\"dy\", orient === axis_top ? \"0em\" : orient === axis_bottom ? \"0.71em\" : \"0.32em\"));\\n\\n    if (context !== selection) {\\n      path = path.transition(context);\\n      tick = tick.transition(context);\\n      line = line.transition(context);\\n      text = text.transition(context);\\n\\n      tickExit = tickExit.transition(context)\\n          .attr(\"opacity\", axis_epsilon)\\n          .attr(\"transform\", function(d) { return isFinite(d = position(d)) ? transform(d) : this.getAttribute(\"transform\"); });\\n\\n      tickEnter\\n          .attr(\"opacity\", axis_epsilon)\\n          .attr(\"transform\", function(d) { var p = this.parentNode.__axis; return transform(p && isFinite(p = p(d)) ? p : position(d)); });\\n    }\\n\\n    tickExit.remove();\\n\\n    path\\n        .attr(\"d\", orient === axis_left || orient == axis_right\\n            ? \"M\" + k * tickSizeOuter + \",\" + range0 + \"H0.5V\" + range1 + \"H\" + k * tickSizeOuter\\n            : \"M\" + range0 + \",\" + k * tickSizeOuter + \"V0.5H\" + range1 + \"V\" + k * tickSizeOuter);\\n\\n    tick\\n        .attr(\"opacity\", 1)\\n        .attr(\"transform\", function(d) { return transform(position(d)); });\\n\\n    line\\n        .attr(x + \"2\", k * tickSizeInner);\\n\\n    text\\n        .attr(x, k * spacing)\\n        .text(format);\\n\\n    selection.filter(axis_entering)\\n        .attr(\"fill\", \"none\")\\n        .attr(\"font-size\", 10)\\n        .attr(\"font-family\", \"sans-serif\")\\n        .attr(\"text-anchor\", orient === axis_right ? \"start\" : orient === axis_left ? \"end\" : \"middle\");\\n\\n    selection\\n        .each(function() { this.__axis = position; });\\n  }\\n\\n  axis.scale = function(_) {\\n    return arguments.length ? (scale = _, axis) : scale;\\n  };\\n\\n  axis.ticks = function() {\\n    return tickArguments = array_slice.call(arguments), axis;\\n  };\\n\\n  axis.tickArguments = function(_) {\\n    return arguments.length ? (tickArguments = _ == null ? [] : array_slice.call(_), axis) : tickArguments.slice();\\n  };\\n\\n  axis.tickValues = function(_) {\\n    return arguments.length ? (tickValues = _ == null ? null : array_slice.call(_), axis) : tickValues && tickValues.slice();\\n  };\\n\\n  axis.tickFormat = function(_) {\\n    return arguments.length ? (tickFormat = _, axis) : tickFormat;\\n  };\\n\\n  axis.tickSize = function(_) {\\n    return arguments.length ? (tickSizeInner = tickSizeOuter = +_, axis) : tickSizeInner;\\n  };\\n\\n  axis.tickSizeInner = function(_) {\\n    return arguments.length ? (tickSizeInner = +_, axis) : tickSizeInner;\\n  };\\n\\n  axis.tickSizeOuter = function(_) {\\n    return arguments.length ? (tickSizeOuter = +_, axis) : tickSizeOuter;\\n  };\\n\\n  axis.tickPadding = function(_) {\\n    return arguments.length ? (tickPadding = +_, axis) : tickPadding;\\n  };\\n\\n  return axis;\\n}\\n\\nfunction axis_axisTop(scale) {\\n  return axis_axis(axis_top, scale);\\n}\\n\\nfunction axis_axisRight(scale) {\\n  return axis_axis(axis_right, scale);\\n}\\n\\nfunction axis_axisBottom(scale) {\\n  return axis_axis(axis_bottom, scale);\\n}\\n\\nfunction axis_axisLeft(scale) {\\n  return axis_axis(axis_left, scale);\\n}\\n\\n// CONCATENATED MODULE: ./node_modules/d3-axis/index.js\\n\\n\\n// CONCATENATED MODULE: ./node_modules/d3-dispatch/src/dispatch.js\\nvar noop = {value: function() {}};\\n\\nfunction dispatch() {\\n  for (var i = 0, n = arguments.length, _ = {}, t; i < n; ++i) {\\n    if (!(t = arguments[i] + \"\") || (t in _)) throw new Error(\"illegal type: \" + t);\\n    _[t] = [];\\n  }\\n  return new Dispatch(_);\\n}\\n\\nfunction Dispatch(_) {\\n  this._ = _;\\n}\\n\\nfunction parseTypenames(typenames, types) {\\n  return typenames.trim().split(/^|\\\\s+/).map(function(t) {\\n    var name = \"\", i = t.indexOf(\".\");\\n    if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);\\n    if (t && !types.hasOwnProperty(t)) throw new Error(\"unknown type: \" + t);\\n    return {type: t, name: name};\\n  });\\n}\\n\\nDispatch.prototype = dispatch.prototype = {\\n  constructor: Dispatch,\\n  on: function(typename, callback) {\\n    var _ = this._,\\n        T = parseTypenames(typename + \"\", _),\\n        t,\\n        i = -1,\\n        n = T.length;\\n\\n    // If no callback was specified, return the callback of the given type and name.\\n    if (arguments.length < 2) {\\n      while (++i < n) if ((t = (typename = T[i]).type) && (t = dispatch_get(_[t], typename.name))) return t;\\n      return;\\n    }\\n\\n    // If a type was specified, set the callback for the given type and name.\\n    // Otherwise, if a null callback was specified, remove callbacks of the given name.\\n    if (callback != null && typeof callback !== \"function\") throw new Error(\"invalid callback: \" + callback);\\n    while (++i < n) {\\n      if (t = (typename = T[i]).type) _[t] = dispatch_set(_[t], typename.name, callback);\\n      else if (callback == null) for (t in _) _[t] = dispatch_set(_[t], typename.name, null);\\n    }\\n\\n    return this;\\n  },\\n  copy: function() {\\n    var copy = {}, _ = this._;\\n    for (var t in _) copy[t] = _[t].slice();\\n    return new Dispatch(copy);\\n  },\\n  call: function(type, that) {\\n    if ((n = arguments.length - 2) > 0) for (var args = new Array(n), i = 0, n, t; i < n; ++i) args[i] = arguments[i + 2];\\n    if (!this._.hasOwnProperty(type)) throw new Error(\"unknown type: \" + type);\\n    for (t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);\\n  },\\n  apply: function(type, that, args) {\\n    if (!this._.hasOwnProperty(type)) throw new Error(\"unknown type: \" + type);\\n    for (var t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);\\n  }\\n};\\n\\nfunction dispatch_get(type, name) {\\n  for (var i = 0, n = type.length, c; i < n; ++i) {\\n    if ((c = type[i]).name === name) {\\n      return c.value;\\n    }\\n  }\\n}\\n\\nfunction dispatch_set(type, name, callback) {\\n  for (var i = 0, n = type.length; i < n; ++i) {\\n    if (type[i].name === name) {\\n      type[i] = noop, type = type.slice(0, i).concat(type.slice(i + 1));\\n      break;\\n    }\\n  }\\n  if (callback != null) type.push({name: name, value: callback});\\n  return type;\\n}\\n\\n/* harmony default export */ var src_dispatch = (dispatch);\\n\\n// CONCATENATED MODULE: ./node_modules/d3-dispatch/index.js\\n\\n\\n// CONCATENATED MODULE: ./node_modules/d3-selection/src/namespaces.js\\nvar xhtml = \"http://www.w3.org/1999/xhtml\";\\n\\n/* harmony default export */ var namespaces = ({\\n  svg: \"http://www.w3.org/2000/svg\",\\n  xhtml: xhtml,\\n  xlink: \"http://www.w3.org/1999/xlink\",\\n  xml: \"http://www.w3.org/XML/1998/namespace\",\\n  xmlns: \"http://www.w3.org/2000/xmlns/\"\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-selection/src/namespace.js\\n\\n\\n/* harmony default export */ var namespace = (function(name) {\\n  var prefix = name += \"\", i = prefix.indexOf(\":\");\\n  if (i >= 0 && (prefix = name.slice(0, i)) !== \"xmlns\") name = name.slice(i + 1);\\n  return namespaces.hasOwnProperty(prefix) ? {space: namespaces[prefix], local: name} : name;\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-selection/src/creator.js\\n\\n\\n\\nfunction creator_creatorInherit(name) {\\n  return function() {\\n    var document = this.ownerDocument,\\n        uri = this.namespaceURI;\\n    return uri === xhtml && document.documentElement.namespaceURI === xhtml\\n        ? document.createElement(name)\\n        : document.createElementNS(uri, name);\\n  };\\n}\\n\\nfunction creator_creatorFixed(fullname) {\\n  return function() {\\n    return this.ownerDocument.createElementNS(fullname.space, fullname.local);\\n  };\\n}\\n\\n/* harmony default export */ var creator = (function(name) {\\n  var fullname = namespace(name);\\n  return (fullname.local\\n      ? creator_creatorFixed\\n      : creator_creatorInherit)(fullname);\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-selection/src/selector.js\\nfunction none() {}\\n\\n/* harmony default export */ var src_selector = (function(selector) {\\n  return selector == null ? none : function() {\\n    return this.querySelector(selector);\\n  };\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-selection/src/selection/select.js\\n\\n\\n\\n/* harmony default export */ var selection_select = (function(select) {\\n  if (typeof select !== \"function\") select = src_selector(select);\\n\\n  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {\\n    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {\\n      if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {\\n        if (\"__data__\" in node) subnode.__data__ = node.__data__;\\n        subgroup[i] = subnode;\\n      }\\n    }\\n  }\\n\\n  return new selection_Selection(subgroups, this._parents);\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-selection/src/selectorAll.js\\nfunction selectorAll_empty() {\\n  return [];\\n}\\n\\n/* harmony default export */ var selectorAll = (function(selector) {\\n  return selector == null ? selectorAll_empty : function() {\\n    return this.querySelectorAll(selector);\\n  };\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-selection/src/selection/selectAll.js\\n\\n\\n\\n/* harmony default export */ var selectAll = (function(select) {\\n  if (typeof select !== \"function\") select = selectorAll(select);\\n\\n  for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {\\n    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {\\n      if (node = group[i]) {\\n        subgroups.push(select.call(node, node.__data__, i, group));\\n        parents.push(node);\\n      }\\n    }\\n  }\\n\\n  return new selection_Selection(subgroups, parents);\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-selection/src/matcher.js\\nvar matcher = function(selector) {\\n  return function() {\\n    return this.matches(selector);\\n  };\\n};\\n\\nif (typeof document !== \"undefined\") {\\n  var matcher_element = document.documentElement;\\n  if (!matcher_element.matches) {\\n    var vendorMatches = matcher_element.webkitMatchesSelector\\n        || matcher_element.msMatchesSelector\\n        || matcher_element.mozMatchesSelector\\n        || matcher_element.oMatchesSelector;\\n    matcher = function(selector) {\\n      return function() {\\n        return vendorMatches.call(this, selector);\\n      };\\n    };\\n  }\\n}\\n\\n/* harmony default export */ var src_matcher = (matcher);\\n\\n// CONCATENATED MODULE: ./node_modules/d3-selection/src/selection/filter.js\\n\\n\\n\\n/* harmony default export */ var selection_filter = (function(match) {\\n  if (typeof match !== \"function\") match = src_matcher(match);\\n\\n  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {\\n    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {\\n      if ((node = group[i]) && match.call(node, node.__data__, i, group)) {\\n        subgroup.push(node);\\n      }\\n    }\\n  }\\n\\n  return new selection_Selection(subgroups, this._parents);\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-selection/src/selection/sparse.js\\n/* harmony default export */ var sparse = (function(update) {\\n  return new Array(update.length);\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-selection/src/selection/enter.js\\n\\n\\n\\n/* harmony default export */ var selection_enter = (function() {\\n  return new selection_Selection(this._enter || this._groups.map(sparse), this._parents);\\n});\\n\\nfunction enter_EnterNode(parent, datum) {\\n  this.ownerDocument = parent.ownerDocument;\\n  this.namespaceURI = parent.namespaceURI;\\n  this._next = null;\\n  this._parent = parent;\\n  this.__data__ = datum;\\n}\\n\\nenter_EnterNode.prototype = {\\n  constructor: enter_EnterNode,\\n  appendChild: function(child) { return this._parent.insertBefore(child, this._next); },\\n  insertBefore: function(child, next) { return this._parent.insertBefore(child, next); },\\n  querySelector: function(selector) { return this._parent.querySelector(selector); },\\n  querySelectorAll: function(selector) { return this._parent.querySelectorAll(selector); }\\n};\\n\\n// CONCATENATED MODULE: ./node_modules/d3-selection/src/constant.js\\n/* harmony default export */ var src_constant = (function(x) {\\n  return function() {\\n    return x;\\n  };\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-selection/src/selection/data.js\\n\\n\\n\\n\\nvar data_keyPrefix = \"$\"; // Protect against keys like “__proto__”.\\n\\nfunction data_bindIndex(parent, group, enter, update, exit, data) {\\n  var i = 0,\\n      node,\\n      groupLength = group.length,\\n      dataLength = data.length;\\n\\n  // Put any non-null nodes that fit into update.\\n  // Put any null nodes into enter.\\n  // Put any remaining data into enter.\\n  for (; i < dataLength; ++i) {\\n    if (node = group[i]) {\\n      node.__data__ = data[i];\\n      update[i] = node;\\n    } else {\\n      enter[i] = new enter_EnterNode(parent, data[i]);\\n    }\\n  }\\n\\n  // Put any non-null nodes that don’t fit into exit.\\n  for (; i < groupLength; ++i) {\\n    if (node = group[i]) {\\n      exit[i] = node;\\n    }\\n  }\\n}\\n\\nfunction data_bindKey(parent, group, enter, update, exit, data, key) {\\n  var i,\\n      node,\\n      nodeByKeyValue = {},\\n      groupLength = group.length,\\n      dataLength = data.length,\\n      keyValues = new Array(groupLength),\\n      keyValue;\\n\\n  // Compute the key for each node.\\n  // If multiple nodes have the same key, the duplicates are added to exit.\\n  for (i = 0; i < groupLength; ++i) {\\n    if (node = group[i]) {\\n      keyValues[i] = keyValue = data_keyPrefix + key.call(node, node.__data__, i, group);\\n      if (keyValue in nodeByKeyValue) {\\n        exit[i] = node;\\n      } else {\\n        nodeByKeyValue[keyValue] = node;\\n      }\\n    }\\n  }\\n\\n  // Compute the key for each datum.\\n  // If there a node associated with this key, join and add it to update.\\n  // If there is not (or the key is a duplicate), add it to enter.\\n  for (i = 0; i < dataLength; ++i) {\\n    keyValue = data_keyPrefix + key.call(parent, data[i], i, data);\\n    if (node = nodeByKeyValue[keyValue]) {\\n      update[i] = node;\\n      node.__data__ = data[i];\\n      nodeByKeyValue[keyValue] = null;\\n    } else {\\n      enter[i] = new enter_EnterNode(parent, data[i]);\\n    }\\n  }\\n\\n  // Add any remaining nodes that were not bound to data to exit.\\n  for (i = 0; i < groupLength; ++i) {\\n    if ((node = group[i]) && (nodeByKeyValue[keyValues[i]] === node)) {\\n      exit[i] = node;\\n    }\\n  }\\n}\\n\\n/* harmony default export */ var selection_data = (function(value, key) {\\n  if (!value) {\\n    data = new Array(this.size()), j = -1;\\n    this.each(function(d) { data[++j] = d; });\\n    return data;\\n  }\\n\\n  var bind = key ? data_bindKey : data_bindIndex,\\n      parents = this._parents,\\n      groups = this._groups;\\n\\n  if (typeof value !== \"function\") value = src_constant(value);\\n\\n  for (var m = groups.length, update = new Array(m), enter = new Array(m), exit = new Array(m), j = 0; j < m; ++j) {\\n    var parent = parents[j],\\n        group = groups[j],\\n        groupLength = group.length,\\n        data = value.call(parent, parent && parent.__data__, j, parents),\\n        dataLength = data.length,\\n        enterGroup = enter[j] = new Array(dataLength),\\n        updateGroup = update[j] = new Array(dataLength),\\n        exitGroup = exit[j] = new Array(groupLength);\\n\\n    bind(parent, group, enterGroup, updateGroup, exitGroup, data, key);\\n\\n    // Now connect the enter nodes to their following update node, such that\\n    // appendChild can insert the materialized enter node before this node,\\n    // rather than at the end of the parent node.\\n    for (var i0 = 0, i1 = 0, previous, next; i0 < dataLength; ++i0) {\\n      if (previous = enterGroup[i0]) {\\n        if (i0 >= i1) i1 = i0 + 1;\\n        while (!(next = updateGroup[i1]) && ++i1 < dataLength);\\n        previous._next = next || null;\\n      }\\n    }\\n  }\\n\\n  update = new selection_Selection(update, parents);\\n  update._enter = enter;\\n  update._exit = exit;\\n  return update;\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-selection/src/selection/exit.js\\n\\n\\n\\n/* harmony default export */ var selection_exit = (function() {\\n  return new selection_Selection(this._exit || this._groups.map(sparse), this._parents);\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-selection/src/selection/merge.js\\n\\n\\n/* harmony default export */ var selection_merge = (function(selection) {\\n\\n  for (var groups0 = this._groups, groups1 = selection._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {\\n    for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {\\n      if (node = group0[i] || group1[i]) {\\n        merge[i] = node;\\n      }\\n    }\\n  }\\n\\n  for (; j < m0; ++j) {\\n    merges[j] = groups0[j];\\n  }\\n\\n  return new selection_Selection(merges, this._parents);\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-selection/src/selection/order.js\\n/* harmony default export */ var selection_order = (function() {\\n\\n  for (var groups = this._groups, j = -1, m = groups.length; ++j < m;) {\\n    for (var group = groups[j], i = group.length - 1, next = group[i], node; --i >= 0;) {\\n      if (node = group[i]) {\\n        if (next && next !== node.nextSibling) next.parentNode.insertBefore(node, next);\\n        next = node;\\n      }\\n    }\\n  }\\n\\n  return this;\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-selection/src/selection/sort.js\\n\\n\\n/* harmony default export */ var selection_sort = (function(compare) {\\n  if (!compare) compare = sort_ascending;\\n\\n  function compareNode(a, b) {\\n    return a && b ? compare(a.__data__, b.__data__) : !a - !b;\\n  }\\n\\n  for (var groups = this._groups, m = groups.length, sortgroups = new Array(m), j = 0; j < m; ++j) {\\n    for (var group = groups[j], n = group.length, sortgroup = sortgroups[j] = new Array(n), node, i = 0; i < n; ++i) {\\n      if (node = group[i]) {\\n        sortgroup[i] = node;\\n      }\\n    }\\n    sortgroup.sort(compareNode);\\n  }\\n\\n  return new selection_Selection(sortgroups, this._parents).order();\\n});\\n\\nfunction sort_ascending(a, b) {\\n  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\\n}\\n\\n// CONCATENATED MODULE: ./node_modules/d3-selection/src/selection/call.js\\n/* harmony default export */ var call = (function() {\\n  var callback = arguments[0];\\n  arguments[0] = this;\\n  callback.apply(null, arguments);\\n  return this;\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-selection/src/selection/nodes.js\\n/* harmony default export */ var selection_nodes = (function() {\\n  var nodes = new Array(this.size()), i = -1;\\n  this.each(function() { nodes[++i] = this; });\\n  return nodes;\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-selection/src/selection/node.js\\n/* harmony default export */ var selection_node = (function() {\\n\\n  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {\\n    for (var group = groups[j], i = 0, n = group.length; i < n; ++i) {\\n      var node = group[i];\\n      if (node) return node;\\n    }\\n  }\\n\\n  return null;\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-selection/src/selection/size.js\\n/* harmony default export */ var selection_size = (function() {\\n  var size = 0;\\n  this.each(function() { ++size; });\\n  return size;\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-selection/src/selection/empty.js\\n/* harmony default export */ var selection_empty = (function() {\\n  return !this.node();\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-selection/src/selection/each.js\\n/* harmony default export */ var each = (function(callback) {\\n\\n  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {\\n    for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {\\n      if (node = group[i]) callback.call(node, node.__data__, i, group);\\n    }\\n  }\\n\\n  return this;\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-selection/src/selection/attr.js\\n\\n\\nfunction attr_attrRemove(name) {\\n  return function() {\\n    this.removeAttribute(name);\\n  };\\n}\\n\\nfunction attr_attrRemoveNS(fullname) {\\n  return function() {\\n    this.removeAttributeNS(fullname.space, fullname.local);\\n  };\\n}\\n\\nfunction attr_attrConstant(name, value) {\\n  return function() {\\n    this.setAttribute(name, value);\\n  };\\n}\\n\\nfunction attr_attrConstantNS(fullname, value) {\\n  return function() {\\n    this.setAttributeNS(fullname.space, fullname.local, value);\\n  };\\n}\\n\\nfunction attr_attrFunction(name, value) {\\n  return function() {\\n    var v = value.apply(this, arguments);\\n    if (v == null) this.removeAttribute(name);\\n    else this.setAttribute(name, v);\\n  };\\n}\\n\\nfunction attr_attrFunctionNS(fullname, value) {\\n  return function() {\\n    var v = value.apply(this, arguments);\\n    if (v == null) this.removeAttributeNS(fullname.space, fullname.local);\\n    else this.setAttributeNS(fullname.space, fullname.local, v);\\n  };\\n}\\n\\n/* harmony default export */ var attr = (function(name, value) {\\n  var fullname = namespace(name);\\n\\n  if (arguments.length < 2) {\\n    var node = this.node();\\n    return fullname.local\\n        ? node.getAttributeNS(fullname.space, fullname.local)\\n        : node.getAttribute(fullname);\\n  }\\n\\n  return this.each((value == null\\n      ? (fullname.local ? attr_attrRemoveNS : attr_attrRemove) : (typeof value === \"function\"\\n      ? (fullname.local ? attr_attrFunctionNS : attr_attrFunction)\\n      : (fullname.local ? attr_attrConstantNS : attr_attrConstant)))(fullname, value));\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-selection/src/window.js\\n/* harmony default export */ var src_window = (function(node) {\\n  return (node.ownerDocument && node.ownerDocument.defaultView) // node is a Node\\n      || (node.document && node) // node is a Window\\n      || node.defaultView; // node is a Document\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-selection/src/selection/style.js\\n\\n\\nfunction style_styleRemove(name) {\\n  return function() {\\n    this.style.removeProperty(name);\\n  };\\n}\\n\\nfunction style_styleConstant(name, value, priority) {\\n  return function() {\\n    this.style.setProperty(name, value, priority);\\n  };\\n}\\n\\nfunction style_styleFunction(name, value, priority) {\\n  return function() {\\n    var v = value.apply(this, arguments);\\n    if (v == null) this.style.removeProperty(name);\\n    else this.style.setProperty(name, v, priority);\\n  };\\n}\\n\\n/* harmony default export */ var style = (function(name, value, priority) {\\n  return arguments.length > 1\\n      ? this.each((value == null\\n            ? style_styleRemove : typeof value === \"function\"\\n            ? style_styleFunction\\n            : style_styleConstant)(name, value, priority == null ? \"\" : priority))\\n      : style_styleValue(this.node(), name);\\n});\\n\\nfunction style_styleValue(node, name) {\\n  return node.style.getPropertyValue(name)\\n      || src_window(node).getComputedStyle(node, null).getPropertyValue(name);\\n}\\n\\n// CONCATENATED MODULE: ./node_modules/d3-selection/src/selection/property.js\\nfunction propertyRemove(name) {\\n  return function() {\\n    delete this[name];\\n  };\\n}\\n\\nfunction propertyConstant(name, value) {\\n  return function() {\\n    this[name] = value;\\n  };\\n}\\n\\nfunction propertyFunction(name, value) {\\n  return function() {\\n    var v = value.apply(this, arguments);\\n    if (v == null) delete this[name];\\n    else this[name] = v;\\n  };\\n}\\n\\n/* harmony default export */ var property = (function(name, value) {\\n  return arguments.length > 1\\n      ? this.each((value == null\\n          ? propertyRemove : typeof value === \"function\"\\n          ? propertyFunction\\n          : propertyConstant)(name, value))\\n      : this.node()[name];\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-selection/src/selection/classed.js\\nfunction classArray(string) {\\n  return string.trim().split(/^|\\\\s+/);\\n}\\n\\nfunction classList(node) {\\n  return node.classList || new ClassList(node);\\n}\\n\\nfunction ClassList(node) {\\n  this._node = node;\\n  this._names = classArray(node.getAttribute(\"class\") || \"\");\\n}\\n\\nClassList.prototype = {\\n  add: function(name) {\\n    var i = this._names.indexOf(name);\\n    if (i < 0) {\\n      this._names.push(name);\\n      this._node.setAttribute(\"class\", this._names.join(\" \"));\\n    }\\n  },\\n  remove: function(name) {\\n    var i = this._names.indexOf(name);\\n    if (i >= 0) {\\n      this._names.splice(i, 1);\\n      this._node.setAttribute(\"class\", this._names.join(\" \"));\\n    }\\n  },\\n  contains: function(name) {\\n    return this._names.indexOf(name) >= 0;\\n  }\\n};\\n\\nfunction classedAdd(node, names) {\\n  var list = classList(node), i = -1, n = names.length;\\n  while (++i < n) list.add(names[i]);\\n}\\n\\nfunction classedRemove(node, names) {\\n  var list = classList(node), i = -1, n = names.length;\\n  while (++i < n) list.remove(names[i]);\\n}\\n\\nfunction classedTrue(names) {\\n  return function() {\\n    classedAdd(this, names);\\n  };\\n}\\n\\nfunction classedFalse(names) {\\n  return function() {\\n    classedRemove(this, names);\\n  };\\n}\\n\\nfunction classedFunction(names, value) {\\n  return function() {\\n    (value.apply(this, arguments) ? classedAdd : classedRemove)(this, names);\\n  };\\n}\\n\\n/* harmony default export */ var classed = (function(name, value) {\\n  var names = classArray(name + \"\");\\n\\n  if (arguments.length < 2) {\\n    var list = classList(this.node()), i = -1, n = names.length;\\n    while (++i < n) if (!list.contains(names[i])) return false;\\n    return true;\\n  }\\n\\n  return this.each((typeof value === \"function\"\\n      ? classedFunction : value\\n      ? classedTrue\\n      : classedFalse)(names, value));\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-selection/src/selection/text.js\\nfunction textRemove() {\\n  this.textContent = \"\";\\n}\\n\\nfunction text_textConstant(value) {\\n  return function() {\\n    this.textContent = value;\\n  };\\n}\\n\\nfunction text_textFunction(value) {\\n  return function() {\\n    var v = value.apply(this, arguments);\\n    this.textContent = v == null ? \"\" : v;\\n  };\\n}\\n\\n/* harmony default export */ var selection_text = (function(value) {\\n  return arguments.length\\n      ? this.each(value == null\\n          ? textRemove : (typeof value === \"function\"\\n          ? text_textFunction\\n          : text_textConstant)(value))\\n      : this.node().textContent;\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-selection/src/selection/html.js\\nfunction htmlRemove() {\\n  this.innerHTML = \"\";\\n}\\n\\nfunction htmlConstant(value) {\\n  return function() {\\n    this.innerHTML = value;\\n  };\\n}\\n\\nfunction htmlFunction(value) {\\n  return function() {\\n    var v = value.apply(this, arguments);\\n    this.innerHTML = v == null ? \"\" : v;\\n  };\\n}\\n\\n/* harmony default export */ var html = (function(value) {\\n  return arguments.length\\n      ? this.each(value == null\\n          ? htmlRemove : (typeof value === \"function\"\\n          ? htmlFunction\\n          : htmlConstant)(value))\\n      : this.node().innerHTML;\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-selection/src/selection/raise.js\\nfunction raise_raise() {\\n  if (this.nextSibling) this.parentNode.appendChild(this);\\n}\\n\\n/* harmony default export */ var selection_raise = (function() {\\n  return this.each(raise_raise);\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-selection/src/selection/lower.js\\nfunction lower() {\\n  if (this.previousSibling) this.parentNode.insertBefore(this, this.parentNode.firstChild);\\n}\\n\\n/* harmony default export */ var selection_lower = (function() {\\n  return this.each(lower);\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-selection/src/selection/append.js\\n\\n\\n/* harmony default export */ var append = (function(name) {\\n  var create = typeof name === \"function\" ? name : creator(name);\\n  return this.select(function() {\\n    return this.appendChild(create.apply(this, arguments));\\n  });\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-selection/src/selection/insert.js\\n\\n\\n\\nfunction insert_constantNull() {\\n  return null;\\n}\\n\\n/* harmony default export */ var insert = (function(name, before) {\\n  var create = typeof name === \"function\" ? name : creator(name),\\n      select = before == null ? insert_constantNull : typeof before === \"function\" ? before : src_selector(before);\\n  return this.select(function() {\\n    return this.insertBefore(create.apply(this, arguments), select.apply(this, arguments) || null);\\n  });\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-selection/src/selection/remove.js\\nfunction remove() {\\n  var parent = this.parentNode;\\n  if (parent) parent.removeChild(this);\\n}\\n\\n/* harmony default export */ var selection_remove = (function() {\\n  return this.each(remove);\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-selection/src/selection/clone.js\\nfunction selection_cloneShallow() {\\n  return this.parentNode.insertBefore(this.cloneNode(false), this.nextSibling);\\n}\\n\\nfunction selection_cloneDeep() {\\n  return this.parentNode.insertBefore(this.cloneNode(true), this.nextSibling);\\n}\\n\\n/* harmony default export */ var selection_clone = (function(deep) {\\n  return this.select(deep ? selection_cloneDeep : selection_cloneShallow);\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-selection/src/selection/datum.js\\n/* harmony default export */ var datum = (function(value) {\\n  return arguments.length\\n      ? this.property(\"__data__\", value)\\n      : this.node().__data__;\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-selection/src/selection/on.js\\nvar filterEvents = {};\\n\\nvar on_event = null;\\n\\nif (typeof document !== \"undefined\") {\\n  var on_element = document.documentElement;\\n  if (!(\"onmouseenter\" in on_element)) {\\n    filterEvents = {mouseenter: \"mouseover\", mouseleave: \"mouseout\"};\\n  }\\n}\\n\\nfunction filterContextListener(listener, index, group) {\\n  listener = contextListener(listener, index, group);\\n  return function(event) {\\n    var related = event.relatedTarget;\\n    if (!related || (related !== this && !(related.compareDocumentPosition(this) & 8))) {\\n      listener.call(this, event);\\n    }\\n  };\\n}\\n\\nfunction contextListener(listener, index, group) {\\n  return function(event1) {\\n    var event0 = on_event; // Events can be reentrant (e.g., focus).\\n    on_event = event1;\\n    try {\\n      listener.call(this, this.__data__, index, group);\\n    } finally {\\n      on_event = event0;\\n    }\\n  };\\n}\\n\\nfunction on_parseTypenames(typenames) {\\n  return typenames.trim().split(/^|\\\\s+/).map(function(t) {\\n    var name = \"\", i = t.indexOf(\".\");\\n    if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);\\n    return {type: t, name: name};\\n  });\\n}\\n\\nfunction onRemove(typename) {\\n  return function() {\\n    var on = this.__on;\\n    if (!on) return;\\n    for (var j = 0, i = -1, m = on.length, o; j < m; ++j) {\\n      if (o = on[j], (!typename.type || o.type === typename.type) && o.name === typename.name) {\\n        this.removeEventListener(o.type, o.listener, o.capture);\\n      } else {\\n        on[++i] = o;\\n      }\\n    }\\n    if (++i) on.length = i;\\n    else delete this.__on;\\n  };\\n}\\n\\nfunction onAdd(typename, value, capture) {\\n  var wrap = filterEvents.hasOwnProperty(typename.type) ? filterContextListener : contextListener;\\n  return function(d, i, group) {\\n    var on = this.__on, o, listener = wrap(value, i, group);\\n    if (on) for (var j = 0, m = on.length; j < m; ++j) {\\n      if ((o = on[j]).type === typename.type && o.name === typename.name) {\\n        this.removeEventListener(o.type, o.listener, o.capture);\\n        this.addEventListener(o.type, o.listener = listener, o.capture = capture);\\n        o.value = value;\\n        return;\\n      }\\n    }\\n    this.addEventListener(typename.type, listener, capture);\\n    o = {type: typename.type, name: typename.name, value: value, listener: listener, capture: capture};\\n    if (!on) this.__on = [o];\\n    else on.push(o);\\n  };\\n}\\n\\n/* harmony default export */ var on = (function(typename, value, capture) {\\n  var typenames = on_parseTypenames(typename + \"\"), i, n = typenames.length, t;\\n\\n  if (arguments.length < 2) {\\n    var on = this.node().__on;\\n    if (on) for (var j = 0, m = on.length, o; j < m; ++j) {\\n      for (i = 0, o = on[j]; i < n; ++i) {\\n        if ((t = typenames[i]).type === o.type && t.name === o.name) {\\n          return o.value;\\n        }\\n      }\\n    }\\n    return;\\n  }\\n\\n  on = value ? onAdd : onRemove;\\n  if (capture == null) capture = false;\\n  for (i = 0; i < n; ++i) this.each(on(typenames[i], value, capture));\\n  return this;\\n});\\n\\nfunction customEvent(event1, listener, that, args) {\\n  var event0 = on_event;\\n  event1.sourceEvent = on_event;\\n  on_event = event1;\\n  try {\\n    return listener.apply(that, args);\\n  } finally {\\n    on_event = event0;\\n  }\\n}\\n\\n// CONCATENATED MODULE: ./node_modules/d3-selection/src/selection/dispatch.js\\n\\n\\nfunction dispatch_dispatchEvent(node, type, params) {\\n  var window = src_window(node),\\n      event = window.CustomEvent;\\n\\n  if (typeof event === \"function\") {\\n    event = new event(type, params);\\n  } else {\\n    event = window.document.createEvent(\"Event\");\\n    if (params) event.initEvent(type, params.bubbles, params.cancelable), event.detail = params.detail;\\n    else event.initEvent(type, false, false);\\n  }\\n\\n  node.dispatchEvent(event);\\n}\\n\\nfunction dispatch_dispatchConstant(type, params) {\\n  return function() {\\n    return dispatch_dispatchEvent(this, type, params);\\n  };\\n}\\n\\nfunction dispatch_dispatchFunction(type, params) {\\n  return function() {\\n    return dispatch_dispatchEvent(this, type, params.apply(this, arguments));\\n  };\\n}\\n\\n/* harmony default export */ var selection_dispatch = (function(type, params) {\\n  return this.each((typeof params === \"function\"\\n      ? dispatch_dispatchFunction\\n      : dispatch_dispatchConstant)(type, params));\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-selection/src/selection/index.js\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nvar selection_root = [null];\\n\\nfunction selection_Selection(groups, parents) {\\n  this._groups = groups;\\n  this._parents = parents;\\n}\\n\\nfunction selection_selection() {\\n  return new selection_Selection([[document.documentElement]], selection_root);\\n}\\n\\nselection_Selection.prototype = selection_selection.prototype = {\\n  constructor: selection_Selection,\\n  select: selection_select,\\n  selectAll: selectAll,\\n  filter: selection_filter,\\n  data: selection_data,\\n  enter: selection_enter,\\n  exit: selection_exit,\\n  merge: selection_merge,\\n  order: selection_order,\\n  sort: selection_sort,\\n  call: call,\\n  nodes: selection_nodes,\\n  node: selection_node,\\n  size: selection_size,\\n  empty: selection_empty,\\n  each: each,\\n  attr: attr,\\n  style: style,\\n  property: property,\\n  classed: classed,\\n  text: selection_text,\\n  html: html,\\n  raise: selection_raise,\\n  lower: selection_lower,\\n  append: append,\\n  insert: insert,\\n  remove: selection_remove,\\n  clone: selection_clone,\\n  datum: datum,\\n  on: on,\\n  dispatch: selection_dispatch\\n};\\n\\n/* harmony default export */ var src_selection = (selection_selection);\\n\\n// CONCATENATED MODULE: ./node_modules/d3-selection/src/select.js\\n\\n\\n/* harmony default export */ var src_select = (function(selector) {\\n  return typeof selector === \"string\"\\n      ? new selection_Selection([[document.querySelector(selector)]], [document.documentElement])\\n      : new selection_Selection([[selector]], selection_root);\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-selection/src/create.js\\n\\n\\n\\n/* harmony default export */ var src_create = (function(name) {\\n  return src_select(creator(name).call(document.documentElement));\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-selection/src/local.js\\nvar nextId = 0;\\n\\nfunction local_local() {\\n  return new Local;\\n}\\n\\nfunction Local() {\\n  this._ = \"@\" + (++nextId).toString(36);\\n}\\n\\nLocal.prototype = local_local.prototype = {\\n  constructor: Local,\\n  get: function(node) {\\n    var id = this._;\\n    while (!(id in node)) if (!(node = node.parentNode)) return;\\n    return node[id];\\n  },\\n  set: function(node, value) {\\n    return node[this._] = value;\\n  },\\n  remove: function(node) {\\n    return this._ in node && delete node[this._];\\n  },\\n  toString: function() {\\n    return this._;\\n  }\\n};\\n\\n// CONCATENATED MODULE: ./node_modules/d3-selection/src/sourceEvent.js\\n\\n\\n/* harmony default export */ var sourceEvent = (function() {\\n  var current = on_event, source;\\n  while (source = current.sourceEvent) current = source;\\n  return current;\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-selection/src/point.js\\n/* harmony default export */ var src_point = (function(node, event) {\\n  var svg = node.ownerSVGElement || node;\\n\\n  if (svg.createSVGPoint) {\\n    var point = svg.createSVGPoint();\\n    point.x = event.clientX, point.y = event.clientY;\\n    point = point.matrixTransform(node.getScreenCTM().inverse());\\n    return [point.x, point.y];\\n  }\\n\\n  var rect = node.getBoundingClientRect();\\n  return [event.clientX - rect.left - node.clientLeft, event.clientY - rect.top - node.clientTop];\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-selection/src/mouse.js\\n\\n\\n\\n/* harmony default export */ var mouse = (function(node) {\\n  var event = sourceEvent();\\n  if (event.changedTouches) event = event.changedTouches[0];\\n  return src_point(node, event);\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-selection/src/selectAll.js\\n\\n\\n/* harmony default export */ var src_selectAll = (function(selector) {\\n  return typeof selector === \"string\"\\n      ? new selection_Selection([document.querySelectorAll(selector)], [document.documentElement])\\n      : new selection_Selection([selector == null ? [] : selector], selection_root);\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-selection/src/touch.js\\n\\n\\n\\n/* harmony default export */ var src_touch = (function(node, touches, identifier) {\\n  if (arguments.length < 3) identifier = touches, touches = sourceEvent().changedTouches;\\n\\n  for (var i = 0, n = touches ? touches.length : 0, touch; i < n; ++i) {\\n    if ((touch = touches[i]).identifier === identifier) {\\n      return src_point(node, touch);\\n    }\\n  }\\n\\n  return null;\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-selection/src/touches.js\\n\\n\\n\\n/* harmony default export */ var src_touches = (function(node, touches) {\\n  if (touches == null) touches = sourceEvent().touches;\\n\\n  for (var i = 0, n = touches ? touches.length : 0, points = new Array(n); i < n; ++i) {\\n    points[i] = src_point(node, touches[i]);\\n  }\\n\\n  return points;\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-selection/index.js\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n// CONCATENATED MODULE: ./node_modules/d3-drag/src/noevent.js\\n\\n\\nfunction noevent_nopropagation() {\\n  on_event.stopImmediatePropagation();\\n}\\n\\n/* harmony default export */ var noevent = (function() {\\n  on_event.preventDefault();\\n  on_event.stopImmediatePropagation();\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-drag/src/nodrag.js\\n\\n\\n\\n/* harmony default export */ var nodrag = (function(view) {\\n  var root = view.document.documentElement,\\n      selection = src_select(view).on(\"dragstart.drag\", noevent, true);\\n  if (\"onselectstart\" in root) {\\n    selection.on(\"selectstart.drag\", noevent, true);\\n  } else {\\n    root.__noselect = root.style.MozUserSelect;\\n    root.style.MozUserSelect = \"none\";\\n  }\\n});\\n\\nfunction nodrag_yesdrag(view, noclick) {\\n  var root = view.document.documentElement,\\n      selection = src_select(view).on(\"dragstart.drag\", null);\\n  if (noclick) {\\n    selection.on(\"click.drag\", noevent, true);\\n    setTimeout(function() { selection.on(\"click.drag\", null); }, 0);\\n  }\\n  if (\"onselectstart\" in root) {\\n    selection.on(\"selectstart.drag\", null);\\n  } else {\\n    root.style.MozUserSelect = root.__noselect;\\n    delete root.__noselect;\\n  }\\n}\\n\\n// CONCATENATED MODULE: ./node_modules/d3-drag/src/constant.js\\n/* harmony default export */ var d3_drag_src_constant = (function(x) {\\n  return function() {\\n    return x;\\n  };\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-drag/src/event.js\\nfunction DragEvent(target, type, subject, id, active, x, y, dx, dy, dispatch) {\\n  this.target = target;\\n  this.type = type;\\n  this.subject = subject;\\n  this.identifier = id;\\n  this.active = active;\\n  this.x = x;\\n  this.y = y;\\n  this.dx = dx;\\n  this.dy = dy;\\n  this._ = dispatch;\\n}\\n\\nDragEvent.prototype.on = function() {\\n  var value = this._.on.apply(this._, arguments);\\n  return value === this._ ? this : value;\\n};\\n\\n// CONCATENATED MODULE: ./node_modules/d3-drag/src/drag.js\\n\\n\\n\\n\\n\\n\\n\\n// Ignore right-click, since that should open the context menu.\\nfunction drag_defaultFilter() {\\n  return !on_event.button;\\n}\\n\\nfunction drag_defaultContainer() {\\n  return this.parentNode;\\n}\\n\\nfunction drag_defaultSubject(d) {\\n  return d == null ? {x: on_event.x, y: on_event.y} : d;\\n}\\n\\nfunction drag_defaultTouchable() {\\n  return \"ontouchstart\" in this;\\n}\\n\\n/* harmony default export */ var src_drag = (function() {\\n  var filter = drag_defaultFilter,\\n      container = drag_defaultContainer,\\n      subject = drag_defaultSubject,\\n      touchable = drag_defaultTouchable,\\n      gestures = {},\\n      listeners = src_dispatch(\"start\", \"drag\", \"end\"),\\n      active = 0,\\n      mousedownx,\\n      mousedowny,\\n      mousemoving,\\n      touchending,\\n      clickDistance2 = 0;\\n\\n  function drag(selection) {\\n    selection\\n        .on(\"mousedown.drag\", mousedowned)\\n      .filter(touchable)\\n        .on(\"touchstart.drag\", touchstarted)\\n        .on(\"touchmove.drag\", touchmoved)\\n        .on(\"touchend.drag touchcancel.drag\", touchended)\\n        .style(\"touch-action\", \"none\")\\n        .style(\"-webkit-tap-highlight-color\", \"rgba(0,0,0,0)\");\\n  }\\n\\n  function mousedowned() {\\n    if (touchending || !filter.apply(this, arguments)) return;\\n    var gesture = beforestart(\"mouse\", container.apply(this, arguments), mouse, this, arguments);\\n    if (!gesture) return;\\n    src_select(on_event.view).on(\"mousemove.drag\", mousemoved, true).on(\"mouseup.drag\", mouseupped, true);\\n    nodrag(on_event.view);\\n    noevent_nopropagation();\\n    mousemoving = false;\\n    mousedownx = on_event.clientX;\\n    mousedowny = on_event.clientY;\\n    gesture(\"start\");\\n  }\\n\\n  function mousemoved() {\\n    noevent();\\n    if (!mousemoving) {\\n      var dx = on_event.clientX - mousedownx, dy = on_event.clientY - mousedowny;\\n      mousemoving = dx * dx + dy * dy > clickDistance2;\\n    }\\n    gestures.mouse(\"drag\");\\n  }\\n\\n  function mouseupped() {\\n    src_select(on_event.view).on(\"mousemove.drag mouseup.drag\", null);\\n    nodrag_yesdrag(on_event.view, mousemoving);\\n    noevent();\\n    gestures.mouse(\"end\");\\n  }\\n\\n  function touchstarted() {\\n    if (!filter.apply(this, arguments)) return;\\n    var touches = on_event.changedTouches,\\n        c = container.apply(this, arguments),\\n        n = touches.length, i, gesture;\\n\\n    for (i = 0; i < n; ++i) {\\n      if (gesture = beforestart(touches[i].identifier, c, src_touch, this, arguments)) {\\n        noevent_nopropagation();\\n        gesture(\"start\");\\n      }\\n    }\\n  }\\n\\n  function touchmoved() {\\n    var touches = on_event.changedTouches,\\n        n = touches.length, i, gesture;\\n\\n    for (i = 0; i < n; ++i) {\\n      if (gesture = gestures[touches[i].identifier]) {\\n        noevent();\\n        gesture(\"drag\");\\n      }\\n    }\\n  }\\n\\n  function touchended() {\\n    var touches = on_event.changedTouches,\\n        n = touches.length, i, gesture;\\n\\n    if (touchending) clearTimeout(touchending);\\n    touchending = setTimeout(function() { touchending = null; }, 500); // Ghost clicks are delayed!\\n    for (i = 0; i < n; ++i) {\\n      if (gesture = gestures[touches[i].identifier]) {\\n        noevent_nopropagation();\\n        gesture(\"end\");\\n      }\\n    }\\n  }\\n\\n  function beforestart(id, container, point, that, args) {\\n    var p = point(container, id), s, dx, dy,\\n        sublisteners = listeners.copy();\\n\\n    if (!customEvent(new DragEvent(drag, \"beforestart\", s, id, active, p[0], p[1], 0, 0, sublisteners), function() {\\n      if ((on_event.subject = s = subject.apply(that, args)) == null) return false;\\n      dx = s.x - p[0] || 0;\\n      dy = s.y - p[1] || 0;\\n      return true;\\n    })) return;\\n\\n    return function gesture(type) {\\n      var p0 = p, n;\\n      switch (type) {\\n        case \"start\": gestures[id] = gesture, n = active++; break;\\n        case \"end\": delete gestures[id], --active; // nobreak\\n        case \"drag\": p = point(container, id), n = active; break;\\n      }\\n      customEvent(new DragEvent(drag, type, s, id, n, p[0] + dx, p[1] + dy, p[0] - p0[0], p[1] - p0[1], sublisteners), sublisteners.apply, sublisteners, [type, that, args]);\\n    };\\n  }\\n\\n  drag.filter = function(_) {\\n    return arguments.length ? (filter = typeof _ === \"function\" ? _ : d3_drag_src_constant(!!_), drag) : filter;\\n  };\\n\\n  drag.container = function(_) {\\n    return arguments.length ? (container = typeof _ === \"function\" ? _ : d3_drag_src_constant(_), drag) : container;\\n  };\\n\\n  drag.subject = function(_) {\\n    return arguments.length ? (subject = typeof _ === \"function\" ? _ : d3_drag_src_constant(_), drag) : subject;\\n  };\\n\\n  drag.touchable = function(_) {\\n    return arguments.length ? (touchable = typeof _ === \"function\" ? _ : d3_drag_src_constant(!!_), drag) : touchable;\\n  };\\n\\n  drag.on = function() {\\n    var value = listeners.on.apply(listeners, arguments);\\n    return value === listeners ? drag : value;\\n  };\\n\\n  drag.clickDistance = function(_) {\\n    return arguments.length ? (clickDistance2 = (_ = +_) * _, drag) : Math.sqrt(clickDistance2);\\n  };\\n\\n  return drag;\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-drag/index.js\\n\\n\\n\\n// CONCATENATED MODULE: ./node_modules/d3-color/src/define.js\\n/* harmony default export */ var define = (function(constructor, factory, prototype) {\\n  constructor.prototype = factory.prototype = prototype;\\n  prototype.constructor = constructor;\\n});\\n\\nfunction define_extend(parent, definition) {\\n  var prototype = Object.create(parent.prototype);\\n  for (var key in definition) prototype[key] = definition[key];\\n  return prototype;\\n}\\n\\n// CONCATENATED MODULE: ./node_modules/d3-color/src/color.js\\n\\n\\nfunction color_Color() {}\\n\\nvar color_darker = 0.7;\\nvar color_brighter = 1 / color_darker;\\n\\nvar color_reI = \"\\\\\\\\s*([+-]?\\\\\\\\d+)\\\\\\\\s*\",\\n    color_reN = \"\\\\\\\\s*([+-]?\\\\\\\\d*\\\\\\\\.?\\\\\\\\d+(?:[eE][+-]?\\\\\\\\d+)?)\\\\\\\\s*\",\\n    color_reP = \"\\\\\\\\s*([+-]?\\\\\\\\d*\\\\\\\\.?\\\\\\\\d+(?:[eE][+-]?\\\\\\\\d+)?)%\\\\\\\\s*\",\\n    color_reHex3 = /^#([0-9a-f]{3})$/,\\n    color_reHex6 = /^#([0-9a-f]{6})$/,\\n    color_reRgbInteger = new RegExp(\"^rgb\\\\\\\\(\" + [color_reI, color_reI, color_reI] + \"\\\\\\\\)$\"),\\n    color_reRgbPercent = new RegExp(\"^rgb\\\\\\\\(\" + [color_reP, color_reP, color_reP] + \"\\\\\\\\)$\"),\\n    color_reRgbaInteger = new RegExp(\"^rgba\\\\\\\\(\" + [color_reI, color_reI, color_reI, color_reN] + \"\\\\\\\\)$\"),\\n    color_reRgbaPercent = new RegExp(\"^rgba\\\\\\\\(\" + [color_reP, color_reP, color_reP, color_reN] + \"\\\\\\\\)$\"),\\n    color_reHslPercent = new RegExp(\"^hsl\\\\\\\\(\" + [color_reN, color_reP, color_reP] + \"\\\\\\\\)$\"),\\n    color_reHslaPercent = new RegExp(\"^hsla\\\\\\\\(\" + [color_reN, color_reP, color_reP, color_reN] + \"\\\\\\\\)$\");\\n\\nvar color_named = {\\n  aliceblue: 0xf0f8ff,\\n  antiquewhite: 0xfaebd7,\\n  aqua: 0x00ffff,\\n  aquamarine: 0x7fffd4,\\n  azure: 0xf0ffff,\\n  beige: 0xf5f5dc,\\n  bisque: 0xffe4c4,\\n  black: 0x000000,\\n  blanchedalmond: 0xffebcd,\\n  blue: 0x0000ff,\\n  blueviolet: 0x8a2be2,\\n  brown: 0xa52a2a,\\n  burlywood: 0xdeb887,\\n  cadetblue: 0x5f9ea0,\\n  chartreuse: 0x7fff00,\\n  chocolate: 0xd2691e,\\n  coral: 0xff7f50,\\n  cornflowerblue: 0x6495ed,\\n  cornsilk: 0xfff8dc,\\n  crimson: 0xdc143c,\\n  cyan: 0x00ffff,\\n  darkblue: 0x00008b,\\n  darkcyan: 0x008b8b,\\n  darkgoldenrod: 0xb8860b,\\n  darkgray: 0xa9a9a9,\\n  darkgreen: 0x006400,\\n  darkgrey: 0xa9a9a9,\\n  darkkhaki: 0xbdb76b,\\n  darkmagenta: 0x8b008b,\\n  darkolivegreen: 0x556b2f,\\n  darkorange: 0xff8c00,\\n  darkorchid: 0x9932cc,\\n  darkred: 0x8b0000,\\n  darksalmon: 0xe9967a,\\n  darkseagreen: 0x8fbc8f,\\n  darkslateblue: 0x483d8b,\\n  darkslategray: 0x2f4f4f,\\n  darkslategrey: 0x2f4f4f,\\n  darkturquoise: 0x00ced1,\\n  darkviolet: 0x9400d3,\\n  deeppink: 0xff1493,\\n  deepskyblue: 0x00bfff,\\n  dimgray: 0x696969,\\n  dimgrey: 0x696969,\\n  dodgerblue: 0x1e90ff,\\n  firebrick: 0xb22222,\\n  floralwhite: 0xfffaf0,\\n  forestgreen: 0x228b22,\\n  fuchsia: 0xff00ff,\\n  gainsboro: 0xdcdcdc,\\n  ghostwhite: 0xf8f8ff,\\n  gold: 0xffd700,\\n  goldenrod: 0xdaa520,\\n  gray: 0x808080,\\n  green: 0x008000,\\n  greenyellow: 0xadff2f,\\n  grey: 0x808080,\\n  honeydew: 0xf0fff0,\\n  hotpink: 0xff69b4,\\n  indianred: 0xcd5c5c,\\n  indigo: 0x4b0082,\\n  ivory: 0xfffff0,\\n  khaki: 0xf0e68c,\\n  lavender: 0xe6e6fa,\\n  lavenderblush: 0xfff0f5,\\n  lawngreen: 0x7cfc00,\\n  lemonchiffon: 0xfffacd,\\n  lightblue: 0xadd8e6,\\n  lightcoral: 0xf08080,\\n  lightcyan: 0xe0ffff,\\n  lightgoldenrodyellow: 0xfafad2,\\n  lightgray: 0xd3d3d3,\\n  lightgreen: 0x90ee90,\\n  lightgrey: 0xd3d3d3,\\n  lightpink: 0xffb6c1,\\n  lightsalmon: 0xffa07a,\\n  lightseagreen: 0x20b2aa,\\n  lightskyblue: 0x87cefa,\\n  lightslategray: 0x778899,\\n  lightslategrey: 0x778899,\\n  lightsteelblue: 0xb0c4de,\\n  lightyellow: 0xffffe0,\\n  lime: 0x00ff00,\\n  limegreen: 0x32cd32,\\n  linen: 0xfaf0e6,\\n  magenta: 0xff00ff,\\n  maroon: 0x800000,\\n  mediumaquamarine: 0x66cdaa,\\n  mediumblue: 0x0000cd,\\n  mediumorchid: 0xba55d3,\\n  mediumpurple: 0x9370db,\\n  mediumseagreen: 0x3cb371,\\n  mediumslateblue: 0x7b68ee,\\n  mediumspringgreen: 0x00fa9a,\\n  mediumturquoise: 0x48d1cc,\\n  mediumvioletred: 0xc71585,\\n  midnightblue: 0x191970,\\n  mintcream: 0xf5fffa,\\n  mistyrose: 0xffe4e1,\\n  moccasin: 0xffe4b5,\\n  navajowhite: 0xffdead,\\n  navy: 0x000080,\\n  oldlace: 0xfdf5e6,\\n  olive: 0x808000,\\n  olivedrab: 0x6b8e23,\\n  orange: 0xffa500,\\n  orangered: 0xff4500,\\n  orchid: 0xda70d6,\\n  palegoldenrod: 0xeee8aa,\\n  palegreen: 0x98fb98,\\n  paleturquoise: 0xafeeee,\\n  palevioletred: 0xdb7093,\\n  papayawhip: 0xffefd5,\\n  peachpuff: 0xffdab9,\\n  peru: 0xcd853f,\\n  pink: 0xffc0cb,\\n  plum: 0xdda0dd,\\n  powderblue: 0xb0e0e6,\\n  purple: 0x800080,\\n  rebeccapurple: 0x663399,\\n  red: 0xff0000,\\n  rosybrown: 0xbc8f8f,\\n  royalblue: 0x4169e1,\\n  saddlebrown: 0x8b4513,\\n  salmon: 0xfa8072,\\n  sandybrown: 0xf4a460,\\n  seagreen: 0x2e8b57,\\n  seashell: 0xfff5ee,\\n  sienna: 0xa0522d,\\n  silver: 0xc0c0c0,\\n  skyblue: 0x87ceeb,\\n  slateblue: 0x6a5acd,\\n  slategray: 0x708090,\\n  slategrey: 0x708090,\\n  snow: 0xfffafa,\\n  springgreen: 0x00ff7f,\\n  steelblue: 0x4682b4,\\n  tan: 0xd2b48c,\\n  teal: 0x008080,\\n  thistle: 0xd8bfd8,\\n  tomato: 0xff6347,\\n  turquoise: 0x40e0d0,\\n  violet: 0xee82ee,\\n  wheat: 0xf5deb3,\\n  white: 0xffffff,\\n  whitesmoke: 0xf5f5f5,\\n  yellow: 0xffff00,\\n  yellowgreen: 0x9acd32\\n};\\n\\ndefine(color_Color, color_color, {\\n  displayable: function() {\\n    return this.rgb().displayable();\\n  },\\n  toString: function() {\\n    return this.rgb() + \"\";\\n  }\\n});\\n\\nfunction color_color(format) {\\n  var m;\\n  format = (format + \"\").trim().toLowerCase();\\n  return (m = color_reHex3.exec(format)) ? (m = parseInt(m[1], 16), new color_Rgb((m >> 8 & 0xf) | (m >> 4 & 0x0f0), (m >> 4 & 0xf) | (m & 0xf0), ((m & 0xf) << 4) | (m & 0xf), 1)) // #f00\\n      : (m = color_reHex6.exec(format)) ? color_rgbn(parseInt(m[1], 16)) // #ff0000\\n      : (m = color_reRgbInteger.exec(format)) ? new color_Rgb(m[1], m[2], m[3], 1) // rgb(255, 0, 0)\\n      : (m = color_reRgbPercent.exec(format)) ? new color_Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) // rgb(100%, 0%, 0%)\\n      : (m = color_reRgbaInteger.exec(format)) ? color_rgba(m[1], m[2], m[3], m[4]) // rgba(255, 0, 0, 1)\\n      : (m = color_reRgbaPercent.exec(format)) ? color_rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) // rgb(100%, 0%, 0%, 1)\\n      : (m = color_reHslPercent.exec(format)) ? color_hsla(m[1], m[2] / 100, m[3] / 100, 1) // hsl(120, 50%, 50%)\\n      : (m = color_reHslaPercent.exec(format)) ? color_hsla(m[1], m[2] / 100, m[3] / 100, m[4]) // hsla(120, 50%, 50%, 1)\\n      : color_named.hasOwnProperty(format) ? color_rgbn(color_named[format])\\n      : format === \"transparent\" ? new color_Rgb(NaN, NaN, NaN, 0)\\n      : null;\\n}\\n\\nfunction color_rgbn(n) {\\n  return new color_Rgb(n >> 16 & 0xff, n >> 8 & 0xff, n & 0xff, 1);\\n}\\n\\nfunction color_rgba(r, g, b, a) {\\n  if (a <= 0) r = g = b = NaN;\\n  return new color_Rgb(r, g, b, a);\\n}\\n\\nfunction color_rgbConvert(o) {\\n  if (!(o instanceof color_Color)) o = color_color(o);\\n  if (!o) return new color_Rgb;\\n  o = o.rgb();\\n  return new color_Rgb(o.r, o.g, o.b, o.opacity);\\n}\\n\\nfunction color_rgb(r, g, b, opacity) {\\n  return arguments.length === 1 ? color_rgbConvert(r) : new color_Rgb(r, g, b, opacity == null ? 1 : opacity);\\n}\\n\\nfunction color_Rgb(r, g, b, opacity) {\\n  this.r = +r;\\n  this.g = +g;\\n  this.b = +b;\\n  this.opacity = +opacity;\\n}\\n\\ndefine(color_Rgb, color_rgb, define_extend(color_Color, {\\n  brighter: function(k) {\\n    k = k == null ? color_brighter : Math.pow(color_brighter, k);\\n    return new color_Rgb(this.r * k, this.g * k, this.b * k, this.opacity);\\n  },\\n  darker: function(k) {\\n    k = k == null ? color_darker : Math.pow(color_darker, k);\\n    return new color_Rgb(this.r * k, this.g * k, this.b * k, this.opacity);\\n  },\\n  rgb: function() {\\n    return this;\\n  },\\n  displayable: function() {\\n    return (0 <= this.r && this.r <= 255)\\n        && (0 <= this.g && this.g <= 255)\\n        && (0 <= this.b && this.b <= 255)\\n        && (0 <= this.opacity && this.opacity <= 1);\\n  },\\n  toString: function() {\\n    var a = this.opacity; a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));\\n    return (a === 1 ? \"rgb(\" : \"rgba(\")\\n        + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + \", \"\\n        + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + \", \"\\n        + Math.max(0, Math.min(255, Math.round(this.b) || 0))\\n        + (a === 1 ? \")\" : \", \" + a + \")\");\\n  }\\n}));\\n\\nfunction color_hsla(h, s, l, a) {\\n  if (a <= 0) h = s = l = NaN;\\n  else if (l <= 0 || l >= 1) h = s = NaN;\\n  else if (s <= 0) h = NaN;\\n  return new color_Hsl(h, s, l, a);\\n}\\n\\nfunction color_hslConvert(o) {\\n  if (o instanceof color_Hsl) return new color_Hsl(o.h, o.s, o.l, o.opacity);\\n  if (!(o instanceof color_Color)) o = color_color(o);\\n  if (!o) return new color_Hsl;\\n  if (o instanceof color_Hsl) return o;\\n  o = o.rgb();\\n  var r = o.r / 255,\\n      g = o.g / 255,\\n      b = o.b / 255,\\n      min = Math.min(r, g, b),\\n      max = Math.max(r, g, b),\\n      h = NaN,\\n      s = max - min,\\n      l = (max + min) / 2;\\n  if (s) {\\n    if (r === max) h = (g - b) / s + (g < b) * 6;\\n    else if (g === max) h = (b - r) / s + 2;\\n    else h = (r - g) / s + 4;\\n    s /= l < 0.5 ? max + min : 2 - max - min;\\n    h *= 60;\\n  } else {\\n    s = l > 0 && l < 1 ? 0 : h;\\n  }\\n  return new color_Hsl(h, s, l, o.opacity);\\n}\\n\\nfunction color_hsl(h, s, l, opacity) {\\n  return arguments.length === 1 ? color_hslConvert(h) : new color_Hsl(h, s, l, opacity == null ? 1 : opacity);\\n}\\n\\nfunction color_Hsl(h, s, l, opacity) {\\n  this.h = +h;\\n  this.s = +s;\\n  this.l = +l;\\n  this.opacity = +opacity;\\n}\\n\\ndefine(color_Hsl, color_hsl, define_extend(color_Color, {\\n  brighter: function(k) {\\n    k = k == null ? color_brighter : Math.pow(color_brighter, k);\\n    return new color_Hsl(this.h, this.s, this.l * k, this.opacity);\\n  },\\n  darker: function(k) {\\n    k = k == null ? color_darker : Math.pow(color_darker, k);\\n    return new color_Hsl(this.h, this.s, this.l * k, this.opacity);\\n  },\\n  rgb: function() {\\n    var h = this.h % 360 + (this.h < 0) * 360,\\n        s = isNaN(h) || isNaN(this.s) ? 0 : this.s,\\n        l = this.l,\\n        m2 = l + (l < 0.5 ? l : 1 - l) * s,\\n        m1 = 2 * l - m2;\\n    return new color_Rgb(\\n      color_hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2),\\n      color_hsl2rgb(h, m1, m2),\\n      color_hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2),\\n      this.opacity\\n    );\\n  },\\n  displayable: function() {\\n    return (0 <= this.s && this.s <= 1 || isNaN(this.s))\\n        && (0 <= this.l && this.l <= 1)\\n        && (0 <= this.opacity && this.opacity <= 1);\\n  }\\n}));\\n\\n/* From FvD 13.37, CSS Color Module Level 3 */\\nfunction color_hsl2rgb(h, m1, m2) {\\n  return (h < 60 ? m1 + (m2 - m1) * h / 60\\n      : h < 180 ? m2\\n      : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60\\n      : m1) * 255;\\n}\\n\\n// CONCATENATED MODULE: ./node_modules/d3-color/src/math.js\\nvar deg2rad = Math.PI / 180;\\nvar rad2deg = 180 / Math.PI;\\n\\n// CONCATENATED MODULE: ./node_modules/d3-color/src/lab.js\\n\\n\\n\\n\\nvar lab_Kn = 18,\\n    lab_Xn = 0.950470, // D65 standard referent\\n    lab_Yn = 1,\\n    lab_Zn = 1.088830,\\n    lab_t0 = 4 / 29,\\n    lab_t1 = 6 / 29,\\n    lab_t2 = 3 * lab_t1 * lab_t1,\\n    lab_t3 = lab_t1 * lab_t1 * lab_t1;\\n\\nfunction lab_labConvert(o) {\\n  if (o instanceof lab_Lab) return new lab_Lab(o.l, o.a, o.b, o.opacity);\\n  if (o instanceof lab_Hcl) {\\n    var h = o.h * deg2rad;\\n    return new lab_Lab(o.l, Math.cos(h) * o.c, Math.sin(h) * o.c, o.opacity);\\n  }\\n  if (!(o instanceof color_Rgb)) o = color_rgbConvert(o);\\n  var b = lab_rgb2xyz(o.r),\\n      a = lab_rgb2xyz(o.g),\\n      l = lab_rgb2xyz(o.b),\\n      x = lab_xyz2lab((0.4124564 * b + 0.3575761 * a + 0.1804375 * l) / lab_Xn),\\n      y = lab_xyz2lab((0.2126729 * b + 0.7151522 * a + 0.0721750 * l) / lab_Yn),\\n      z = lab_xyz2lab((0.0193339 * b + 0.1191920 * a + 0.9503041 * l) / lab_Zn);\\n  return new lab_Lab(116 * y - 16, 500 * (x - y), 200 * (y - z), o.opacity);\\n}\\n\\nfunction lab_lab(l, a, b, opacity) {\\n  return arguments.length === 1 ? lab_labConvert(l) : new lab_Lab(l, a, b, opacity == null ? 1 : opacity);\\n}\\n\\nfunction lab_Lab(l, a, b, opacity) {\\n  this.l = +l;\\n  this.a = +a;\\n  this.b = +b;\\n  this.opacity = +opacity;\\n}\\n\\ndefine(lab_Lab, lab_lab, define_extend(color_Color, {\\n  brighter: function(k) {\\n    return new lab_Lab(this.l + lab_Kn * (k == null ? 1 : k), this.a, this.b, this.opacity);\\n  },\\n  darker: function(k) {\\n    return new lab_Lab(this.l - lab_Kn * (k == null ? 1 : k), this.a, this.b, this.opacity);\\n  },\\n  rgb: function() {\\n    var y = (this.l + 16) / 116,\\n        x = isNaN(this.a) ? y : y + this.a / 500,\\n        z = isNaN(this.b) ? y : y - this.b / 200;\\n    y = lab_Yn * lab_lab2xyz(y);\\n    x = lab_Xn * lab_lab2xyz(x);\\n    z = lab_Zn * lab_lab2xyz(z);\\n    return new color_Rgb(\\n      lab_xyz2rgb( 3.2404542 * x - 1.5371385 * y - 0.4985314 * z), // D65 -> sRGB\\n      lab_xyz2rgb(-0.9692660 * x + 1.8760108 * y + 0.0415560 * z),\\n      lab_xyz2rgb( 0.0556434 * x - 0.2040259 * y + 1.0572252 * z),\\n      this.opacity\\n    );\\n  }\\n}));\\n\\nfunction lab_xyz2lab(t) {\\n  return t > lab_t3 ? Math.pow(t, 1 / 3) : t / lab_t2 + lab_t0;\\n}\\n\\nfunction lab_lab2xyz(t) {\\n  return t > lab_t1 ? t * t * t : lab_t2 * (t - lab_t0);\\n}\\n\\nfunction lab_xyz2rgb(x) {\\n  return 255 * (x <= 0.0031308 ? 12.92 * x : 1.055 * Math.pow(x, 1 / 2.4) - 0.055);\\n}\\n\\nfunction lab_rgb2xyz(x) {\\n  return (x /= 255) <= 0.04045 ? x / 12.92 : Math.pow((x + 0.055) / 1.055, 2.4);\\n}\\n\\nfunction lab_hclConvert(o) {\\n  if (o instanceof lab_Hcl) return new lab_Hcl(o.h, o.c, o.l, o.opacity);\\n  if (!(o instanceof lab_Lab)) o = lab_labConvert(o);\\n  var h = Math.atan2(o.b, o.a) * rad2deg;\\n  return new lab_Hcl(h < 0 ? h + 360 : h, Math.sqrt(o.a * o.a + o.b * o.b), o.l, o.opacity);\\n}\\n\\nfunction lab_hcl(h, c, l, opacity) {\\n  return arguments.length === 1 ? lab_hclConvert(h) : new lab_Hcl(h, c, l, opacity == null ? 1 : opacity);\\n}\\n\\nfunction lab_Hcl(h, c, l, opacity) {\\n  this.h = +h;\\n  this.c = +c;\\n  this.l = +l;\\n  this.opacity = +opacity;\\n}\\n\\ndefine(lab_Hcl, lab_hcl, define_extend(color_Color, {\\n  brighter: function(k) {\\n    return new lab_Hcl(this.h, this.c, this.l + lab_Kn * (k == null ? 1 : k), this.opacity);\\n  },\\n  darker: function(k) {\\n    return new lab_Hcl(this.h, this.c, this.l - lab_Kn * (k == null ? 1 : k), this.opacity);\\n  },\\n  rgb: function() {\\n    return lab_labConvert(this).rgb();\\n  }\\n}));\\n\\n// CONCATENATED MODULE: ./node_modules/d3-color/src/cubehelix.js\\n\\n\\n\\n\\nvar cubehelix_A = -0.14861,\\n    cubehelix_B = +1.78277,\\n    cubehelix_C = -0.29227,\\n    cubehelix_D = -0.90649,\\n    cubehelix_E = +1.97294,\\n    cubehelix_ED = cubehelix_E * cubehelix_D,\\n    cubehelix_EB = cubehelix_E * cubehelix_B,\\n    cubehelix_BC_DA = cubehelix_B * cubehelix_C - cubehelix_D * cubehelix_A;\\n\\nfunction cubehelix_cubehelixConvert(o) {\\n  if (o instanceof cubehelix_Cubehelix) return new cubehelix_Cubehelix(o.h, o.s, o.l, o.opacity);\\n  if (!(o instanceof color_Rgb)) o = color_rgbConvert(o);\\n  var r = o.r / 255,\\n      g = o.g / 255,\\n      b = o.b / 255,\\n      l = (cubehelix_BC_DA * b + cubehelix_ED * r - cubehelix_EB * g) / (cubehelix_BC_DA + cubehelix_ED - cubehelix_EB),\\n      bl = b - l,\\n      k = (cubehelix_E * (g - l) - cubehelix_C * bl) / cubehelix_D,\\n      s = Math.sqrt(k * k + bl * bl) / (cubehelix_E * l * (1 - l)), // NaN if l=0 or l=1\\n      h = s ? Math.atan2(k, bl) * rad2deg - 120 : NaN;\\n  return new cubehelix_Cubehelix(h < 0 ? h + 360 : h, s, l, o.opacity);\\n}\\n\\nfunction cubehelix_cubehelix(h, s, l, opacity) {\\n  return arguments.length === 1 ? cubehelix_cubehelixConvert(h) : new cubehelix_Cubehelix(h, s, l, opacity == null ? 1 : opacity);\\n}\\n\\nfunction cubehelix_Cubehelix(h, s, l, opacity) {\\n  this.h = +h;\\n  this.s = +s;\\n  this.l = +l;\\n  this.opacity = +opacity;\\n}\\n\\ndefine(cubehelix_Cubehelix, cubehelix_cubehelix, define_extend(color_Color, {\\n  brighter: function(k) {\\n    k = k == null ? color_brighter : Math.pow(color_brighter, k);\\n    return new cubehelix_Cubehelix(this.h, this.s, this.l * k, this.opacity);\\n  },\\n  darker: function(k) {\\n    k = k == null ? color_darker : Math.pow(color_darker, k);\\n    return new cubehelix_Cubehelix(this.h, this.s, this.l * k, this.opacity);\\n  },\\n  rgb: function() {\\n    var h = isNaN(this.h) ? 0 : (this.h + 120) * deg2rad,\\n        l = +this.l,\\n        a = isNaN(this.s) ? 0 : this.s * l * (1 - l),\\n        cosh = Math.cos(h),\\n        sinh = Math.sin(h);\\n    return new color_Rgb(\\n      255 * (l + a * (cubehelix_A * cosh + cubehelix_B * sinh)),\\n      255 * (l + a * (cubehelix_C * cosh + cubehelix_D * sinh)),\\n      255 * (l + a * (cubehelix_E * cosh)),\\n      this.opacity\\n    );\\n  }\\n}));\\n\\n// CONCATENATED MODULE: ./node_modules/d3-color/index.js\\n\\n\\n\\n\\n// CONCATENATED MODULE: ./node_modules/d3-interpolate/src/basis.js\\nfunction basis(t1, v0, v1, v2, v3) {\\n  var t2 = t1 * t1, t3 = t2 * t1;\\n  return ((1 - 3 * t1 + 3 * t2 - t3) * v0\\n      + (4 - 6 * t2 + 3 * t3) * v1\\n      + (1 + 3 * t1 + 3 * t2 - 3 * t3) * v2\\n      + t3 * v3) / 6;\\n}\\n\\n/* harmony default export */ var src_basis = (function(values) {\\n  var n = values.length - 1;\\n  return function(t) {\\n    var i = t <= 0 ? (t = 0) : t >= 1 ? (t = 1, n - 1) : Math.floor(t * n),\\n        v1 = values[i],\\n        v2 = values[i + 1],\\n        v0 = i > 0 ? values[i - 1] : 2 * v1 - v2,\\n        v3 = i < n - 1 ? values[i + 2] : 2 * v2 - v1;\\n    return basis((t - i / n) * n, v0, v1, v2, v3);\\n  };\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-interpolate/src/basisClosed.js\\n\\n\\n/* harmony default export */ var basisClosed = (function(values) {\\n  var n = values.length;\\n  return function(t) {\\n    var i = Math.floor(((t %= 1) < 0 ? ++t : t) * n),\\n        v0 = values[(i + n - 1) % n],\\n        v1 = values[i % n],\\n        v2 = values[(i + 1) % n],\\n        v3 = values[(i + 2) % n];\\n    return basis((t - i / n) * n, v0, v1, v2, v3);\\n  };\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-interpolate/src/constant.js\\n/* harmony default export */ var d3_interpolate_src_constant = (function(x) {\\n  return function() {\\n    return x;\\n  };\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-interpolate/src/color.js\\n\\n\\nfunction color_linear(a, d) {\\n  return function(t) {\\n    return a + t * d;\\n  };\\n}\\n\\nfunction color_exponential(a, b, y) {\\n  return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function(t) {\\n    return Math.pow(a + t * b, y);\\n  };\\n}\\n\\nfunction color_hue(a, b) {\\n  var d = b - a;\\n  return d ? color_linear(a, d > 180 || d < -180 ? d - 360 * Math.round(d / 360) : d) : d3_interpolate_src_constant(isNaN(a) ? b : a);\\n}\\n\\nfunction color_gamma(y) {\\n  return (y = +y) === 1 ? color_nogamma : function(a, b) {\\n    return b - a ? color_exponential(a, b, y) : d3_interpolate_src_constant(isNaN(a) ? b : a);\\n  };\\n}\\n\\nfunction color_nogamma(a, b) {\\n  var d = b - a;\\n  return d ? color_linear(a, d) : d3_interpolate_src_constant(isNaN(a) ? b : a);\\n}\\n\\n// CONCATENATED MODULE: ./node_modules/d3-interpolate/src/rgb.js\\n\\n\\n\\n\\n\\n/* harmony default export */ var src_rgb = ((function rgbGamma(y) {\\n  var color = color_gamma(y);\\n\\n  function rgb(start, end) {\\n    var r = color((start = color_rgb(start)).r, (end = color_rgb(end)).r),\\n        g = color(start.g, end.g),\\n        b = color(start.b, end.b),\\n        opacity = color_nogamma(start.opacity, end.opacity);\\n    return function(t) {\\n      start.r = r(t);\\n      start.g = g(t);\\n      start.b = b(t);\\n      start.opacity = opacity(t);\\n      return start + \"\";\\n    };\\n  }\\n\\n  rgb.gamma = rgbGamma;\\n\\n  return rgb;\\n})(1));\\n\\nfunction rgb_rgbSpline(spline) {\\n  return function(colors) {\\n    var n = colors.length,\\n        r = new Array(n),\\n        g = new Array(n),\\n        b = new Array(n),\\n        i, color;\\n    for (i = 0; i < n; ++i) {\\n      color = color_rgb(colors[i]);\\n      r[i] = color.r || 0;\\n      g[i] = color.g || 0;\\n      b[i] = color.b || 0;\\n    }\\n    r = spline(r);\\n    g = spline(g);\\n    b = spline(b);\\n    color.opacity = 1;\\n    return function(t) {\\n      color.r = r(t);\\n      color.g = g(t);\\n      color.b = b(t);\\n      return color + \"\";\\n    };\\n  };\\n}\\n\\nvar rgb_rgbBasis = rgb_rgbSpline(src_basis);\\nvar rgb_rgbBasisClosed = rgb_rgbSpline(basisClosed);\\n\\n// CONCATENATED MODULE: ./node_modules/d3-interpolate/src/array.js\\n\\n\\n/* harmony default export */ var src_array = (function(a, b) {\\n  var nb = b ? b.length : 0,\\n      na = a ? Math.min(nb, a.length) : 0,\\n      x = new Array(na),\\n      c = new Array(nb),\\n      i;\\n\\n  for (i = 0; i < na; ++i) x[i] = src_value(a[i], b[i]);\\n  for (; i < nb; ++i) c[i] = b[i];\\n\\n  return function(t) {\\n    for (i = 0; i < na; ++i) c[i] = x[i](t);\\n    return c;\\n  };\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-interpolate/src/date.js\\n/* harmony default export */ var src_date = (function(a, b) {\\n  var d = new Date;\\n  return a = +a, b -= a, function(t) {\\n    return d.setTime(a + b * t), d;\\n  };\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-interpolate/src/number.js\\n/* harmony default export */ var d3_interpolate_src_number = (function(a, b) {\\n  return a = +a, b -= a, function(t) {\\n    return a + b * t;\\n  };\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-interpolate/src/object.js\\n\\n\\n/* harmony default export */ var src_object = (function(a, b) {\\n  var i = {},\\n      c = {},\\n      k;\\n\\n  if (a === null || typeof a !== \"object\") a = {};\\n  if (b === null || typeof b !== \"object\") b = {};\\n\\n  for (k in b) {\\n    if (k in a) {\\n      i[k] = src_value(a[k], b[k]);\\n    } else {\\n      c[k] = b[k];\\n    }\\n  }\\n\\n  return function(t) {\\n    for (k in i) c[k] = i[k](t);\\n    return c;\\n  };\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-interpolate/src/string.js\\n\\n\\nvar string_reA = /[-+]?(?:\\\\d+\\\\.?\\\\d*|\\\\.?\\\\d+)(?:[eE][-+]?\\\\d+)?/g,\\n    string_reB = new RegExp(string_reA.source, \"g\");\\n\\nfunction string_zero(b) {\\n  return function() {\\n    return b;\\n  };\\n}\\n\\nfunction string_one(b) {\\n  return function(t) {\\n    return b(t) + \"\";\\n  };\\n}\\n\\n/* harmony default export */ var src_string = (function(a, b) {\\n  var bi = string_reA.lastIndex = string_reB.lastIndex = 0, // scan index for next number in b\\n      am, // current match in a\\n      bm, // current match in b\\n      bs, // string preceding current number in b, if any\\n      i = -1, // index in s\\n      s = [], // string constants and placeholders\\n      q = []; // number interpolators\\n\\n  // Coerce inputs to strings.\\n  a = a + \"\", b = b + \"\";\\n\\n  // Interpolate pairs of numbers in a & b.\\n  while ((am = string_reA.exec(a))\\n      && (bm = string_reB.exec(b))) {\\n    if ((bs = bm.index) > bi) { // a string precedes the next number in b\\n      bs = b.slice(bi, bs);\\n      if (s[i]) s[i] += bs; // coalesce with previous string\\n      else s[++i] = bs;\\n    }\\n    if ((am = am[0]) === (bm = bm[0])) { // numbers in a & b match\\n      if (s[i]) s[i] += bm; // coalesce with previous string\\n      else s[++i] = bm;\\n    } else { // interpolate non-matching numbers\\n      s[++i] = null;\\n      q.push({i: i, x: d3_interpolate_src_number(am, bm)});\\n    }\\n    bi = string_reB.lastIndex;\\n  }\\n\\n  // Add remains of b.\\n  if (bi < b.length) {\\n    bs = b.slice(bi);\\n    if (s[i]) s[i] += bs; // coalesce with previous string\\n    else s[++i] = bs;\\n  }\\n\\n  // Special optimization for only a single match.\\n  // Otherwise, interpolate each of the numbers and rejoin the string.\\n  return s.length < 2 ? (q[0]\\n      ? string_one(q[0].x)\\n      : string_zero(b))\\n      : (b = q.length, function(t) {\\n          for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);\\n          return s.join(\"\");\\n        });\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-interpolate/src/value.js\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n/* harmony default export */ var src_value = (function(a, b) {\\n  var t = typeof b, c;\\n  return b == null || t === \"boolean\" ? d3_interpolate_src_constant(b)\\n      : (t === \"number\" ? d3_interpolate_src_number\\n      : t === \"string\" ? ((c = color_color(b)) ? (b = c, src_rgb) : src_string)\\n      : b instanceof color_color ? src_rgb\\n      : b instanceof Date ? src_date\\n      : Array.isArray(b) ? src_array\\n      : typeof b.valueOf !== \"function\" && typeof b.toString !== \"function\" || isNaN(b) ? src_object\\n      : d3_interpolate_src_number)(a, b);\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-interpolate/src/round.js\\n/* harmony default export */ var src_round = (function(a, b) {\\n  return a = +a, b -= a, function(t) {\\n    return Math.round(a + b * t);\\n  };\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-interpolate/src/transform/decompose.js\\nvar degrees = 180 / Math.PI;\\n\\nvar decompose_identity = {\\n  translateX: 0,\\n  translateY: 0,\\n  rotate: 0,\\n  skewX: 0,\\n  scaleX: 1,\\n  scaleY: 1\\n};\\n\\n/* harmony default export */ var decompose = (function(a, b, c, d, e, f) {\\n  var scaleX, scaleY, skewX;\\n  if (scaleX = Math.sqrt(a * a + b * b)) a /= scaleX, b /= scaleX;\\n  if (skewX = a * c + b * d) c -= a * skewX, d -= b * skewX;\\n  if (scaleY = Math.sqrt(c * c + d * d)) c /= scaleY, d /= scaleY, skewX /= scaleY;\\n  if (a * d < b * c) a = -a, b = -b, skewX = -skewX, scaleX = -scaleX;\\n  return {\\n    translateX: e,\\n    translateY: f,\\n    rotate: Math.atan2(b, a) * degrees,\\n    skewX: Math.atan(skewX) * degrees,\\n    scaleX: scaleX,\\n    scaleY: scaleY\\n  };\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-interpolate/src/transform/parse.js\\n\\n\\nvar parse_cssNode,\\n    parse_cssRoot,\\n    parse_cssView,\\n    parse_svgNode;\\n\\nfunction parse_parseCss(value) {\\n  if (value === \"none\") return decompose_identity;\\n  if (!parse_cssNode) parse_cssNode = document.createElement(\"DIV\"), parse_cssRoot = document.documentElement, parse_cssView = document.defaultView;\\n  parse_cssNode.style.transform = value;\\n  value = parse_cssView.getComputedStyle(parse_cssRoot.appendChild(parse_cssNode), null).getPropertyValue(\"transform\");\\n  parse_cssRoot.removeChild(parse_cssNode);\\n  value = value.slice(7, -1).split(\",\");\\n  return decompose(+value[0], +value[1], +value[2], +value[3], +value[4], +value[5]);\\n}\\n\\nfunction parse_parseSvg(value) {\\n  if (value == null) return decompose_identity;\\n  if (!parse_svgNode) parse_svgNode = document.createElementNS(\"http://www.w3.org/2000/svg\", \"g\");\\n  parse_svgNode.setAttribute(\"transform\", value);\\n  if (!(value = parse_svgNode.transform.baseVal.consolidate())) return decompose_identity;\\n  value = value.matrix;\\n  return decompose(value.a, value.b, value.c, value.d, value.e, value.f);\\n}\\n\\n// CONCATENATED MODULE: ./node_modules/d3-interpolate/src/transform/index.js\\n\\n\\n\\nfunction transform_interpolateTransform(parse, pxComma, pxParen, degParen) {\\n\\n  function pop(s) {\\n    return s.length ? s.pop() + \" \" : \"\";\\n  }\\n\\n  function translate(xa, ya, xb, yb, s, q) {\\n    if (xa !== xb || ya !== yb) {\\n      var i = s.push(\"translate(\", null, pxComma, null, pxParen);\\n      q.push({i: i - 4, x: d3_interpolate_src_number(xa, xb)}, {i: i - 2, x: d3_interpolate_src_number(ya, yb)});\\n    } else if (xb || yb) {\\n      s.push(\"translate(\" + xb + pxComma + yb + pxParen);\\n    }\\n  }\\n\\n  function rotate(a, b, s, q) {\\n    if (a !== b) {\\n      if (a - b > 180) b += 360; else if (b - a > 180) a += 360; // shortest path\\n      q.push({i: s.push(pop(s) + \"rotate(\", null, degParen) - 2, x: d3_interpolate_src_number(a, b)});\\n    } else if (b) {\\n      s.push(pop(s) + \"rotate(\" + b + degParen);\\n    }\\n  }\\n\\n  function skewX(a, b, s, q) {\\n    if (a !== b) {\\n      q.push({i: s.push(pop(s) + \"skewX(\", null, degParen) - 2, x: d3_interpolate_src_number(a, b)});\\n    } else if (b) {\\n      s.push(pop(s) + \"skewX(\" + b + degParen);\\n    }\\n  }\\n\\n  function scale(xa, ya, xb, yb, s, q) {\\n    if (xa !== xb || ya !== yb) {\\n      var i = s.push(pop(s) + \"scale(\", null, \",\", null, \")\");\\n      q.push({i: i - 4, x: d3_interpolate_src_number(xa, xb)}, {i: i - 2, x: d3_interpolate_src_number(ya, yb)});\\n    } else if (xb !== 1 || yb !== 1) {\\n      s.push(pop(s) + \"scale(\" + xb + \",\" + yb + \")\");\\n    }\\n  }\\n\\n  return function(a, b) {\\n    var s = [], // string constants and placeholders\\n        q = []; // number interpolators\\n    a = parse(a), b = parse(b);\\n    translate(a.translateX, a.translateY, b.translateX, b.translateY, s, q);\\n    rotate(a.rotate, b.rotate, s, q);\\n    skewX(a.skewX, b.skewX, s, q);\\n    scale(a.scaleX, a.scaleY, b.scaleX, b.scaleY, s, q);\\n    a = b = null; // gc\\n    return function(t) {\\n      var i = -1, n = q.length, o;\\n      while (++i < n) s[(o = q[i]).i] = o.x(t);\\n      return s.join(\"\");\\n    };\\n  };\\n}\\n\\nvar transform_interpolateTransformCss = transform_interpolateTransform(parse_parseCss, \"px, \", \"px)\", \"deg)\");\\nvar transform_interpolateTransformSvg = transform_interpolateTransform(parse_parseSvg, \", \", \")\", \")\");\\n\\n// CONCATENATED MODULE: ./node_modules/d3-interpolate/src/zoom.js\\nvar rho = Math.SQRT2,\\n    rho2 = 2,\\n    rho4 = 4,\\n    zoom_epsilon2 = 1e-12;\\n\\nfunction zoom_cosh(x) {\\n  return ((x = Math.exp(x)) + 1 / x) / 2;\\n}\\n\\nfunction zoom_sinh(x) {\\n  return ((x = Math.exp(x)) - 1 / x) / 2;\\n}\\n\\nfunction tanh(x) {\\n  return ((x = Math.exp(2 * x)) - 1) / (x + 1);\\n}\\n\\n// p0 = [ux0, uy0, w0]\\n// p1 = [ux1, uy1, w1]\\n/* harmony default export */ var src_zoom = (function(p0, p1) {\\n  var ux0 = p0[0], uy0 = p0[1], w0 = p0[2],\\n      ux1 = p1[0], uy1 = p1[1], w1 = p1[2],\\n      dx = ux1 - ux0,\\n      dy = uy1 - uy0,\\n      d2 = dx * dx + dy * dy,\\n      i,\\n      S;\\n\\n  // Special case for u0 ≅ u1.\\n  if (d2 < zoom_epsilon2) {\\n    S = Math.log(w1 / w0) / rho;\\n    i = function(t) {\\n      return [\\n        ux0 + t * dx,\\n        uy0 + t * dy,\\n        w0 * Math.exp(rho * t * S)\\n      ];\\n    }\\n  }\\n\\n  // General case.\\n  else {\\n    var d1 = Math.sqrt(d2),\\n        b0 = (w1 * w1 - w0 * w0 + rho4 * d2) / (2 * w0 * rho2 * d1),\\n        b1 = (w1 * w1 - w0 * w0 - rho4 * d2) / (2 * w1 * rho2 * d1),\\n        r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0),\\n        r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);\\n    S = (r1 - r0) / rho;\\n    i = function(t) {\\n      var s = t * S,\\n          coshr0 = zoom_cosh(r0),\\n          u = w0 / (rho2 * d1) * (coshr0 * tanh(rho * s + r0) - zoom_sinh(r0));\\n      return [\\n        ux0 + u * dx,\\n        uy0 + u * dy,\\n        w0 * coshr0 / zoom_cosh(rho * s + r0)\\n      ];\\n    }\\n  }\\n\\n  i.duration = S * 1000;\\n\\n  return i;\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-interpolate/src/hsl.js\\n\\n\\n\\nfunction hsl_hsl(hue) {\\n  return function(start, end) {\\n    var h = hue((start = color_hsl(start)).h, (end = color_hsl(end)).h),\\n        s = color_nogamma(start.s, end.s),\\n        l = color_nogamma(start.l, end.l),\\n        opacity = color_nogamma(start.opacity, end.opacity);\\n    return function(t) {\\n      start.h = h(t);\\n      start.s = s(t);\\n      start.l = l(t);\\n      start.opacity = opacity(t);\\n      return start + \"\";\\n    };\\n  }\\n}\\n\\n/* harmony default export */ var src_hsl = (hsl_hsl(color_hue));\\nvar hsl_hslLong = hsl_hsl(color_nogamma);\\n\\n// CONCATENATED MODULE: ./node_modules/d3-interpolate/src/lab.js\\n\\n\\n\\nfunction src_lab_lab(start, end) {\\n  var l = color_nogamma((start = lab_lab(start)).l, (end = lab_lab(end)).l),\\n      a = color_nogamma(start.a, end.a),\\n      b = color_nogamma(start.b, end.b),\\n      opacity = color_nogamma(start.opacity, end.opacity);\\n  return function(t) {\\n    start.l = l(t);\\n    start.a = a(t);\\n    start.b = b(t);\\n    start.opacity = opacity(t);\\n    return start + \"\";\\n  };\\n}\\n\\n// CONCATENATED MODULE: ./node_modules/d3-interpolate/src/hcl.js\\n\\n\\n\\nfunction hcl_hcl(hue) {\\n  return function(start, end) {\\n    var h = hue((start = lab_hcl(start)).h, (end = lab_hcl(end)).h),\\n        c = color_nogamma(start.c, end.c),\\n        l = color_nogamma(start.l, end.l),\\n        opacity = color_nogamma(start.opacity, end.opacity);\\n    return function(t) {\\n      start.h = h(t);\\n      start.c = c(t);\\n      start.l = l(t);\\n      start.opacity = opacity(t);\\n      return start + \"\";\\n    };\\n  }\\n}\\n\\n/* harmony default export */ var src_hcl = (hcl_hcl(color_hue));\\nvar hcl_hclLong = hcl_hcl(color_nogamma);\\n\\n// CONCATENATED MODULE: ./node_modules/d3-interpolate/src/cubehelix.js\\n\\n\\n\\nfunction src_cubehelix_cubehelix(hue) {\\n  return (function cubehelixGamma(y) {\\n    y = +y;\\n\\n    function cubehelix(start, end) {\\n      var h = hue((start = cubehelix_cubehelix(start)).h, (end = cubehelix_cubehelix(end)).h),\\n          s = color_nogamma(start.s, end.s),\\n          l = color_nogamma(start.l, end.l),\\n          opacity = color_nogamma(start.opacity, end.opacity);\\n      return function(t) {\\n        start.h = h(t);\\n        start.s = s(t);\\n        start.l = l(Math.pow(t, y));\\n        start.opacity = opacity(t);\\n        return start + \"\";\\n      };\\n    }\\n\\n    cubehelix.gamma = cubehelixGamma;\\n\\n    return cubehelix;\\n  })(1);\\n}\\n\\n/* harmony default export */ var src_cubehelix = (src_cubehelix_cubehelix(color_hue));\\nvar cubehelix_cubehelixLong = src_cubehelix_cubehelix(color_nogamma);\\n\\n// CONCATENATED MODULE: ./node_modules/d3-interpolate/src/quantize.js\\n/* harmony default export */ var src_quantize = (function(interpolator, n) {\\n  var samples = new Array(n);\\n  for (var i = 0; i < n; ++i) samples[i] = interpolator(i / (n - 1));\\n  return samples;\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-interpolate/index.js\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n// CONCATENATED MODULE: ./node_modules/d3-timer/src/timer.js\\nvar timer_frame = 0, // is an animation frame pending?\\n    timer_timeout = 0, // is a timeout pending?\\n    timer_interval = 0, // are any timers active?\\n    pokeDelay = 1000, // how frequently we check for clock skew\\n    taskHead,\\n    taskTail,\\n    clockLast = 0,\\n    clockNow = 0,\\n    clockSkew = 0,\\n    clock = typeof performance === \"object\" && performance.now ? performance : Date,\\n    setFrame = typeof window === \"object\" && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : function(f) { setTimeout(f, 17); };\\n\\nfunction now() {\\n  return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);\\n}\\n\\nfunction clearNow() {\\n  clockNow = 0;\\n}\\n\\nfunction Timer() {\\n  this._call =\\n  this._time =\\n  this._next = null;\\n}\\n\\nTimer.prototype = timer.prototype = {\\n  constructor: Timer,\\n  restart: function(callback, delay, time) {\\n    if (typeof callback !== \"function\") throw new TypeError(\"callback is not a function\");\\n    time = (time == null ? now() : +time) + (delay == null ? 0 : +delay);\\n    if (!this._next && taskTail !== this) {\\n      if (taskTail) taskTail._next = this;\\n      else taskHead = this;\\n      taskTail = this;\\n    }\\n    this._call = callback;\\n    this._time = time;\\n    sleep();\\n  },\\n  stop: function() {\\n    if (this._call) {\\n      this._call = null;\\n      this._time = Infinity;\\n      sleep();\\n    }\\n  }\\n};\\n\\nfunction timer(callback, delay, time) {\\n  var t = new Timer;\\n  t.restart(callback, delay, time);\\n  return t;\\n}\\n\\nfunction timerFlush() {\\n  now(); // Get the current time, if not already set.\\n  ++timer_frame; // Pretend we’ve set an alarm, if we haven’t already.\\n  var t = taskHead, e;\\n  while (t) {\\n    if ((e = clockNow - t._time) >= 0) t._call.call(null, e);\\n    t = t._next;\\n  }\\n  --timer_frame;\\n}\\n\\nfunction wake() {\\n  clockNow = (clockLast = clock.now()) + clockSkew;\\n  timer_frame = timer_timeout = 0;\\n  try {\\n    timerFlush();\\n  } finally {\\n    timer_frame = 0;\\n    nap();\\n    clockNow = 0;\\n  }\\n}\\n\\nfunction timer_poke() {\\n  var now = clock.now(), delay = now - clockLast;\\n  if (delay > pokeDelay) clockSkew -= delay, clockLast = now;\\n}\\n\\nfunction nap() {\\n  var t0, t1 = taskHead, t2, time = Infinity;\\n  while (t1) {\\n    if (t1._call) {\\n      if (time > t1._time) time = t1._time;\\n      t0 = t1, t1 = t1._next;\\n    } else {\\n      t2 = t1._next, t1._next = null;\\n      t1 = t0 ? t0._next = t2 : taskHead = t2;\\n    }\\n  }\\n  taskTail = t0;\\n  sleep(time);\\n}\\n\\nfunction sleep(time) {\\n  if (timer_frame) return; // Soonest alarm already set, or will be.\\n  if (timer_timeout) timer_timeout = clearTimeout(timer_timeout);\\n  var delay = time - clockNow; // Strictly less than if we recomputed clockNow.\\n  if (delay > 24) {\\n    if (time < Infinity) timer_timeout = setTimeout(wake, time - clock.now() - clockSkew);\\n    if (timer_interval) timer_interval = clearInterval(timer_interval);\\n  } else {\\n    if (!timer_interval) clockLast = clock.now(), timer_interval = setInterval(timer_poke, pokeDelay);\\n    timer_frame = 1, setFrame(wake);\\n  }\\n}\\n\\n// CONCATENATED MODULE: ./node_modules/d3-timer/src/timeout.js\\n\\n\\n/* harmony default export */ var src_timeout = (function(callback, delay, time) {\\n  var t = new Timer;\\n  delay = delay == null ? 0 : +delay;\\n  t.restart(function(elapsed) {\\n    t.stop();\\n    callback(elapsed + delay);\\n  }, delay, time);\\n  return t;\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-timer/src/interval.js\\n\\n\\n/* harmony default export */ var src_interval = (function(callback, delay, time) {\\n  var t = new Timer, total = delay;\\n  if (delay == null) return t.restart(callback, delay, time), t;\\n  delay = +delay, time = time == null ? now() : +time;\\n  t.restart(function tick(elapsed) {\\n    elapsed += total;\\n    t.restart(tick, total += delay, time);\\n    callback(elapsed);\\n  }, delay, time);\\n  return t;\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-timer/index.js\\n\\n\\n\\n\\n\\n\\n// CONCATENATED MODULE: ./node_modules/d3-transition/src/transition/schedule.js\\n\\n\\n\\nvar schedule_emptyOn = src_dispatch(\"start\", \"end\", \"interrupt\");\\nvar schedule_emptyTween = [];\\n\\nvar schedule_CREATED = 0;\\nvar schedule_SCHEDULED = 1;\\nvar schedule_STARTING = 2;\\nvar schedule_STARTED = 3;\\nvar schedule_RUNNING = 4;\\nvar schedule_ENDING = 5;\\nvar schedule_ENDED = 6;\\n\\n/* harmony default export */ var transition_schedule = (function(node, name, id, index, group, timing) {\\n  var schedules = node.__transition;\\n  if (!schedules) node.__transition = {};\\n  else if (id in schedules) return;\\n  schedule_create(node, id, {\\n    name: name,\\n    index: index, // For context during callback.\\n    group: group, // For context during callback.\\n    on: schedule_emptyOn,\\n    tween: schedule_emptyTween,\\n    time: timing.time,\\n    delay: timing.delay,\\n    duration: timing.duration,\\n    ease: timing.ease,\\n    timer: null,\\n    state: schedule_CREATED\\n  });\\n});\\n\\nfunction schedule_init(node, id) {\\n  var schedule = schedule_get(node, id);\\n  if (schedule.state > schedule_CREATED) throw new Error(\"too late; already scheduled\");\\n  return schedule;\\n}\\n\\nfunction schedule_set(node, id) {\\n  var schedule = schedule_get(node, id);\\n  if (schedule.state > schedule_STARTING) throw new Error(\"too late; already started\");\\n  return schedule;\\n}\\n\\nfunction schedule_get(node, id) {\\n  var schedule = node.__transition;\\n  if (!schedule || !(schedule = schedule[id])) throw new Error(\"transition not found\");\\n  return schedule;\\n}\\n\\nfunction schedule_create(node, id, self) {\\n  var schedules = node.__transition,\\n      tween;\\n\\n  // Initialize the self timer when the transition is created.\\n  // Note the actual delay is not known until the first callback!\\n  schedules[id] = self;\\n  self.timer = timer(schedule, 0, self.time);\\n\\n  function schedule(elapsed) {\\n    self.state = schedule_SCHEDULED;\\n    self.timer.restart(start, self.delay, self.time);\\n\\n    // If the elapsed delay is less than our first sleep, start immediately.\\n    if (self.delay <= elapsed) start(elapsed - self.delay);\\n  }\\n\\n  function start(elapsed) {\\n    var i, j, n, o;\\n\\n    // If the state is not SCHEDULED, then we previously errored on start.\\n    if (self.state !== schedule_SCHEDULED) return stop();\\n\\n    for (i in schedules) {\\n      o = schedules[i];\\n      if (o.name !== self.name) continue;\\n\\n      // While this element already has a starting transition during this frame,\\n      // defer starting an interrupting transition until that transition has a\\n      // chance to tick (and possibly end); see d3/d3-transition#54!\\n      if (o.state === schedule_STARTED) return src_timeout(start);\\n\\n      // Interrupt the active transition, if any.\\n      // Dispatch the interrupt event.\\n      if (o.state === schedule_RUNNING) {\\n        o.state = schedule_ENDED;\\n        o.timer.stop();\\n        o.on.call(\"interrupt\", node, node.__data__, o.index, o.group);\\n        delete schedules[i];\\n      }\\n\\n      // Cancel any pre-empted transitions. No interrupt event is dispatched\\n      // because the cancelled transitions never started. Note that this also\\n      // removes this transition from the pending list!\\n      else if (+i < id) {\\n        o.state = schedule_ENDED;\\n        o.timer.stop();\\n        delete schedules[i];\\n      }\\n    }\\n\\n    // Defer the first tick to end of the current frame; see d3/d3#1576.\\n    // Note the transition may be canceled after start and before the first tick!\\n    // Note this must be scheduled before the start event; see d3/d3-transition#16!\\n    // Assuming this is successful, subsequent callbacks go straight to tick.\\n    src_timeout(function() {\\n      if (self.state === schedule_STARTED) {\\n        self.state = schedule_RUNNING;\\n        self.timer.restart(tick, self.delay, self.time);\\n        tick(elapsed);\\n      }\\n    });\\n\\n    // Dispatch the start event.\\n    // Note this must be done before the tween are initialized.\\n    self.state = schedule_STARTING;\\n    self.on.call(\"start\", node, node.__data__, self.index, self.group);\\n    if (self.state !== schedule_STARTING) return; // interrupted\\n    self.state = schedule_STARTED;\\n\\n    // Initialize the tween, deleting null tween.\\n    tween = new Array(n = self.tween.length);\\n    for (i = 0, j = -1; i < n; ++i) {\\n      if (o = self.tween[i].value.call(node, node.__data__, self.index, self.group)) {\\n        tween[++j] = o;\\n      }\\n    }\\n    tween.length = j + 1;\\n  }\\n\\n  function tick(elapsed) {\\n    var t = elapsed < self.duration ? self.ease.call(null, elapsed / self.duration) : (self.timer.restart(stop), self.state = schedule_ENDING, 1),\\n        i = -1,\\n        n = tween.length;\\n\\n    while (++i < n) {\\n      tween[i].call(null, t);\\n    }\\n\\n    // Dispatch the end event.\\n    if (self.state === schedule_ENDING) {\\n      self.on.call(\"end\", node, node.__data__, self.index, self.group);\\n      stop();\\n    }\\n  }\\n\\n  function stop() {\\n    self.state = schedule_ENDED;\\n    self.timer.stop();\\n    delete schedules[id];\\n    for (var i in schedules) return; // eslint-disable-line no-unused-vars\\n    delete node.__transition;\\n  }\\n}\\n\\n// CONCATENATED MODULE: ./node_modules/d3-transition/src/interrupt.js\\n\\n\\n/* harmony default export */ var interrupt = (function(node, name) {\\n  var schedules = node.__transition,\\n      schedule,\\n      active,\\n      empty = true,\\n      i;\\n\\n  if (!schedules) return;\\n\\n  name = name == null ? null : name + \"\";\\n\\n  for (i in schedules) {\\n    if ((schedule = schedules[i]).name !== name) { empty = false; continue; }\\n    active = schedule.state > schedule_STARTING && schedule.state < schedule_ENDING;\\n    schedule.state = schedule_ENDED;\\n    schedule.timer.stop();\\n    if (active) schedule.on.call(\"interrupt\", node, node.__data__, schedule.index, schedule.group);\\n    delete schedules[i];\\n  }\\n\\n  if (empty) delete node.__transition;\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-transition/src/selection/interrupt.js\\n\\n\\n/* harmony default export */ var selection_interrupt = (function(name) {\\n  return this.each(function() {\\n    interrupt(this, name);\\n  });\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-transition/src/transition/tween.js\\n\\n\\nfunction tween_tweenRemove(id, name) {\\n  var tween0, tween1;\\n  return function() {\\n    var schedule = schedule_set(this, id),\\n        tween = schedule.tween;\\n\\n    // If this node shared tween with the previous node,\\n    // just assign the updated shared tween and we’re done!\\n    // Otherwise, copy-on-write.\\n    if (tween !== tween0) {\\n      tween1 = tween0 = tween;\\n      for (var i = 0, n = tween1.length; i < n; ++i) {\\n        if (tween1[i].name === name) {\\n          tween1 = tween1.slice();\\n          tween1.splice(i, 1);\\n          break;\\n        }\\n      }\\n    }\\n\\n    schedule.tween = tween1;\\n  };\\n}\\n\\nfunction tween_tweenFunction(id, name, value) {\\n  var tween0, tween1;\\n  if (typeof value !== \"function\") throw new Error;\\n  return function() {\\n    var schedule = schedule_set(this, id),\\n        tween = schedule.tween;\\n\\n    // If this node shared tween with the previous node,\\n    // just assign the updated shared tween and we’re done!\\n    // Otherwise, copy-on-write.\\n    if (tween !== tween0) {\\n      tween1 = (tween0 = tween).slice();\\n      for (var t = {name: name, value: value}, i = 0, n = tween1.length; i < n; ++i) {\\n        if (tween1[i].name === name) {\\n          tween1[i] = t;\\n          break;\\n        }\\n      }\\n      if (i === n) tween1.push(t);\\n    }\\n\\n    schedule.tween = tween1;\\n  };\\n}\\n\\n/* harmony default export */ var transition_tween = (function(name, value) {\\n  var id = this._id;\\n\\n  name += \"\";\\n\\n  if (arguments.length < 2) {\\n    var tween = schedule_get(this.node(), id).tween;\\n    for (var i = 0, n = tween.length, t; i < n; ++i) {\\n      if ((t = tween[i]).name === name) {\\n        return t.value;\\n      }\\n    }\\n    return null;\\n  }\\n\\n  return this.each((value == null ? tween_tweenRemove : tween_tweenFunction)(id, name, value));\\n});\\n\\nfunction tween_tweenValue(transition, name, value) {\\n  var id = transition._id;\\n\\n  transition.each(function() {\\n    var schedule = schedule_set(this, id);\\n    (schedule.value || (schedule.value = {}))[name] = value.apply(this, arguments);\\n  });\\n\\n  return function(node) {\\n    return schedule_get(node, id).value[name];\\n  };\\n}\\n\\n// CONCATENATED MODULE: ./node_modules/d3-transition/src/transition/interpolate.js\\n\\n\\n\\n/* harmony default export */ var transition_interpolate = (function(a, b) {\\n  var c;\\n  return (typeof b === \"number\" ? d3_interpolate_src_number\\n      : b instanceof color_color ? src_rgb\\n      : (c = color_color(b)) ? (b = c, src_rgb)\\n      : src_string)(a, b);\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-transition/src/transition/attr.js\\n\\n\\n\\n\\n\\nfunction transition_attr_attrRemove(name) {\\n  return function() {\\n    this.removeAttribute(name);\\n  };\\n}\\n\\nfunction transition_attr_attrRemoveNS(fullname) {\\n  return function() {\\n    this.removeAttributeNS(fullname.space, fullname.local);\\n  };\\n}\\n\\nfunction transition_attr_attrConstant(name, interpolate, value1) {\\n  var value00,\\n      interpolate0;\\n  return function() {\\n    var value0 = this.getAttribute(name);\\n    return value0 === value1 ? null\\n        : value0 === value00 ? interpolate0\\n        : interpolate0 = interpolate(value00 = value0, value1);\\n  };\\n}\\n\\nfunction transition_attr_attrConstantNS(fullname, interpolate, value1) {\\n  var value00,\\n      interpolate0;\\n  return function() {\\n    var value0 = this.getAttributeNS(fullname.space, fullname.local);\\n    return value0 === value1 ? null\\n        : value0 === value00 ? interpolate0\\n        : interpolate0 = interpolate(value00 = value0, value1);\\n  };\\n}\\n\\nfunction transition_attr_attrFunction(name, interpolate, value) {\\n  var value00,\\n      value10,\\n      interpolate0;\\n  return function() {\\n    var value0, value1 = value(this);\\n    if (value1 == null) return void this.removeAttribute(name);\\n    value0 = this.getAttribute(name);\\n    return value0 === value1 ? null\\n        : value0 === value00 && value1 === value10 ? interpolate0\\n        : interpolate0 = interpolate(value00 = value0, value10 = value1);\\n  };\\n}\\n\\nfunction transition_attr_attrFunctionNS(fullname, interpolate, value) {\\n  var value00,\\n      value10,\\n      interpolate0;\\n  return function() {\\n    var value0, value1 = value(this);\\n    if (value1 == null) return void this.removeAttributeNS(fullname.space, fullname.local);\\n    value0 = this.getAttributeNS(fullname.space, fullname.local);\\n    return value0 === value1 ? null\\n        : value0 === value00 && value1 === value10 ? interpolate0\\n        : interpolate0 = interpolate(value00 = value0, value10 = value1);\\n  };\\n}\\n\\n/* harmony default export */ var transition_attr = (function(name, value) {\\n  var fullname = namespace(name), i = fullname === \"transform\" ? transform_interpolateTransformSvg : transition_interpolate;\\n  return this.attrTween(name, typeof value === \"function\"\\n      ? (fullname.local ? transition_attr_attrFunctionNS : transition_attr_attrFunction)(fullname, i, tween_tweenValue(this, \"attr.\" + name, value))\\n      : value == null ? (fullname.local ? transition_attr_attrRemoveNS : transition_attr_attrRemove)(fullname)\\n      : (fullname.local ? transition_attr_attrConstantNS : transition_attr_attrConstant)(fullname, i, value + \"\"));\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-transition/src/transition/attrTween.js\\n\\n\\nfunction attrTween_attrTweenNS(fullname, value) {\\n  function tween() {\\n    var node = this, i = value.apply(node, arguments);\\n    return i && function(t) {\\n      node.setAttributeNS(fullname.space, fullname.local, i(t));\\n    };\\n  }\\n  tween._value = value;\\n  return tween;\\n}\\n\\nfunction attrTween_attrTween(name, value) {\\n  function tween() {\\n    var node = this, i = value.apply(node, arguments);\\n    return i && function(t) {\\n      node.setAttribute(name, i(t));\\n    };\\n  }\\n  tween._value = value;\\n  return tween;\\n}\\n\\n/* harmony default export */ var transition_attrTween = (function(name, value) {\\n  var key = \"attr.\" + name;\\n  if (arguments.length < 2) return (key = this.tween(key)) && key._value;\\n  if (value == null) return this.tween(key, null);\\n  if (typeof value !== \"function\") throw new Error;\\n  var fullname = namespace(name);\\n  return this.tween(key, (fullname.local ? attrTween_attrTweenNS : attrTween_attrTween)(fullname, value));\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-transition/src/transition/delay.js\\n\\n\\nfunction delay_delayFunction(id, value) {\\n  return function() {\\n    schedule_init(this, id).delay = +value.apply(this, arguments);\\n  };\\n}\\n\\nfunction delay_delayConstant(id, value) {\\n  return value = +value, function() {\\n    schedule_init(this, id).delay = value;\\n  };\\n}\\n\\n/* harmony default export */ var transition_delay = (function(value) {\\n  var id = this._id;\\n\\n  return arguments.length\\n      ? this.each((typeof value === \"function\"\\n          ? delay_delayFunction\\n          : delay_delayConstant)(id, value))\\n      : schedule_get(this.node(), id).delay;\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-transition/src/transition/duration.js\\n\\n\\nfunction duration_durationFunction(id, value) {\\n  return function() {\\n    schedule_set(this, id).duration = +value.apply(this, arguments);\\n  };\\n}\\n\\nfunction duration_durationConstant(id, value) {\\n  return value = +value, function() {\\n    schedule_set(this, id).duration = value;\\n  };\\n}\\n\\n/* harmony default export */ var transition_duration = (function(value) {\\n  var id = this._id;\\n\\n  return arguments.length\\n      ? this.each((typeof value === \"function\"\\n          ? duration_durationFunction\\n          : duration_durationConstant)(id, value))\\n      : schedule_get(this.node(), id).duration;\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-transition/src/transition/ease.js\\n\\n\\nfunction ease_easeConstant(id, value) {\\n  if (typeof value !== \"function\") throw new Error;\\n  return function() {\\n    schedule_set(this, id).ease = value;\\n  };\\n}\\n\\n/* harmony default export */ var ease = (function(value) {\\n  var id = this._id;\\n\\n  return arguments.length\\n      ? this.each(ease_easeConstant(id, value))\\n      : schedule_get(this.node(), id).ease;\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-transition/src/transition/filter.js\\n\\n\\n\\n/* harmony default export */ var transition_filter = (function(match) {\\n  if (typeof match !== \"function\") match = src_matcher(match);\\n\\n  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {\\n    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {\\n      if ((node = group[i]) && match.call(node, node.__data__, i, group)) {\\n        subgroup.push(node);\\n      }\\n    }\\n  }\\n\\n  return new transition_Transition(subgroups, this._parents, this._name, this._id);\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-transition/src/transition/merge.js\\n\\n\\n/* harmony default export */ var transition_merge = (function(transition) {\\n  if (transition._id !== this._id) throw new Error;\\n\\n  for (var groups0 = this._groups, groups1 = transition._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {\\n    for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {\\n      if (node = group0[i] || group1[i]) {\\n        merge[i] = node;\\n      }\\n    }\\n  }\\n\\n  for (; j < m0; ++j) {\\n    merges[j] = groups0[j];\\n  }\\n\\n  return new transition_Transition(merges, this._parents, this._name, this._id);\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-transition/src/transition/on.js\\n\\n\\nfunction on_start(name) {\\n  return (name + \"\").trim().split(/^|\\\\s+/).every(function(t) {\\n    var i = t.indexOf(\".\");\\n    if (i >= 0) t = t.slice(0, i);\\n    return !t || t === \"start\";\\n  });\\n}\\n\\nfunction on_onFunction(id, name, listener) {\\n  var on0, on1, sit = on_start(name) ? schedule_init : schedule_set;\\n  return function() {\\n    var schedule = sit(this, id),\\n        on = schedule.on;\\n\\n    // If this node shared a dispatch with the previous node,\\n    // just assign the updated shared dispatch and we’re done!\\n    // Otherwise, copy-on-write.\\n    if (on !== on0) (on1 = (on0 = on).copy()).on(name, listener);\\n\\n    schedule.on = on1;\\n  };\\n}\\n\\n/* harmony default export */ var transition_on = (function(name, listener) {\\n  var id = this._id;\\n\\n  return arguments.length < 2\\n      ? schedule_get(this.node(), id).on.on(name)\\n      : this.each(on_onFunction(id, name, listener));\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-transition/src/transition/remove.js\\nfunction removeFunction(id) {\\n  return function() {\\n    var parent = this.parentNode;\\n    for (var i in this.__transition) if (+i !== id) return;\\n    if (parent) parent.removeChild(this);\\n  };\\n}\\n\\n/* harmony default export */ var transition_remove = (function() {\\n  return this.on(\"end.remove\", removeFunction(this._id));\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-transition/src/transition/select.js\\n\\n\\n\\n\\n/* harmony default export */ var transition_select = (function(select) {\\n  var name = this._name,\\n      id = this._id;\\n\\n  if (typeof select !== \"function\") select = src_selector(select);\\n\\n  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {\\n    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {\\n      if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {\\n        if (\"__data__\" in node) subnode.__data__ = node.__data__;\\n        subgroup[i] = subnode;\\n        transition_schedule(subgroup[i], name, id, i, subgroup, schedule_get(node, id));\\n      }\\n    }\\n  }\\n\\n  return new transition_Transition(subgroups, this._parents, name, id);\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-transition/src/transition/selectAll.js\\n\\n\\n\\n\\n/* harmony default export */ var transition_selectAll = (function(select) {\\n  var name = this._name,\\n      id = this._id;\\n\\n  if (typeof select !== \"function\") select = selectorAll(select);\\n\\n  for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {\\n    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {\\n      if (node = group[i]) {\\n        for (var children = select.call(node, node.__data__, i, group), child, inherit = schedule_get(node, id), k = 0, l = children.length; k < l; ++k) {\\n          if (child = children[k]) {\\n            transition_schedule(child, name, id, k, children, inherit);\\n          }\\n        }\\n        subgroups.push(children);\\n        parents.push(node);\\n      }\\n    }\\n  }\\n\\n  return new transition_Transition(subgroups, parents, name, id);\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-transition/src/transition/selection.js\\n\\n\\nvar transition_selection_Selection = src_selection.prototype.constructor;\\n\\n/* harmony default export */ var transition_selection = (function() {\\n  return new transition_selection_Selection(this._groups, this._parents);\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-transition/src/transition/style.js\\n\\n\\n\\n\\n\\nfunction transition_style_styleRemove(name, interpolate) {\\n  var value00,\\n      value10,\\n      interpolate0;\\n  return function() {\\n    var value0 = style_styleValue(this, name),\\n        value1 = (this.style.removeProperty(name), style_styleValue(this, name));\\n    return value0 === value1 ? null\\n        : value0 === value00 && value1 === value10 ? interpolate0\\n        : interpolate0 = interpolate(value00 = value0, value10 = value1);\\n  };\\n}\\n\\nfunction style_styleRemoveEnd(name) {\\n  return function() {\\n    this.style.removeProperty(name);\\n  };\\n}\\n\\nfunction transition_style_styleConstant(name, interpolate, value1) {\\n  var value00,\\n      interpolate0;\\n  return function() {\\n    var value0 = style_styleValue(this, name);\\n    return value0 === value1 ? null\\n        : value0 === value00 ? interpolate0\\n        : interpolate0 = interpolate(value00 = value0, value1);\\n  };\\n}\\n\\nfunction transition_style_styleFunction(name, interpolate, value) {\\n  var value00,\\n      value10,\\n      interpolate0;\\n  return function() {\\n    var value0 = style_styleValue(this, name),\\n        value1 = value(this);\\n    if (value1 == null) value1 = (this.style.removeProperty(name), style_styleValue(this, name));\\n    return value0 === value1 ? null\\n        : value0 === value00 && value1 === value10 ? interpolate0\\n        : interpolate0 = interpolate(value00 = value0, value10 = value1);\\n  };\\n}\\n\\n/* harmony default export */ var transition_style = (function(name, value, priority) {\\n  var i = (name += \"\") === \"transform\" ? transform_interpolateTransformCss : transition_interpolate;\\n  return value == null ? this\\n          .styleTween(name, transition_style_styleRemove(name, i))\\n          .on(\"end.style.\" + name, style_styleRemoveEnd(name))\\n      : this.styleTween(name, typeof value === \"function\"\\n          ? transition_style_styleFunction(name, i, tween_tweenValue(this, \"style.\" + name, value))\\n          : transition_style_styleConstant(name, i, value + \"\"), priority);\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-transition/src/transition/styleTween.js\\nfunction styleTween(name, value, priority) {\\n  function tween() {\\n    var node = this, i = value.apply(node, arguments);\\n    return i && function(t) {\\n      node.style.setProperty(name, i(t), priority);\\n    };\\n  }\\n  tween._value = value;\\n  return tween;\\n}\\n\\n/* harmony default export */ var transition_styleTween = (function(name, value, priority) {\\n  var key = \"style.\" + (name += \"\");\\n  if (arguments.length < 2) return (key = this.tween(key)) && key._value;\\n  if (value == null) return this.tween(key, null);\\n  if (typeof value !== \"function\") throw new Error;\\n  return this.tween(key, styleTween(name, value, priority == null ? \"\" : priority));\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-transition/src/transition/text.js\\n\\n\\nfunction transition_text_textConstant(value) {\\n  return function() {\\n    this.textContent = value;\\n  };\\n}\\n\\nfunction transition_text_textFunction(value) {\\n  return function() {\\n    var value1 = value(this);\\n    this.textContent = value1 == null ? \"\" : value1;\\n  };\\n}\\n\\n/* harmony default export */ var transition_text = (function(value) {\\n  return this.tween(\"text\", typeof value === \"function\"\\n      ? transition_text_textFunction(tween_tweenValue(this, \"text\", value))\\n      : transition_text_textConstant(value == null ? \"\" : value + \"\"));\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-transition/src/transition/transition.js\\n\\n\\n\\n/* harmony default export */ var transition_transition = (function() {\\n  var name = this._name,\\n      id0 = this._id,\\n      id1 = transition_newId();\\n\\n  for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {\\n    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {\\n      if (node = group[i]) {\\n        var inherit = schedule_get(node, id0);\\n        transition_schedule(node, name, id1, i, group, {\\n          time: inherit.time + inherit.delay + inherit.duration,\\n          delay: 0,\\n          duration: inherit.duration,\\n          ease: inherit.ease\\n        });\\n      }\\n    }\\n  }\\n\\n  return new transition_Transition(groups, this._parents, name, id1);\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-transition/src/transition/index.js\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nvar transition_id = 0;\\n\\nfunction transition_Transition(groups, parents, name, id) {\\n  this._groups = groups;\\n  this._parents = parents;\\n  this._name = name;\\n  this._id = id;\\n}\\n\\nfunction src_transition_transition(name) {\\n  return src_selection().transition(name);\\n}\\n\\nfunction transition_newId() {\\n  return ++transition_id;\\n}\\n\\nvar transition_selection_prototype = src_selection.prototype;\\n\\ntransition_Transition.prototype = src_transition_transition.prototype = {\\n  constructor: transition_Transition,\\n  select: transition_select,\\n  selectAll: transition_selectAll,\\n  filter: transition_filter,\\n  merge: transition_merge,\\n  selection: transition_selection,\\n  transition: transition_transition,\\n  call: transition_selection_prototype.call,\\n  nodes: transition_selection_prototype.nodes,\\n  node: transition_selection_prototype.node,\\n  size: transition_selection_prototype.size,\\n  empty: transition_selection_prototype.empty,\\n  each: transition_selection_prototype.each,\\n  on: transition_on,\\n  attr: transition_attr,\\n  attrTween: transition_attrTween,\\n  style: transition_style,\\n  styleTween: transition_styleTween,\\n  text: transition_text,\\n  remove: transition_remove,\\n  tween: transition_tween,\\n  delay: transition_delay,\\n  duration: transition_duration,\\n  ease: ease\\n};\\n\\n// CONCATENATED MODULE: ./node_modules/d3-ease/src/linear.js\\nfunction linear_linear(t) {\\n  return +t;\\n}\\n\\n// CONCATENATED MODULE: ./node_modules/d3-ease/src/quad.js\\nfunction quadIn(t) {\\n  return t * t;\\n}\\n\\nfunction quadOut(t) {\\n  return t * (2 - t);\\n}\\n\\nfunction quadInOut(t) {\\n  return ((t *= 2) <= 1 ? t * t : --t * (2 - t) + 1) / 2;\\n}\\n\\n// CONCATENATED MODULE: ./node_modules/d3-ease/src/cubic.js\\nfunction cubicIn(t) {\\n  return t * t * t;\\n}\\n\\nfunction cubicOut(t) {\\n  return --t * t * t + 1;\\n}\\n\\nfunction cubicInOut(t) {\\n  return ((t *= 2) <= 1 ? t * t * t : (t -= 2) * t * t + 2) / 2;\\n}\\n\\n// CONCATENATED MODULE: ./node_modules/d3-ease/src/poly.js\\nvar poly_exponent = 3;\\n\\nvar polyIn = (function custom(e) {\\n  e = +e;\\n\\n  function polyIn(t) {\\n    return Math.pow(t, e);\\n  }\\n\\n  polyIn.exponent = custom;\\n\\n  return polyIn;\\n})(poly_exponent);\\n\\nvar polyOut = (function custom(e) {\\n  e = +e;\\n\\n  function polyOut(t) {\\n    return 1 - Math.pow(1 - t, e);\\n  }\\n\\n  polyOut.exponent = custom;\\n\\n  return polyOut;\\n})(poly_exponent);\\n\\nvar polyInOut = (function custom(e) {\\n  e = +e;\\n\\n  function polyInOut(t) {\\n    return ((t *= 2) <= 1 ? Math.pow(t, e) : 2 - Math.pow(2 - t, e)) / 2;\\n  }\\n\\n  polyInOut.exponent = custom;\\n\\n  return polyInOut;\\n})(poly_exponent);\\n\\n// CONCATENATED MODULE: ./node_modules/d3-ease/src/sin.js\\nvar pi = Math.PI,\\n    halfPi = pi / 2;\\n\\nfunction sinIn(t) {\\n  return 1 - Math.cos(t * halfPi);\\n}\\n\\nfunction sinOut(t) {\\n  return Math.sin(t * halfPi);\\n}\\n\\nfunction sinInOut(t) {\\n  return (1 - Math.cos(pi * t)) / 2;\\n}\\n\\n// CONCATENATED MODULE: ./node_modules/d3-ease/src/exp.js\\nfunction expIn(t) {\\n  return Math.pow(2, 10 * t - 10);\\n}\\n\\nfunction expOut(t) {\\n  return 1 - Math.pow(2, -10 * t);\\n}\\n\\nfunction expInOut(t) {\\n  return ((t *= 2) <= 1 ? Math.pow(2, 10 * t - 10) : 2 - Math.pow(2, 10 - 10 * t)) / 2;\\n}\\n\\n// CONCATENATED MODULE: ./node_modules/d3-ease/src/circle.js\\nfunction circleIn(t) {\\n  return 1 - Math.sqrt(1 - t * t);\\n}\\n\\nfunction circleOut(t) {\\n  return Math.sqrt(1 - --t * t);\\n}\\n\\nfunction circleInOut(t) {\\n  return ((t *= 2) <= 1 ? 1 - Math.sqrt(1 - t * t) : Math.sqrt(1 - (t -= 2) * t) + 1) / 2;\\n}\\n\\n// CONCATENATED MODULE: ./node_modules/d3-ease/src/bounce.js\\nvar bounce_b1 = 4 / 11,\\n    b2 = 6 / 11,\\n    b3 = 8 / 11,\\n    b4 = 3 / 4,\\n    b5 = 9 / 11,\\n    b6 = 10 / 11,\\n    b7 = 15 / 16,\\n    b8 = 21 / 22,\\n    b9 = 63 / 64,\\n    bounce_b0 = 1 / bounce_b1 / bounce_b1;\\n\\nfunction bounceIn(t) {\\n  return 1 - bounceOut(1 - t);\\n}\\n\\nfunction bounceOut(t) {\\n  return (t = +t) < bounce_b1 ? bounce_b0 * t * t : t < b3 ? bounce_b0 * (t -= b2) * t + b4 : t < b6 ? bounce_b0 * (t -= b5) * t + b7 : bounce_b0 * (t -= b8) * t + b9;\\n}\\n\\nfunction bounceInOut(t) {\\n  return ((t *= 2) <= 1 ? 1 - bounceOut(1 - t) : bounceOut(t - 1) + 1) / 2;\\n}\\n\\n// CONCATENATED MODULE: ./node_modules/d3-ease/src/back.js\\nvar overshoot = 1.70158;\\n\\nvar backIn = (function custom(s) {\\n  s = +s;\\n\\n  function backIn(t) {\\n    return t * t * ((s + 1) * t - s);\\n  }\\n\\n  backIn.overshoot = custom;\\n\\n  return backIn;\\n})(overshoot);\\n\\nvar backOut = (function custom(s) {\\n  s = +s;\\n\\n  function backOut(t) {\\n    return --t * t * ((s + 1) * t + s) + 1;\\n  }\\n\\n  backOut.overshoot = custom;\\n\\n  return backOut;\\n})(overshoot);\\n\\nvar backInOut = (function custom(s) {\\n  s = +s;\\n\\n  function backInOut(t) {\\n    return ((t *= 2) < 1 ? t * t * ((s + 1) * t - s) : (t -= 2) * t * ((s + 1) * t + s) + 2) / 2;\\n  }\\n\\n  backInOut.overshoot = custom;\\n\\n  return backInOut;\\n})(overshoot);\\n\\n// CONCATENATED MODULE: ./node_modules/d3-ease/src/elastic.js\\nvar tau = 2 * Math.PI,\\n    amplitude = 1,\\n    period = 0.3;\\n\\nvar elasticIn = (function custom(a, p) {\\n  var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);\\n\\n  function elasticIn(t) {\\n    return a * Math.pow(2, 10 * --t) * Math.sin((s - t) / p);\\n  }\\n\\n  elasticIn.amplitude = function(a) { return custom(a, p * tau); };\\n  elasticIn.period = function(p) { return custom(a, p); };\\n\\n  return elasticIn;\\n})(amplitude, period);\\n\\nvar elasticOut = (function custom(a, p) {\\n  var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);\\n\\n  function elasticOut(t) {\\n    return 1 - a * Math.pow(2, -10 * (t = +t)) * Math.sin((t + s) / p);\\n  }\\n\\n  elasticOut.amplitude = function(a) { return custom(a, p * tau); };\\n  elasticOut.period = function(p) { return custom(a, p); };\\n\\n  return elasticOut;\\n})(amplitude, period);\\n\\nvar elasticInOut = (function custom(a, p) {\\n  var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);\\n\\n  function elasticInOut(t) {\\n    return ((t = t * 2 - 1) < 0\\n        ? a * Math.pow(2, 10 * t) * Math.sin((s - t) / p)\\n        : 2 - a * Math.pow(2, -10 * t) * Math.sin((s + t) / p)) / 2;\\n  }\\n\\n  elasticInOut.amplitude = function(a) { return custom(a, p * tau); };\\n  elasticInOut.period = function(p) { return custom(a, p); };\\n\\n  return elasticInOut;\\n})(amplitude, period);\\n\\n// CONCATENATED MODULE: ./node_modules/d3-ease/index.js\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n// CONCATENATED MODULE: ./node_modules/d3-transition/src/selection/transition.js\\n\\n\\n\\n\\n\\nvar transition_defaultTiming = {\\n  time: null, // Set on use.\\n  delay: 0,\\n  duration: 250,\\n  ease: cubicInOut\\n};\\n\\nfunction transition_inherit(node, id) {\\n  var timing;\\n  while (!(timing = node.__transition) || !(timing = timing[id])) {\\n    if (!(node = node.parentNode)) {\\n      return transition_defaultTiming.time = now(), transition_defaultTiming;\\n    }\\n  }\\n  return timing;\\n}\\n\\n/* harmony default export */ var selection_transition = (function(name) {\\n  var id,\\n      timing;\\n\\n  if (name instanceof transition_Transition) {\\n    id = name._id, name = name._name;\\n  } else {\\n    id = transition_newId(), (timing = transition_defaultTiming).time = now(), name = name == null ? null : name + \"\";\\n  }\\n\\n  for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {\\n    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {\\n      if (node = group[i]) {\\n        transition_schedule(node, name, id, i, group, timing || transition_inherit(node, id));\\n      }\\n    }\\n  }\\n\\n  return new transition_Transition(groups, this._parents, name, id);\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-transition/src/selection/index.js\\n\\n\\n\\n\\nsrc_selection.prototype.interrupt = selection_interrupt;\\nsrc_selection.prototype.transition = selection_transition;\\n\\n// CONCATENATED MODULE: ./node_modules/d3-transition/src/active.js\\n\\n\\n\\nvar active_root = [null];\\n\\n/* harmony default export */ var src_active = (function(node, name) {\\n  var schedules = node.__transition,\\n      schedule,\\n      i;\\n\\n  if (schedules) {\\n    name = name == null ? null : name + \"\";\\n    for (i in schedules) {\\n      if ((schedule = schedules[i]).state > schedule_SCHEDULED && schedule.name === name) {\\n        return new transition_Transition([[node]], active_root, name, +i);\\n      }\\n    }\\n  }\\n\\n  return null;\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-transition/index.js\\n\\n\\n\\n\\n\\n// CONCATENATED MODULE: ./node_modules/d3-brush/src/constant.js\\n/* harmony default export */ var d3_brush_src_constant = (function(x) {\\n  return function() {\\n    return x;\\n  };\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-brush/src/event.js\\n/* harmony default export */ var src_event = (function(target, type, selection) {\\n  this.target = target;\\n  this.type = type;\\n  this.selection = selection;\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-brush/src/noevent.js\\n\\n\\nfunction src_noevent_nopropagation() {\\n  on_event.stopImmediatePropagation();\\n}\\n\\n/* harmony default export */ var src_noevent = (function() {\\n  on_event.preventDefault();\\n  on_event.stopImmediatePropagation();\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-brush/src/brush.js\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nvar brush_MODE_DRAG = {name: \"drag\"},\\n    brush_MODE_SPACE = {name: \"space\"},\\n    brush_MODE_HANDLE = {name: \"handle\"},\\n    brush_MODE_CENTER = {name: \"center\"};\\n\\nvar brush_X = {\\n  name: \"x\",\\n  handles: [\"e\", \"w\"].map(brush_type),\\n  input: function(x, e) { return x && [[x[0], e[0][1]], [x[1], e[1][1]]]; },\\n  output: function(xy) { return xy && [xy[0][0], xy[1][0]]; }\\n};\\n\\nvar brush_Y = {\\n  name: \"y\",\\n  handles: [\"n\", \"s\"].map(brush_type),\\n  input: function(y, e) { return y && [[e[0][0], y[0]], [e[1][0], y[1]]]; },\\n  output: function(xy) { return xy && [xy[0][1], xy[1][1]]; }\\n};\\n\\nvar brush_XY = {\\n  name: \"xy\",\\n  handles: [\"n\", \"e\", \"s\", \"w\", \"nw\", \"ne\", \"se\", \"sw\"].map(brush_type),\\n  input: function(xy) { return xy; },\\n  output: function(xy) { return xy; }\\n};\\n\\nvar brush_cursors = {\\n  overlay: \"crosshair\",\\n  selection: \"move\",\\n  n: \"ns-resize\",\\n  e: \"ew-resize\",\\n  s: \"ns-resize\",\\n  w: \"ew-resize\",\\n  nw: \"nwse-resize\",\\n  ne: \"nesw-resize\",\\n  se: \"nwse-resize\",\\n  sw: \"nesw-resize\"\\n};\\n\\nvar brush_flipX = {\\n  e: \"w\",\\n  w: \"e\",\\n  nw: \"ne\",\\n  ne: \"nw\",\\n  se: \"sw\",\\n  sw: \"se\"\\n};\\n\\nvar brush_flipY = {\\n  n: \"s\",\\n  s: \"n\",\\n  nw: \"sw\",\\n  ne: \"se\",\\n  se: \"ne\",\\n  sw: \"nw\"\\n};\\n\\nvar brush_signsX = {\\n  overlay: +1,\\n  selection: +1,\\n  n: null,\\n  e: +1,\\n  s: null,\\n  w: -1,\\n  nw: -1,\\n  ne: +1,\\n  se: +1,\\n  sw: -1\\n};\\n\\nvar brush_signsY = {\\n  overlay: +1,\\n  selection: +1,\\n  n: -1,\\n  e: null,\\n  s: +1,\\n  w: null,\\n  nw: -1,\\n  ne: -1,\\n  se: +1,\\n  sw: +1\\n};\\n\\nfunction brush_type(t) {\\n  return {type: t};\\n}\\n\\n// Ignore right-click, since that should open the context menu.\\nfunction brush_defaultFilter() {\\n  return !on_event.button;\\n}\\n\\nfunction brush_defaultExtent() {\\n  var svg = this.ownerSVGElement || this;\\n  return [[0, 0], [svg.width.baseVal.value, svg.height.baseVal.value]];\\n}\\n\\n// Like d3.local, but with the name “__brush” rather than auto-generated.\\nfunction brush_local(node) {\\n  while (!node.__brush) if (!(node = node.parentNode)) return;\\n  return node.__brush;\\n}\\n\\nfunction brush_empty(extent) {\\n  return extent[0][0] === extent[1][0]\\n      || extent[0][1] === extent[1][1];\\n}\\n\\nfunction brush_brushSelection(node) {\\n  var state = node.__brush;\\n  return state ? state.dim.output(state.selection) : null;\\n}\\n\\nfunction brush_brushX() {\\n  return brush_brush(brush_X);\\n}\\n\\nfunction brush_brushY() {\\n  return brush_brush(brush_Y);\\n}\\n\\n/* harmony default export */ var src_brush = (function() {\\n  return brush_brush(brush_XY);\\n});\\n\\nfunction brush_brush(dim) {\\n  var extent = brush_defaultExtent,\\n      filter = brush_defaultFilter,\\n      listeners = src_dispatch(brush, \"start\", \"brush\", \"end\"),\\n      handleSize = 6,\\n      touchending;\\n\\n  function brush(group) {\\n    var overlay = group\\n        .property(\"__brush\", initialize)\\n      .selectAll(\".overlay\")\\n      .data([brush_type(\"overlay\")]);\\n\\n    overlay.enter().append(\"rect\")\\n        .attr(\"class\", \"overlay\")\\n        .attr(\"pointer-events\", \"all\")\\n        .attr(\"cursor\", brush_cursors.overlay)\\n      .merge(overlay)\\n        .each(function() {\\n          var extent = brush_local(this).extent;\\n          src_select(this)\\n              .attr(\"x\", extent[0][0])\\n              .attr(\"y\", extent[0][1])\\n              .attr(\"width\", extent[1][0] - extent[0][0])\\n              .attr(\"height\", extent[1][1] - extent[0][1]);\\n        });\\n\\n    group.selectAll(\".selection\")\\n      .data([brush_type(\"selection\")])\\n      .enter().append(\"rect\")\\n        .attr(\"class\", \"selection\")\\n        .attr(\"cursor\", brush_cursors.selection)\\n        .attr(\"fill\", \"#777\")\\n        .attr(\"fill-opacity\", 0.3)\\n        .attr(\"stroke\", \"#fff\")\\n        .attr(\"shape-rendering\", \"crispEdges\");\\n\\n    var handle = group.selectAll(\".handle\")\\n      .data(dim.handles, function(d) { return d.type; });\\n\\n    handle.exit().remove();\\n\\n    handle.enter().append(\"rect\")\\n        .attr(\"class\", function(d) { return \"handle handle--\" + d.type; })\\n        .attr(\"cursor\", function(d) { return brush_cursors[d.type]; });\\n\\n    group\\n        .each(redraw)\\n        .attr(\"fill\", \"none\")\\n        .attr(\"pointer-events\", \"all\")\\n        .style(\"-webkit-tap-highlight-color\", \"rgba(0,0,0,0)\")\\n        .on(\"mousedown.brush touchstart.brush\", started);\\n  }\\n\\n  brush.move = function(group, selection) {\\n    if (group.selection) {\\n      group\\n          .on(\"start.brush\", function() { emitter(this, arguments).beforestart().start(); })\\n          .on(\"interrupt.brush end.brush\", function() { emitter(this, arguments).end(); })\\n          .tween(\"brush\", function() {\\n            var that = this,\\n                state = that.__brush,\\n                emit = emitter(that, arguments),\\n                selection0 = state.selection,\\n                selection1 = dim.input(typeof selection === \"function\" ? selection.apply(this, arguments) : selection, state.extent),\\n                i = src_value(selection0, selection1);\\n\\n            function tween(t) {\\n              state.selection = t === 1 && brush_empty(selection1) ? null : i(t);\\n              redraw.call(that);\\n              emit.brush();\\n            }\\n\\n            return selection0 && selection1 ? tween : tween(1);\\n          });\\n    } else {\\n      group\\n          .each(function() {\\n            var that = this,\\n                args = arguments,\\n                state = that.__brush,\\n                selection1 = dim.input(typeof selection === \"function\" ? selection.apply(that, args) : selection, state.extent),\\n                emit = emitter(that, args).beforestart();\\n\\n            interrupt(that);\\n            state.selection = selection1 == null || brush_empty(selection1) ? null : selection1;\\n            redraw.call(that);\\n            emit.start().brush().end();\\n          });\\n    }\\n  };\\n\\n  function redraw() {\\n    var group = src_select(this),\\n        selection = brush_local(this).selection;\\n\\n    if (selection) {\\n      group.selectAll(\".selection\")\\n          .style(\"display\", null)\\n          .attr(\"x\", selection[0][0])\\n          .attr(\"y\", selection[0][1])\\n          .attr(\"width\", selection[1][0] - selection[0][0])\\n          .attr(\"height\", selection[1][1] - selection[0][1]);\\n\\n      group.selectAll(\".handle\")\\n          .style(\"display\", null)\\n          .attr(\"x\", function(d) { return d.type[d.type.length - 1] === \"e\" ? selection[1][0] - handleSize / 2 : selection[0][0] - handleSize / 2; })\\n          .attr(\"y\", function(d) { return d.type[0] === \"s\" ? selection[1][1] - handleSize / 2 : selection[0][1] - handleSize / 2; })\\n          .attr(\"width\", function(d) { return d.type === \"n\" || d.type === \"s\" ? selection[1][0] - selection[0][0] + handleSize : handleSize; })\\n          .attr(\"height\", function(d) { return d.type === \"e\" || d.type === \"w\" ? selection[1][1] - selection[0][1] + handleSize : handleSize; });\\n    }\\n\\n    else {\\n      group.selectAll(\".selection,.handle\")\\n          .style(\"display\", \"none\")\\n          .attr(\"x\", null)\\n          .attr(\"y\", null)\\n          .attr(\"width\", null)\\n          .attr(\"height\", null);\\n    }\\n  }\\n\\n  function emitter(that, args) {\\n    return that.__brush.emitter || new Emitter(that, args);\\n  }\\n\\n  function Emitter(that, args) {\\n    this.that = that;\\n    this.args = args;\\n    this.state = that.__brush;\\n    this.active = 0;\\n  }\\n\\n  Emitter.prototype = {\\n    beforestart: function() {\\n      if (++this.active === 1) this.state.emitter = this, this.starting = true;\\n      return this;\\n    },\\n    start: function() {\\n      if (this.starting) this.starting = false, this.emit(\"start\");\\n      return this;\\n    },\\n    brush: function() {\\n      this.emit(\"brush\");\\n      return this;\\n    },\\n    end: function() {\\n      if (--this.active === 0) delete this.state.emitter, this.emit(\"end\");\\n      return this;\\n    },\\n    emit: function(type) {\\n      customEvent(new src_event(brush, type, dim.output(this.state.selection)), listeners.apply, listeners, [type, this.that, this.args]);\\n    }\\n  };\\n\\n  function started() {\\n    if (on_event.touches) { if (on_event.changedTouches.length < on_event.touches.length) return src_noevent(); }\\n    else if (touchending) return;\\n    if (!filter.apply(this, arguments)) return;\\n\\n    var that = this,\\n        type = on_event.target.__data__.type,\\n        mode = (on_event.metaKey ? type = \"overlay\" : type) === \"selection\" ? brush_MODE_DRAG : (on_event.altKey ? brush_MODE_CENTER : brush_MODE_HANDLE),\\n        signX = dim === brush_Y ? null : brush_signsX[type],\\n        signY = dim === brush_X ? null : brush_signsY[type],\\n        state = brush_local(that),\\n        extent = state.extent,\\n        selection = state.selection,\\n        W = extent[0][0], w0, w1,\\n        N = extent[0][1], n0, n1,\\n        E = extent[1][0], e0, e1,\\n        S = extent[1][1], s0, s1,\\n        dx,\\n        dy,\\n        moving,\\n        shifting = signX && signY && on_event.shiftKey,\\n        lockX,\\n        lockY,\\n        point0 = mouse(that),\\n        point = point0,\\n        emit = emitter(that, arguments).beforestart();\\n\\n    if (type === \"overlay\") {\\n      state.selection = selection = [\\n        [w0 = dim === brush_Y ? W : point0[0], n0 = dim === brush_X ? N : point0[1]],\\n        [e0 = dim === brush_Y ? E : w0, s0 = dim === brush_X ? S : n0]\\n      ];\\n    } else {\\n      w0 = selection[0][0];\\n      n0 = selection[0][1];\\n      e0 = selection[1][0];\\n      s0 = selection[1][1];\\n    }\\n\\n    w1 = w0;\\n    n1 = n0;\\n    e1 = e0;\\n    s1 = s0;\\n\\n    var group = src_select(that)\\n        .attr(\"pointer-events\", \"none\");\\n\\n    var overlay = group.selectAll(\".overlay\")\\n        .attr(\"cursor\", brush_cursors[type]);\\n\\n    if (on_event.touches) {\\n      group\\n          .on(\"touchmove.brush\", moved, true)\\n          .on(\"touchend.brush touchcancel.brush\", ended, true);\\n    } else {\\n      var view = src_select(on_event.view)\\n          .on(\"keydown.brush\", keydowned, true)\\n          .on(\"keyup.brush\", keyupped, true)\\n          .on(\"mousemove.brush\", moved, true)\\n          .on(\"mouseup.brush\", ended, true);\\n\\n      nodrag(on_event.view);\\n    }\\n\\n    src_noevent_nopropagation();\\n    interrupt(that);\\n    redraw.call(that);\\n    emit.start();\\n\\n    function moved() {\\n      var point1 = mouse(that);\\n      if (shifting && !lockX && !lockY) {\\n        if (Math.abs(point1[0] - point[0]) > Math.abs(point1[1] - point[1])) lockY = true;\\n        else lockX = true;\\n      }\\n      point = point1;\\n      moving = true;\\n      src_noevent();\\n      move();\\n    }\\n\\n    function move() {\\n      var t;\\n\\n      dx = point[0] - point0[0];\\n      dy = point[1] - point0[1];\\n\\n      switch (mode) {\\n        case brush_MODE_SPACE:\\n        case brush_MODE_DRAG: {\\n          if (signX) dx = Math.max(W - w0, Math.min(E - e0, dx)), w1 = w0 + dx, e1 = e0 + dx;\\n          if (signY) dy = Math.max(N - n0, Math.min(S - s0, dy)), n1 = n0 + dy, s1 = s0 + dy;\\n          break;\\n        }\\n        case brush_MODE_HANDLE: {\\n          if (signX < 0) dx = Math.max(W - w0, Math.min(E - w0, dx)), w1 = w0 + dx, e1 = e0;\\n          else if (signX > 0) dx = Math.max(W - e0, Math.min(E - e0, dx)), w1 = w0, e1 = e0 + dx;\\n          if (signY < 0) dy = Math.max(N - n0, Math.min(S - n0, dy)), n1 = n0 + dy, s1 = s0;\\n          else if (signY > 0) dy = Math.max(N - s0, Math.min(S - s0, dy)), n1 = n0, s1 = s0 + dy;\\n          break;\\n        }\\n        case brush_MODE_CENTER: {\\n          if (signX) w1 = Math.max(W, Math.min(E, w0 - dx * signX)), e1 = Math.max(W, Math.min(E, e0 + dx * signX));\\n          if (signY) n1 = Math.max(N, Math.min(S, n0 - dy * signY)), s1 = Math.max(N, Math.min(S, s0 + dy * signY));\\n          break;\\n        }\\n      }\\n\\n      if (e1 < w1) {\\n        signX *= -1;\\n        t = w0, w0 = e0, e0 = t;\\n        t = w1, w1 = e1, e1 = t;\\n        if (type in brush_flipX) overlay.attr(\"cursor\", brush_cursors[type = brush_flipX[type]]);\\n      }\\n\\n      if (s1 < n1) {\\n        signY *= -1;\\n        t = n0, n0 = s0, s0 = t;\\n        t = n1, n1 = s1, s1 = t;\\n        if (type in brush_flipY) overlay.attr(\"cursor\", brush_cursors[type = brush_flipY[type]]);\\n      }\\n\\n      if (state.selection) selection = state.selection; // May be set by brush.move!\\n      if (lockX) w1 = selection[0][0], e1 = selection[1][0];\\n      if (lockY) n1 = selection[0][1], s1 = selection[1][1];\\n\\n      if (selection[0][0] !== w1\\n          || selection[0][1] !== n1\\n          || selection[1][0] !== e1\\n          || selection[1][1] !== s1) {\\n        state.selection = [[w1, n1], [e1, s1]];\\n        redraw.call(that);\\n        emit.brush();\\n      }\\n    }\\n\\n    function ended() {\\n      src_noevent_nopropagation();\\n      if (on_event.touches) {\\n        if (on_event.touches.length) return;\\n        if (touchending) clearTimeout(touchending);\\n        touchending = setTimeout(function() { touchending = null; }, 500); // Ghost clicks are delayed!\\n        group.on(\"touchmove.brush touchend.brush touchcancel.brush\", null);\\n      } else {\\n        nodrag_yesdrag(on_event.view, moving);\\n        view.on(\"keydown.brush keyup.brush mousemove.brush mouseup.brush\", null);\\n      }\\n      group.attr(\"pointer-events\", \"all\");\\n      overlay.attr(\"cursor\", brush_cursors.overlay);\\n      if (state.selection) selection = state.selection; // May be set by brush.move (on start)!\\n      if (brush_empty(selection)) state.selection = null, redraw.call(that);\\n      emit.end();\\n    }\\n\\n    function keydowned() {\\n      switch (on_event.keyCode) {\\n        case 16: { // SHIFT\\n          shifting = signX && signY;\\n          break;\\n        }\\n        case 18: { // ALT\\n          if (mode === brush_MODE_HANDLE) {\\n            if (signX) e0 = e1 - dx * signX, w0 = w1 + dx * signX;\\n            if (signY) s0 = s1 - dy * signY, n0 = n1 + dy * signY;\\n            mode = brush_MODE_CENTER;\\n            move();\\n          }\\n          break;\\n        }\\n        case 32: { // SPACE; takes priority over ALT\\n          if (mode === brush_MODE_HANDLE || mode === brush_MODE_CENTER) {\\n            if (signX < 0) e0 = e1 - dx; else if (signX > 0) w0 = w1 - dx;\\n            if (signY < 0) s0 = s1 - dy; else if (signY > 0) n0 = n1 - dy;\\n            mode = brush_MODE_SPACE;\\n            overlay.attr(\"cursor\", brush_cursors.selection);\\n            move();\\n          }\\n          break;\\n        }\\n        default: return;\\n      }\\n      src_noevent();\\n    }\\n\\n    function keyupped() {\\n      switch (on_event.keyCode) {\\n        case 16: { // SHIFT\\n          if (shifting) {\\n            lockX = lockY = shifting = false;\\n            move();\\n          }\\n          break;\\n        }\\n        case 18: { // ALT\\n          if (mode === brush_MODE_CENTER) {\\n            if (signX < 0) e0 = e1; else if (signX > 0) w0 = w1;\\n            if (signY < 0) s0 = s1; else if (signY > 0) n0 = n1;\\n            mode = brush_MODE_HANDLE;\\n            move();\\n          }\\n          break;\\n        }\\n        case 32: { // SPACE\\n          if (mode === brush_MODE_SPACE) {\\n            if (on_event.altKey) {\\n              if (signX) e0 = e1 - dx * signX, w0 = w1 + dx * signX;\\n              if (signY) s0 = s1 - dy * signY, n0 = n1 + dy * signY;\\n              mode = brush_MODE_CENTER;\\n            } else {\\n              if (signX < 0) e0 = e1; else if (signX > 0) w0 = w1;\\n              if (signY < 0) s0 = s1; else if (signY > 0) n0 = n1;\\n              mode = brush_MODE_HANDLE;\\n            }\\n            overlay.attr(\"cursor\", brush_cursors[type]);\\n            move();\\n          }\\n          break;\\n        }\\n        default: return;\\n      }\\n      src_noevent();\\n    }\\n  }\\n\\n  function initialize() {\\n    var state = this.__brush || {selection: null};\\n    state.extent = extent.apply(this, arguments);\\n    state.dim = dim;\\n    return state;\\n  }\\n\\n  brush.extent = function(_) {\\n    return arguments.length ? (extent = typeof _ === \"function\" ? _ : d3_brush_src_constant([[+_[0][0], +_[0][1]], [+_[1][0], +_[1][1]]]), brush) : extent;\\n  };\\n\\n  brush.filter = function(_) {\\n    return arguments.length ? (filter = typeof _ === \"function\" ? _ : d3_brush_src_constant(!!_), brush) : filter;\\n  };\\n\\n  brush.handleSize = function(_) {\\n    return arguments.length ? (handleSize = +_, brush) : handleSize;\\n  };\\n\\n  brush.on = function() {\\n    var value = listeners.on.apply(listeners, arguments);\\n    return value === listeners ? brush : value;\\n  };\\n\\n  return brush;\\n}\\n\\n// CONCATENATED MODULE: ./node_modules/d3-brush/index.js\\n\\n\\n// CONCATENATED MODULE: ./node_modules/d3-chord/src/math.js\\nvar cos = Math.cos;\\nvar sin = Math.sin;\\nvar math_pi = Math.PI;\\nvar math_halfPi = math_pi / 2;\\nvar math_tau = math_pi * 2;\\nvar math_max = Math.max;\\n\\n// CONCATENATED MODULE: ./node_modules/d3-chord/src/chord.js\\n\\n\\n\\nfunction chord_compareValue(compare) {\\n  return function(a, b) {\\n    return compare(\\n      a.source.value + a.target.value,\\n      b.source.value + b.target.value\\n    );\\n  };\\n}\\n\\n/* harmony default export */ var src_chord = (function() {\\n  var padAngle = 0,\\n      sortGroups = null,\\n      sortSubgroups = null,\\n      sortChords = null;\\n\\n  function chord(matrix) {\\n    var n = matrix.length,\\n        groupSums = [],\\n        groupIndex = src_range(n),\\n        subgroupIndex = [],\\n        chords = [],\\n        groups = chords.groups = new Array(n),\\n        subgroups = new Array(n * n),\\n        k,\\n        x,\\n        x0,\\n        dx,\\n        i,\\n        j;\\n\\n    // Compute the sum.\\n    k = 0, i = -1; while (++i < n) {\\n      x = 0, j = -1; while (++j < n) {\\n        x += matrix[i][j];\\n      }\\n      groupSums.push(x);\\n      subgroupIndex.push(src_range(n));\\n      k += x;\\n    }\\n\\n    // Sort groups…\\n    if (sortGroups) groupIndex.sort(function(a, b) {\\n      return sortGroups(groupSums[a], groupSums[b]);\\n    });\\n\\n    // Sort subgroups…\\n    if (sortSubgroups) subgroupIndex.forEach(function(d, i) {\\n      d.sort(function(a, b) {\\n        return sortSubgroups(matrix[i][a], matrix[i][b]);\\n      });\\n    });\\n\\n    // Convert the sum to scaling factor for [0, 2pi].\\n    // TODO Allow start and end angle to be specified?\\n    // TODO Allow padding to be specified as percentage?\\n    k = math_max(0, math_tau - padAngle * n) / k;\\n    dx = k ? padAngle : math_tau / n;\\n\\n    // Compute the start and end angle for each group and subgroup.\\n    // Note: Opera has a bug reordering object literal properties!\\n    x = 0, i = -1; while (++i < n) {\\n      x0 = x, j = -1; while (++j < n) {\\n        var di = groupIndex[i],\\n            dj = subgroupIndex[di][j],\\n            v = matrix[di][dj],\\n            a0 = x,\\n            a1 = x += v * k;\\n        subgroups[dj * n + di] = {\\n          index: di,\\n          subindex: dj,\\n          startAngle: a0,\\n          endAngle: a1,\\n          value: v\\n        };\\n      }\\n      groups[di] = {\\n        index: di,\\n        startAngle: x0,\\n        endAngle: x,\\n        value: groupSums[di]\\n      };\\n      x += dx;\\n    }\\n\\n    // Generate chords for each (non-empty) subgroup-subgroup link.\\n    i = -1; while (++i < n) {\\n      j = i - 1; while (++j < n) {\\n        var source = subgroups[j * n + i],\\n            target = subgroups[i * n + j];\\n        if (source.value || target.value) {\\n          chords.push(source.value < target.value\\n              ? {source: target, target: source}\\n              : {source: source, target: target});\\n        }\\n      }\\n    }\\n\\n    return sortChords ? chords.sort(sortChords) : chords;\\n  }\\n\\n  chord.padAngle = function(_) {\\n    return arguments.length ? (padAngle = math_max(0, _), chord) : padAngle;\\n  };\\n\\n  chord.sortGroups = function(_) {\\n    return arguments.length ? (sortGroups = _, chord) : sortGroups;\\n  };\\n\\n  chord.sortSubgroups = function(_) {\\n    return arguments.length ? (sortSubgroups = _, chord) : sortSubgroups;\\n  };\\n\\n  chord.sortChords = function(_) {\\n    return arguments.length ? (_ == null ? sortChords = null : (sortChords = chord_compareValue(_))._ = _, chord) : sortChords && sortChords._;\\n  };\\n\\n  return chord;\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-chord/src/array.js\\nvar src_array_slice = Array.prototype.slice;\\n\\n// CONCATENATED MODULE: ./node_modules/d3-chord/src/constant.js\\n/* harmony default export */ var d3_chord_src_constant = (function(x) {\\n  return function() {\\n    return x;\\n  };\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-path/src/path.js\\nvar path_pi = Math.PI,\\n    path_tau = 2 * path_pi,\\n    path_epsilon = 1e-6,\\n    tauEpsilon = path_tau - path_epsilon;\\n\\nfunction Path() {\\n  this._x0 = this._y0 = // start of current subpath\\n  this._x1 = this._y1 = null; // end of current subpath\\n  this._ = \"\";\\n}\\n\\nfunction path_path() {\\n  return new Path;\\n}\\n\\nPath.prototype = path_path.prototype = {\\n  constructor: Path,\\n  moveTo: function(x, y) {\\n    this._ += \"M\" + (this._x0 = this._x1 = +x) + \",\" + (this._y0 = this._y1 = +y);\\n  },\\n  closePath: function() {\\n    if (this._x1 !== null) {\\n      this._x1 = this._x0, this._y1 = this._y0;\\n      this._ += \"Z\";\\n    }\\n  },\\n  lineTo: function(x, y) {\\n    this._ += \"L\" + (this._x1 = +x) + \",\" + (this._y1 = +y);\\n  },\\n  quadraticCurveTo: function(x1, y1, x, y) {\\n    this._ += \"Q\" + (+x1) + \",\" + (+y1) + \",\" + (this._x1 = +x) + \",\" + (this._y1 = +y);\\n  },\\n  bezierCurveTo: function(x1, y1, x2, y2, x, y) {\\n    this._ += \"C\" + (+x1) + \",\" + (+y1) + \",\" + (+x2) + \",\" + (+y2) + \",\" + (this._x1 = +x) + \",\" + (this._y1 = +y);\\n  },\\n  arcTo: function(x1, y1, x2, y2, r) {\\n    x1 = +x1, y1 = +y1, x2 = +x2, y2 = +y2, r = +r;\\n    var x0 = this._x1,\\n        y0 = this._y1,\\n        x21 = x2 - x1,\\n        y21 = y2 - y1,\\n        x01 = x0 - x1,\\n        y01 = y0 - y1,\\n        l01_2 = x01 * x01 + y01 * y01;\\n\\n    // Is the radius negative? Error.\\n    if (r < 0) throw new Error(\"negative radius: \" + r);\\n\\n    // Is this path empty? Move to (x1,y1).\\n    if (this._x1 === null) {\\n      this._ += \"M\" + (this._x1 = x1) + \",\" + (this._y1 = y1);\\n    }\\n\\n    // Or, is (x1,y1) coincident with (x0,y0)? Do nothing.\\n    else if (!(l01_2 > path_epsilon)) {}\\n\\n    // Or, are (x0,y0), (x1,y1) and (x2,y2) collinear?\\n    // Equivalently, is (x1,y1) coincident with (x2,y2)?\\n    // Or, is the radius zero? Line to (x1,y1).\\n    else if (!(Math.abs(y01 * x21 - y21 * x01) > path_epsilon) || !r) {\\n      this._ += \"L\" + (this._x1 = x1) + \",\" + (this._y1 = y1);\\n    }\\n\\n    // Otherwise, draw an arc!\\n    else {\\n      var x20 = x2 - x0,\\n          y20 = y2 - y0,\\n          l21_2 = x21 * x21 + y21 * y21,\\n          l20_2 = x20 * x20 + y20 * y20,\\n          l21 = Math.sqrt(l21_2),\\n          l01 = Math.sqrt(l01_2),\\n          l = r * Math.tan((path_pi - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2),\\n          t01 = l / l01,\\n          t21 = l / l21;\\n\\n      // If the start tangent is not coincident with (x0,y0), line to.\\n      if (Math.abs(t01 - 1) > path_epsilon) {\\n        this._ += \"L\" + (x1 + t01 * x01) + \",\" + (y1 + t01 * y01);\\n      }\\n\\n      this._ += \"A\" + r + \",\" + r + \",0,0,\" + (+(y01 * x20 > x01 * y20)) + \",\" + (this._x1 = x1 + t21 * x21) + \",\" + (this._y1 = y1 + t21 * y21);\\n    }\\n  },\\n  arc: function(x, y, r, a0, a1, ccw) {\\n    x = +x, y = +y, r = +r;\\n    var dx = r * Math.cos(a0),\\n        dy = r * Math.sin(a0),\\n        x0 = x + dx,\\n        y0 = y + dy,\\n        cw = 1 ^ ccw,\\n        da = ccw ? a0 - a1 : a1 - a0;\\n\\n    // Is the radius negative? Error.\\n    if (r < 0) throw new Error(\"negative radius: \" + r);\\n\\n    // Is this path empty? Move to (x0,y0).\\n    if (this._x1 === null) {\\n      this._ += \"M\" + x0 + \",\" + y0;\\n    }\\n\\n    // Or, is (x0,y0) not coincident with the previous point? Line to (x0,y0).\\n    else if (Math.abs(this._x1 - x0) > path_epsilon || Math.abs(this._y1 - y0) > path_epsilon) {\\n      this._ += \"L\" + x0 + \",\" + y0;\\n    }\\n\\n    // Is this arc empty? We’re done.\\n    if (!r) return;\\n\\n    // Does the angle go the wrong way? Flip the direction.\\n    if (da < 0) da = da % path_tau + path_tau;\\n\\n    // Is this a complete circle? Draw two arcs to complete the circle.\\n    if (da > tauEpsilon) {\\n      this._ += \"A\" + r + \",\" + r + \",0,1,\" + cw + \",\" + (x - dx) + \",\" + (y - dy) + \"A\" + r + \",\" + r + \",0,1,\" + cw + \",\" + (this._x1 = x0) + \",\" + (this._y1 = y0);\\n    }\\n\\n    // Is this arc non-empty? Draw an arc!\\n    else if (da > path_epsilon) {\\n      this._ += \"A\" + r + \",\" + r + \",0,\" + (+(da >= path_pi)) + \",\" + cw + \",\" + (this._x1 = x + r * Math.cos(a1)) + \",\" + (this._y1 = y + r * Math.sin(a1));\\n    }\\n  },\\n  rect: function(x, y, w, h) {\\n    this._ += \"M\" + (this._x0 = this._x1 = +x) + \",\" + (this._y0 = this._y1 = +y) + \"h\" + (+w) + \"v\" + (+h) + \"h\" + (-w) + \"Z\";\\n  },\\n  toString: function() {\\n    return this._;\\n  }\\n};\\n\\n/* harmony default export */ var src_path = (path_path);\\n\\n// CONCATENATED MODULE: ./node_modules/d3-path/index.js\\n\\n\\n// CONCATENATED MODULE: ./node_modules/d3-chord/src/ribbon.js\\n\\n\\n\\n\\n\\nfunction ribbon_defaultSource(d) {\\n  return d.source;\\n}\\n\\nfunction ribbon_defaultTarget(d) {\\n  return d.target;\\n}\\n\\nfunction ribbon_defaultRadius(d) {\\n  return d.radius;\\n}\\n\\nfunction ribbon_defaultStartAngle(d) {\\n  return d.startAngle;\\n}\\n\\nfunction ribbon_defaultEndAngle(d) {\\n  return d.endAngle;\\n}\\n\\n/* harmony default export */ var src_ribbon = (function() {\\n  var source = ribbon_defaultSource,\\n      target = ribbon_defaultTarget,\\n      radius = ribbon_defaultRadius,\\n      startAngle = ribbon_defaultStartAngle,\\n      endAngle = ribbon_defaultEndAngle,\\n      context = null;\\n\\n  function ribbon() {\\n    var buffer,\\n        argv = src_array_slice.call(arguments),\\n        s = source.apply(this, argv),\\n        t = target.apply(this, argv),\\n        sr = +radius.apply(this, (argv[0] = s, argv)),\\n        sa0 = startAngle.apply(this, argv) - math_halfPi,\\n        sa1 = endAngle.apply(this, argv) - math_halfPi,\\n        sx0 = sr * cos(sa0),\\n        sy0 = sr * sin(sa0),\\n        tr = +radius.apply(this, (argv[0] = t, argv)),\\n        ta0 = startAngle.apply(this, argv) - math_halfPi,\\n        ta1 = endAngle.apply(this, argv) - math_halfPi;\\n\\n    if (!context) context = buffer = src_path();\\n\\n    context.moveTo(sx0, sy0);\\n    context.arc(0, 0, sr, sa0, sa1);\\n    if (sa0 !== ta0 || sa1 !== ta1) { // TODO sr !== tr?\\n      context.quadraticCurveTo(0, 0, tr * cos(ta0), tr * sin(ta0));\\n      context.arc(0, 0, tr, ta0, ta1);\\n    }\\n    context.quadraticCurveTo(0, 0, sx0, sy0);\\n    context.closePath();\\n\\n    if (buffer) return context = null, buffer + \"\" || null;\\n  }\\n\\n  ribbon.radius = function(_) {\\n    return arguments.length ? (radius = typeof _ === \"function\" ? _ : d3_chord_src_constant(+_), ribbon) : radius;\\n  };\\n\\n  ribbon.startAngle = function(_) {\\n    return arguments.length ? (startAngle = typeof _ === \"function\" ? _ : d3_chord_src_constant(+_), ribbon) : startAngle;\\n  };\\n\\n  ribbon.endAngle = function(_) {\\n    return arguments.length ? (endAngle = typeof _ === \"function\" ? _ : d3_chord_src_constant(+_), ribbon) : endAngle;\\n  };\\n\\n  ribbon.source = function(_) {\\n    return arguments.length ? (source = _, ribbon) : source;\\n  };\\n\\n  ribbon.target = function(_) {\\n    return arguments.length ? (target = _, ribbon) : target;\\n  };\\n\\n  ribbon.context = function(_) {\\n    return arguments.length ? ((context = _ == null ? null : _), ribbon) : context;\\n  };\\n\\n  return ribbon;\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-chord/index.js\\n\\n\\n\\n// CONCATENATED MODULE: ./node_modules/d3-collection/src/map.js\\nvar map_prefix = \"$\";\\n\\nfunction Map() {}\\n\\nMap.prototype = map_map.prototype = {\\n  constructor: Map,\\n  has: function(key) {\\n    return (map_prefix + key) in this;\\n  },\\n  get: function(key) {\\n    return this[map_prefix + key];\\n  },\\n  set: function(key, value) {\\n    this[map_prefix + key] = value;\\n    return this;\\n  },\\n  remove: function(key) {\\n    var property = map_prefix + key;\\n    return property in this && delete this[property];\\n  },\\n  clear: function() {\\n    for (var property in this) if (property[0] === map_prefix) delete this[property];\\n  },\\n  keys: function() {\\n    var keys = [];\\n    for (var property in this) if (property[0] === map_prefix) keys.push(property.slice(1));\\n    return keys;\\n  },\\n  values: function() {\\n    var values = [];\\n    for (var property in this) if (property[0] === map_prefix) values.push(this[property]);\\n    return values;\\n  },\\n  entries: function() {\\n    var entries = [];\\n    for (var property in this) if (property[0] === map_prefix) entries.push({key: property.slice(1), value: this[property]});\\n    return entries;\\n  },\\n  size: function() {\\n    var size = 0;\\n    for (var property in this) if (property[0] === map_prefix) ++size;\\n    return size;\\n  },\\n  empty: function() {\\n    for (var property in this) if (property[0] === map_prefix) return false;\\n    return true;\\n  },\\n  each: function(f) {\\n    for (var property in this) if (property[0] === map_prefix) f(this[property], property.slice(1), this);\\n  }\\n};\\n\\nfunction map_map(object, f) {\\n  var map = new Map;\\n\\n  // Copy constructor.\\n  if (object instanceof Map) object.each(function(value, key) { map.set(key, value); });\\n\\n  // Index array by numeric index or specified key function.\\n  else if (Array.isArray(object)) {\\n    var i = -1,\\n        n = object.length,\\n        o;\\n\\n    if (f == null) while (++i < n) map.set(i, object[i]);\\n    else while (++i < n) map.set(f(o = object[i], i, object), o);\\n  }\\n\\n  // Convert object to map.\\n  else if (object) for (var key in object) map.set(key, object[key]);\\n\\n  return map;\\n}\\n\\n/* harmony default export */ var src_map = (map_map);\\n\\n// CONCATENATED MODULE: ./node_modules/d3-collection/src/nest.js\\n\\n\\n/* harmony default export */ var src_nest = (function() {\\n  var keys = [],\\n      sortKeys = [],\\n      sortValues,\\n      rollup,\\n      nest;\\n\\n  function apply(array, depth, createResult, setResult) {\\n    if (depth >= keys.length) {\\n      if (sortValues != null) array.sort(sortValues);\\n      return rollup != null ? rollup(array) : array;\\n    }\\n\\n    var i = -1,\\n        n = array.length,\\n        key = keys[depth++],\\n        keyValue,\\n        value,\\n        valuesByKey = src_map(),\\n        values,\\n        result = createResult();\\n\\n    while (++i < n) {\\n      if (values = valuesByKey.get(keyValue = key(value = array[i]) + \"\")) {\\n        values.push(value);\\n      } else {\\n        valuesByKey.set(keyValue, [value]);\\n      }\\n    }\\n\\n    valuesByKey.each(function(values, key) {\\n      setResult(result, key, apply(values, depth, createResult, setResult));\\n    });\\n\\n    return result;\\n  }\\n\\n  function entries(map, depth) {\\n    if (++depth > keys.length) return map;\\n    var array, sortKey = sortKeys[depth - 1];\\n    if (rollup != null && depth >= keys.length) array = map.entries();\\n    else array = [], map.each(function(v, k) { array.push({key: k, values: entries(v, depth)}); });\\n    return sortKey != null ? array.sort(function(a, b) { return sortKey(a.key, b.key); }) : array;\\n  }\\n\\n  return nest = {\\n    object: function(array) { return apply(array, 0, nest_createObject, nest_setObject); },\\n    map: function(array) { return apply(array, 0, nest_createMap, nest_setMap); },\\n    entries: function(array) { return entries(apply(array, 0, nest_createMap, nest_setMap), 0); },\\n    key: function(d) { keys.push(d); return nest; },\\n    sortKeys: function(order) { sortKeys[keys.length - 1] = order; return nest; },\\n    sortValues: function(order) { sortValues = order; return nest; },\\n    rollup: function(f) { rollup = f; return nest; }\\n  };\\n});\\n\\nfunction nest_createObject() {\\n  return {};\\n}\\n\\nfunction nest_setObject(object, key, value) {\\n  object[key] = value;\\n}\\n\\nfunction nest_createMap() {\\n  return src_map();\\n}\\n\\nfunction nest_setMap(map, key, value) {\\n  map.set(key, value);\\n}\\n\\n// CONCATENATED MODULE: ./node_modules/d3-collection/src/set.js\\n\\n\\nfunction set_Set() {}\\n\\nvar set_proto = src_map.prototype;\\n\\nset_Set.prototype = set_set.prototype = {\\n  constructor: set_Set,\\n  has: set_proto.has,\\n  add: function(value) {\\n    value += \"\";\\n    this[map_prefix + value] = value;\\n    return this;\\n  },\\n  remove: set_proto.remove,\\n  clear: set_proto.clear,\\n  values: set_proto.keys,\\n  size: set_proto.size,\\n  empty: set_proto.empty,\\n  each: set_proto.each\\n};\\n\\nfunction set_set(object, f) {\\n  var set = new set_Set;\\n\\n  // Copy constructor.\\n  if (object instanceof set_Set) object.each(function(value) { set.add(value); });\\n\\n  // Otherwise, assume it’s an array.\\n  else if (object) {\\n    var i = -1, n = object.length;\\n    if (f == null) while (++i < n) set.add(object[i]);\\n    else while (++i < n) set.add(f(object[i], i, object));\\n  }\\n\\n  return set;\\n}\\n\\n/* harmony default export */ var src_set = (set_set);\\n\\n// CONCATENATED MODULE: ./node_modules/d3-collection/src/keys.js\\n/* harmony default export */ var src_keys = (function(map) {\\n  var keys = [];\\n  for (var key in map) keys.push(key);\\n  return keys;\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-collection/src/values.js\\n/* harmony default export */ var src_values = (function(map) {\\n  var values = [];\\n  for (var key in map) values.push(map[key]);\\n  return values;\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-collection/src/entries.js\\n/* harmony default export */ var src_entries = (function(map) {\\n  var entries = [];\\n  for (var key in map) entries.push({key: key, value: map[key]});\\n  return entries;\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-collection/index.js\\n\\n\\n\\n\\n\\n\\n\\n// CONCATENATED MODULE: ./node_modules/d3-dsv/src/dsv.js\\nvar EOL = {},\\n    EOF = {},\\n    QUOTE = 34,\\n    NEWLINE = 10,\\n    RETURN = 13;\\n\\nfunction objectConverter(columns) {\\n  return new Function(\"d\", \"return {\" + columns.map(function(name, i) {\\n    return JSON.stringify(name) + \": d[\" + i + \"]\";\\n  }).join(\",\") + \"}\");\\n}\\n\\nfunction customConverter(columns, f) {\\n  var object = objectConverter(columns);\\n  return function(row, i) {\\n    return f(object(row), i, columns);\\n  };\\n}\\n\\n// Compute unique columns in order of discovery.\\nfunction inferColumns(rows) {\\n  var columnSet = Object.create(null),\\n      columns = [];\\n\\n  rows.forEach(function(row) {\\n    for (var column in row) {\\n      if (!(column in columnSet)) {\\n        columns.push(columnSet[column] = column);\\n      }\\n    }\\n  });\\n\\n  return columns;\\n}\\n\\n/* harmony default export */ var dsv = (function(delimiter) {\\n  var reFormat = new RegExp(\"[\\\\\"\" + delimiter + \"\\\\n\\\\r]\"),\\n      DELIMITER = delimiter.charCodeAt(0);\\n\\n  function parse(text, f) {\\n    var convert, columns, rows = parseRows(text, function(row, i) {\\n      if (convert) return convert(row, i - 1);\\n      columns = row, convert = f ? customConverter(row, f) : objectConverter(row);\\n    });\\n    rows.columns = columns || [];\\n    return rows;\\n  }\\n\\n  function parseRows(text, f) {\\n    var rows = [], // output rows\\n        N = text.length,\\n        I = 0, // current character index\\n        n = 0, // current line number\\n        t, // current token\\n        eof = N <= 0, // current token followed by EOF?\\n        eol = false; // current token followed by EOL?\\n\\n    // Strip the trailing newline.\\n    if (text.charCodeAt(N - 1) === NEWLINE) --N;\\n    if (text.charCodeAt(N - 1) === RETURN) --N;\\n\\n    function token() {\\n      if (eof) return EOF;\\n      if (eol) return eol = false, EOL;\\n\\n      // Unescape quotes.\\n      var i, j = I, c;\\n      if (text.charCodeAt(j) === QUOTE) {\\n        while (I++ < N && text.charCodeAt(I) !== QUOTE || text.charCodeAt(++I) === QUOTE);\\n        if ((i = I) >= N) eof = true;\\n        else if ((c = text.charCodeAt(I++)) === NEWLINE) eol = true;\\n        else if (c === RETURN) { eol = true; if (text.charCodeAt(I) === NEWLINE) ++I; }\\n        return text.slice(j + 1, i - 1).replace(/\"\"/g, \"\\\\\"\");\\n      }\\n\\n      // Find next delimiter or newline.\\n      while (I < N) {\\n        if ((c = text.charCodeAt(i = I++)) === NEWLINE) eol = true;\\n        else if (c === RETURN) { eol = true; if (text.charCodeAt(I) === NEWLINE) ++I; }\\n        else if (c !== DELIMITER) continue;\\n        return text.slice(j, i);\\n      }\\n\\n      // Return last token before EOF.\\n      return eof = true, text.slice(j, N);\\n    }\\n\\n    while ((t = token()) !== EOF) {\\n      var row = [];\\n      while (t !== EOL && t !== EOF) row.push(t), t = token();\\n      if (f && (row = f(row, n++)) == null) continue;\\n      rows.push(row);\\n    }\\n\\n    return rows;\\n  }\\n\\n  function format(rows, columns) {\\n    if (columns == null) columns = inferColumns(rows);\\n    return [columns.map(formatValue).join(delimiter)].concat(rows.map(function(row) {\\n      return columns.map(function(column) {\\n        return formatValue(row[column]);\\n      }).join(delimiter);\\n    })).join(\"\\\\n\");\\n  }\\n\\n  function formatRows(rows) {\\n    return rows.map(formatRow).join(\"\\\\n\");\\n  }\\n\\n  function formatRow(row) {\\n    return row.map(formatValue).join(delimiter);\\n  }\\n\\n  function formatValue(text) {\\n    return text == null ? \"\"\\n        : reFormat.test(text += \"\") ? \"\\\\\"\" + text.replace(/\"/g, \"\\\\\"\\\\\"\") + \"\\\\\"\"\\n        : text;\\n  }\\n\\n  return {\\n    parse: parse,\\n    parseRows: parseRows,\\n    format: format,\\n    formatRows: formatRows\\n  };\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-dsv/src/csv.js\\n\\n\\nvar csv_csv = dsv(\",\");\\n\\nvar csv_csvParse = csv_csv.parse;\\nvar csv_csvParseRows = csv_csv.parseRows;\\nvar csv_csvFormat = csv_csv.format;\\nvar csv_csvFormatRows = csv_csv.formatRows;\\n\\n// CONCATENATED MODULE: ./node_modules/d3-dsv/src/tsv.js\\n\\n\\nvar tsv_tsv = dsv(\"\\\\t\");\\n\\nvar tsv_tsvParse = tsv_tsv.parse;\\nvar tsv_tsvParseRows = tsv_tsv.parseRows;\\nvar tsv_tsvFormat = tsv_tsv.format;\\nvar tsv_tsvFormatRows = tsv_tsv.formatRows;\\n\\n// CONCATENATED MODULE: ./node_modules/d3-dsv/index.js\\n\\n\\n\\n\\n// CONCATENATED MODULE: ./node_modules/d3-force/src/center.js\\n/* harmony default export */ var src_center = (function(x, y) {\\n  var nodes;\\n\\n  if (x == null) x = 0;\\n  if (y == null) y = 0;\\n\\n  function force() {\\n    var i,\\n        n = nodes.length,\\n        node,\\n        sx = 0,\\n        sy = 0;\\n\\n    for (i = 0; i < n; ++i) {\\n      node = nodes[i], sx += node.x, sy += node.y;\\n    }\\n\\n    for (sx = sx / n - x, sy = sy / n - y, i = 0; i < n; ++i) {\\n      node = nodes[i], node.x -= sx, node.y -= sy;\\n    }\\n  }\\n\\n  force.initialize = function(_) {\\n    nodes = _;\\n  };\\n\\n  force.x = function(_) {\\n    return arguments.length ? (x = +_, force) : x;\\n  };\\n\\n  force.y = function(_) {\\n    return arguments.length ? (y = +_, force) : y;\\n  };\\n\\n  return force;\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-force/src/constant.js\\n/* harmony default export */ var d3_force_src_constant = (function(x) {\\n  return function() {\\n    return x;\\n  };\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-force/src/jiggle.js\\n/* harmony default export */ var jiggle = (function() {\\n  return (Math.random() - 0.5) * 1e-6;\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-quadtree/src/add.js\\n/* harmony default export */ var src_add = (function(d) {\\n  var x = +this._x.call(null, d),\\n      y = +this._y.call(null, d);\\n  return add(this.cover(x, y), x, y, d);\\n});\\n\\nfunction add(tree, x, y, d) {\\n  if (isNaN(x) || isNaN(y)) return tree; // ignore invalid points\\n\\n  var parent,\\n      node = tree._root,\\n      leaf = {data: d},\\n      x0 = tree._x0,\\n      y0 = tree._y0,\\n      x1 = tree._x1,\\n      y1 = tree._y1,\\n      xm,\\n      ym,\\n      xp,\\n      yp,\\n      right,\\n      bottom,\\n      i,\\n      j;\\n\\n  // If the tree is empty, initialize the root as a leaf.\\n  if (!node) return tree._root = leaf, tree;\\n\\n  // Find the existing leaf for the new point, or add it.\\n  while (node.length) {\\n    if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;\\n    if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;\\n    if (parent = node, !(node = node[i = bottom << 1 | right])) return parent[i] = leaf, tree;\\n  }\\n\\n  // Is the new point is exactly coincident with the existing point?\\n  xp = +tree._x.call(null, node.data);\\n  yp = +tree._y.call(null, node.data);\\n  if (x === xp && y === yp) return leaf.next = node, parent ? parent[i] = leaf : tree._root = leaf, tree;\\n\\n  // Otherwise, split the leaf node until the old and new point are separated.\\n  do {\\n    parent = parent ? parent[i] = new Array(4) : tree._root = new Array(4);\\n    if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;\\n    if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;\\n  } while ((i = bottom << 1 | right) === (j = (yp >= ym) << 1 | (xp >= xm)));\\n  return parent[j] = node, parent[i] = leaf, tree;\\n}\\n\\nfunction addAll(data) {\\n  var d, i, n = data.length,\\n      x,\\n      y,\\n      xz = new Array(n),\\n      yz = new Array(n),\\n      x0 = Infinity,\\n      y0 = Infinity,\\n      x1 = -Infinity,\\n      y1 = -Infinity;\\n\\n  // Compute the points and their extent.\\n  for (i = 0; i < n; ++i) {\\n    if (isNaN(x = +this._x.call(null, d = data[i])) || isNaN(y = +this._y.call(null, d))) continue;\\n    xz[i] = x;\\n    yz[i] = y;\\n    if (x < x0) x0 = x;\\n    if (x > x1) x1 = x;\\n    if (y < y0) y0 = y;\\n    if (y > y1) y1 = y;\\n  }\\n\\n  // If there were no (valid) points, inherit the existing extent.\\n  if (x1 < x0) x0 = this._x0, x1 = this._x1;\\n  if (y1 < y0) y0 = this._y0, y1 = this._y1;\\n\\n  // Expand the tree to cover the new points.\\n  this.cover(x0, y0).cover(x1, y1);\\n\\n  // Add the new points.\\n  for (i = 0; i < n; ++i) {\\n    add(this, xz[i], yz[i], data[i]);\\n  }\\n\\n  return this;\\n}\\n\\n// CONCATENATED MODULE: ./node_modules/d3-quadtree/src/cover.js\\n/* harmony default export */ var src_cover = (function(x, y) {\\n  if (isNaN(x = +x) || isNaN(y = +y)) return this; // ignore invalid points\\n\\n  var x0 = this._x0,\\n      y0 = this._y0,\\n      x1 = this._x1,\\n      y1 = this._y1;\\n\\n  // If the quadtree has no extent, initialize them.\\n  // Integer extent are necessary so that if we later double the extent,\\n  // the existing quadrant boundaries don’t change due to floating point error!\\n  if (isNaN(x0)) {\\n    x1 = (x0 = Math.floor(x)) + 1;\\n    y1 = (y0 = Math.floor(y)) + 1;\\n  }\\n\\n  // Otherwise, double repeatedly to cover.\\n  else if (x0 > x || x > x1 || y0 > y || y > y1) {\\n    var z = x1 - x0,\\n        node = this._root,\\n        parent,\\n        i;\\n\\n    switch (i = (y < (y0 + y1) / 2) << 1 | (x < (x0 + x1) / 2)) {\\n      case 0: {\\n        do parent = new Array(4), parent[i] = node, node = parent;\\n        while (z *= 2, x1 = x0 + z, y1 = y0 + z, x > x1 || y > y1);\\n        break;\\n      }\\n      case 1: {\\n        do parent = new Array(4), parent[i] = node, node = parent;\\n        while (z *= 2, x0 = x1 - z, y1 = y0 + z, x0 > x || y > y1);\\n        break;\\n      }\\n      case 2: {\\n        do parent = new Array(4), parent[i] = node, node = parent;\\n        while (z *= 2, x1 = x0 + z, y0 = y1 - z, x > x1 || y0 > y);\\n        break;\\n      }\\n      case 3: {\\n        do parent = new Array(4), parent[i] = node, node = parent;\\n        while (z *= 2, x0 = x1 - z, y0 = y1 - z, x0 > x || y0 > y);\\n        break;\\n      }\\n    }\\n\\n    if (this._root && this._root.length) this._root = node;\\n  }\\n\\n  // If the quadtree covers the point already, just return.\\n  else return this;\\n\\n  this._x0 = x0;\\n  this._y0 = y0;\\n  this._x1 = x1;\\n  this._y1 = y1;\\n  return this;\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-quadtree/src/data.js\\n/* harmony default export */ var src_data = (function() {\\n  var data = [];\\n  this.visit(function(node) {\\n    if (!node.length) do data.push(node.data); while (node = node.next)\\n  });\\n  return data;\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-quadtree/src/extent.js\\n/* harmony default export */ var d3_quadtree_src_extent = (function(_) {\\n  return arguments.length\\n      ? this.cover(+_[0][0], +_[0][1]).cover(+_[1][0], +_[1][1])\\n      : isNaN(this._x0) ? undefined : [[this._x0, this._y0], [this._x1, this._y1]];\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-quadtree/src/quad.js\\n/* harmony default export */ var src_quad = (function(node, x0, y0, x1, y1) {\\n  this.node = node;\\n  this.x0 = x0;\\n  this.y0 = y0;\\n  this.x1 = x1;\\n  this.y1 = y1;\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-quadtree/src/find.js\\n\\n\\n/* harmony default export */ var src_find = (function(x, y, radius) {\\n  var data,\\n      x0 = this._x0,\\n      y0 = this._y0,\\n      x1,\\n      y1,\\n      x2,\\n      y2,\\n      x3 = this._x1,\\n      y3 = this._y1,\\n      quads = [],\\n      node = this._root,\\n      q,\\n      i;\\n\\n  if (node) quads.push(new src_quad(node, x0, y0, x3, y3));\\n  if (radius == null) radius = Infinity;\\n  else {\\n    x0 = x - radius, y0 = y - radius;\\n    x3 = x + radius, y3 = y + radius;\\n    radius *= radius;\\n  }\\n\\n  while (q = quads.pop()) {\\n\\n    // Stop searching if this quadrant can’t contain a closer node.\\n    if (!(node = q.node)\\n        || (x1 = q.x0) > x3\\n        || (y1 = q.y0) > y3\\n        || (x2 = q.x1) < x0\\n        || (y2 = q.y1) < y0) continue;\\n\\n    // Bisect the current quadrant.\\n    if (node.length) {\\n      var xm = (x1 + x2) / 2,\\n          ym = (y1 + y2) / 2;\\n\\n      quads.push(\\n        new src_quad(node[3], xm, ym, x2, y2),\\n        new src_quad(node[2], x1, ym, xm, y2),\\n        new src_quad(node[1], xm, y1, x2, ym),\\n        new src_quad(node[0], x1, y1, xm, ym)\\n      );\\n\\n      // Visit the closest quadrant first.\\n      if (i = (y >= ym) << 1 | (x >= xm)) {\\n        q = quads[quads.length - 1];\\n        quads[quads.length - 1] = quads[quads.length - 1 - i];\\n        quads[quads.length - 1 - i] = q;\\n      }\\n    }\\n\\n    // Visit this point. (Visiting coincident points isn’t necessary!)\\n    else {\\n      var dx = x - +this._x.call(null, node.data),\\n          dy = y - +this._y.call(null, node.data),\\n          d2 = dx * dx + dy * dy;\\n      if (d2 < radius) {\\n        var d = Math.sqrt(radius = d2);\\n        x0 = x - d, y0 = y - d;\\n        x3 = x + d, y3 = y + d;\\n        data = node.data;\\n      }\\n    }\\n  }\\n\\n  return data;\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-quadtree/src/remove.js\\n/* harmony default export */ var src_remove = (function(d) {\\n  if (isNaN(x = +this._x.call(null, d)) || isNaN(y = +this._y.call(null, d))) return this; // ignore invalid points\\n\\n  var parent,\\n      node = this._root,\\n      retainer,\\n      previous,\\n      next,\\n      x0 = this._x0,\\n      y0 = this._y0,\\n      x1 = this._x1,\\n      y1 = this._y1,\\n      x,\\n      y,\\n      xm,\\n      ym,\\n      right,\\n      bottom,\\n      i,\\n      j;\\n\\n  // If the tree is empty, initialize the root as a leaf.\\n  if (!node) return this;\\n\\n  // Find the leaf node for the point.\\n  // While descending, also retain the deepest parent with a non-removed sibling.\\n  if (node.length) while (true) {\\n    if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;\\n    if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;\\n    if (!(parent = node, node = node[i = bottom << 1 | right])) return this;\\n    if (!node.length) break;\\n    if (parent[(i + 1) & 3] || parent[(i + 2) & 3] || parent[(i + 3) & 3]) retainer = parent, j = i;\\n  }\\n\\n  // Find the point to remove.\\n  while (node.data !== d) if (!(previous = node, node = node.next)) return this;\\n  if (next = node.next) delete node.next;\\n\\n  // If there are multiple coincident points, remove just the point.\\n  if (previous) return (next ? previous.next = next : delete previous.next), this;\\n\\n  // If this is the root point, remove it.\\n  if (!parent) return this._root = next, this;\\n\\n  // Remove this leaf.\\n  next ? parent[i] = next : delete parent[i];\\n\\n  // If the parent now contains exactly one leaf, collapse superfluous parents.\\n  if ((node = parent[0] || parent[1] || parent[2] || parent[3])\\n      && node === (parent[3] || parent[2] || parent[1] || parent[0])\\n      && !node.length) {\\n    if (retainer) retainer[j] = node;\\n    else this._root = node;\\n  }\\n\\n  return this;\\n});\\n\\nfunction removeAll(data) {\\n  for (var i = 0, n = data.length; i < n; ++i) this.remove(data[i]);\\n  return this;\\n}\\n\\n// CONCATENATED MODULE: ./node_modules/d3-quadtree/src/root.js\\n/* harmony default export */ var src_root = (function() {\\n  return this._root;\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-quadtree/src/size.js\\n/* harmony default export */ var src_size = (function() {\\n  var size = 0;\\n  this.visit(function(node) {\\n    if (!node.length) do ++size; while (node = node.next)\\n  });\\n  return size;\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-quadtree/src/visit.js\\n\\n\\n/* harmony default export */ var visit = (function(callback) {\\n  var quads = [], q, node = this._root, child, x0, y0, x1, y1;\\n  if (node) quads.push(new src_quad(node, this._x0, this._y0, this._x1, this._y1));\\n  while (q = quads.pop()) {\\n    if (!callback(node = q.node, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1) && node.length) {\\n      var xm = (x0 + x1) / 2, ym = (y0 + y1) / 2;\\n      if (child = node[3]) quads.push(new src_quad(child, xm, ym, x1, y1));\\n      if (child = node[2]) quads.push(new src_quad(child, x0, ym, xm, y1));\\n      if (child = node[1]) quads.push(new src_quad(child, xm, y0, x1, ym));\\n      if (child = node[0]) quads.push(new src_quad(child, x0, y0, xm, ym));\\n    }\\n  }\\n  return this;\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-quadtree/src/visitAfter.js\\n\\n\\n/* harmony default export */ var visitAfter = (function(callback) {\\n  var quads = [], next = [], q;\\n  if (this._root) quads.push(new src_quad(this._root, this._x0, this._y0, this._x1, this._y1));\\n  while (q = quads.pop()) {\\n    var node = q.node;\\n    if (node.length) {\\n      var child, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1, xm = (x0 + x1) / 2, ym = (y0 + y1) / 2;\\n      if (child = node[0]) quads.push(new src_quad(child, x0, y0, xm, ym));\\n      if (child = node[1]) quads.push(new src_quad(child, xm, y0, x1, ym));\\n      if (child = node[2]) quads.push(new src_quad(child, x0, ym, xm, y1));\\n      if (child = node[3]) quads.push(new src_quad(child, xm, ym, x1, y1));\\n    }\\n    next.push(q);\\n  }\\n  while (q = next.pop()) {\\n    callback(q.node, q.x0, q.y0, q.x1, q.y1);\\n  }\\n  return this;\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-quadtree/src/x.js\\nfunction defaultX(d) {\\n  return d[0];\\n}\\n\\n/* harmony default export */ var src_x = (function(_) {\\n  return arguments.length ? (this._x = _, this) : this._x;\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-quadtree/src/y.js\\nfunction defaultY(d) {\\n  return d[1];\\n}\\n\\n/* harmony default export */ var src_y = (function(_) {\\n  return arguments.length ? (this._y = _, this) : this._y;\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-quadtree/src/quadtree.js\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nfunction quadtree_quadtree(nodes, x, y) {\\n  var tree = new quadtree_Quadtree(x == null ? defaultX : x, y == null ? defaultY : y, NaN, NaN, NaN, NaN);\\n  return nodes == null ? tree : tree.addAll(nodes);\\n}\\n\\nfunction quadtree_Quadtree(x, y, x0, y0, x1, y1) {\\n  this._x = x;\\n  this._y = y;\\n  this._x0 = x0;\\n  this._y0 = y0;\\n  this._x1 = x1;\\n  this._y1 = y1;\\n  this._root = undefined;\\n}\\n\\nfunction quadtree_leaf_copy(leaf) {\\n  var copy = {data: leaf.data}, next = copy;\\n  while (leaf = leaf.next) next = next.next = {data: leaf.data};\\n  return copy;\\n}\\n\\nvar quadtree_treeProto = quadtree_quadtree.prototype = quadtree_Quadtree.prototype;\\n\\nquadtree_treeProto.copy = function() {\\n  var copy = new quadtree_Quadtree(this._x, this._y, this._x0, this._y0, this._x1, this._y1),\\n      node = this._root,\\n      nodes,\\n      child;\\n\\n  if (!node) return copy;\\n\\n  if (!node.length) return copy._root = quadtree_leaf_copy(node), copy;\\n\\n  nodes = [{source: node, target: copy._root = new Array(4)}];\\n  while (node = nodes.pop()) {\\n    for (var i = 0; i < 4; ++i) {\\n      if (child = node.source[i]) {\\n        if (child.length) nodes.push({source: child, target: node.target[i] = new Array(4)});\\n        else node.target[i] = quadtree_leaf_copy(child);\\n      }\\n    }\\n  }\\n\\n  return copy;\\n};\\n\\nquadtree_treeProto.add = src_add;\\nquadtree_treeProto.addAll = addAll;\\nquadtree_treeProto.cover = src_cover;\\nquadtree_treeProto.data = src_data;\\nquadtree_treeProto.extent = d3_quadtree_src_extent;\\nquadtree_treeProto.find = src_find;\\nquadtree_treeProto.remove = src_remove;\\nquadtree_treeProto.removeAll = removeAll;\\nquadtree_treeProto.root = src_root;\\nquadtree_treeProto.size = src_size;\\nquadtree_treeProto.visit = visit;\\nquadtree_treeProto.visitAfter = visitAfter;\\nquadtree_treeProto.x = src_x;\\nquadtree_treeProto.y = src_y;\\n\\n// CONCATENATED MODULE: ./node_modules/d3-quadtree/index.js\\n\\n\\n// CONCATENATED MODULE: ./node_modules/d3-force/src/collide.js\\n\\n\\n\\n\\nfunction collide_x(d) {\\n  return d.x + d.vx;\\n}\\n\\nfunction collide_y(d) {\\n  return d.y + d.vy;\\n}\\n\\n/* harmony default export */ var collide = (function(radius) {\\n  var nodes,\\n      radii,\\n      strength = 1,\\n      iterations = 1;\\n\\n  if (typeof radius !== \"function\") radius = d3_force_src_constant(radius == null ? 1 : +radius);\\n\\n  function force() {\\n    var i, n = nodes.length,\\n        tree,\\n        node,\\n        xi,\\n        yi,\\n        ri,\\n        ri2;\\n\\n    for (var k = 0; k < iterations; ++k) {\\n      tree = quadtree_quadtree(nodes, collide_x, collide_y).visitAfter(prepare);\\n      for (i = 0; i < n; ++i) {\\n        node = nodes[i];\\n        ri = radii[node.index], ri2 = ri * ri;\\n        xi = node.x + node.vx;\\n        yi = node.y + node.vy;\\n        tree.visit(apply);\\n      }\\n    }\\n\\n    function apply(quad, x0, y0, x1, y1) {\\n      var data = quad.data, rj = quad.r, r = ri + rj;\\n      if (data) {\\n        if (data.index > node.index) {\\n          var x = xi - data.x - data.vx,\\n              y = yi - data.y - data.vy,\\n              l = x * x + y * y;\\n          if (l < r * r) {\\n            if (x === 0) x = jiggle(), l += x * x;\\n            if (y === 0) y = jiggle(), l += y * y;\\n            l = (r - (l = Math.sqrt(l))) / l * strength;\\n            node.vx += (x *= l) * (r = (rj *= rj) / (ri2 + rj));\\n            node.vy += (y *= l) * r;\\n            data.vx -= x * (r = 1 - r);\\n            data.vy -= y * r;\\n          }\\n        }\\n        return;\\n      }\\n      return x0 > xi + r || x1 < xi - r || y0 > yi + r || y1 < yi - r;\\n    }\\n  }\\n\\n  function prepare(quad) {\\n    if (quad.data) return quad.r = radii[quad.data.index];\\n    for (var i = quad.r = 0; i < 4; ++i) {\\n      if (quad[i] && quad[i].r > quad.r) {\\n        quad.r = quad[i].r;\\n      }\\n    }\\n  }\\n\\n  function initialize() {\\n    if (!nodes) return;\\n    var i, n = nodes.length, node;\\n    radii = new Array(n);\\n    for (i = 0; i < n; ++i) node = nodes[i], radii[node.index] = +radius(node, i, nodes);\\n  }\\n\\n  force.initialize = function(_) {\\n    nodes = _;\\n    initialize();\\n  };\\n\\n  force.iterations = function(_) {\\n    return arguments.length ? (iterations = +_, force) : iterations;\\n  };\\n\\n  force.strength = function(_) {\\n    return arguments.length ? (strength = +_, force) : strength;\\n  };\\n\\n  force.radius = function(_) {\\n    return arguments.length ? (radius = typeof _ === \"function\" ? _ : d3_force_src_constant(+_), initialize(), force) : radius;\\n  };\\n\\n  return force;\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-force/src/link.js\\n\\n\\n\\n\\nfunction link_index(d) {\\n  return d.index;\\n}\\n\\nfunction link_find(nodeById, nodeId) {\\n  var node = nodeById.get(nodeId);\\n  if (!node) throw new Error(\"missing: \" + nodeId);\\n  return node;\\n}\\n\\n/* harmony default export */ var src_link = (function(links) {\\n  var id = link_index,\\n      strength = defaultStrength,\\n      strengths,\\n      distance = d3_force_src_constant(30),\\n      distances,\\n      nodes,\\n      count,\\n      bias,\\n      iterations = 1;\\n\\n  if (links == null) links = [];\\n\\n  function defaultStrength(link) {\\n    return 1 / Math.min(count[link.source.index], count[link.target.index]);\\n  }\\n\\n  function force(alpha) {\\n    for (var k = 0, n = links.length; k < iterations; ++k) {\\n      for (var i = 0, link, source, target, x, y, l, b; i < n; ++i) {\\n        link = links[i], source = link.source, target = link.target;\\n        x = target.x + target.vx - source.x - source.vx || jiggle();\\n        y = target.y + target.vy - source.y - source.vy || jiggle();\\n        l = Math.sqrt(x * x + y * y);\\n        l = (l - distances[i]) / l * alpha * strengths[i];\\n        x *= l, y *= l;\\n        target.vx -= x * (b = bias[i]);\\n        target.vy -= y * b;\\n        source.vx += x * (b = 1 - b);\\n        source.vy += y * b;\\n      }\\n    }\\n  }\\n\\n  function initialize() {\\n    if (!nodes) return;\\n\\n    var i,\\n        n = nodes.length,\\n        m = links.length,\\n        nodeById = src_map(nodes, id),\\n        link;\\n\\n    for (i = 0, count = new Array(n); i < m; ++i) {\\n      link = links[i], link.index = i;\\n      if (typeof link.source !== \"object\") link.source = link_find(nodeById, link.source);\\n      if (typeof link.target !== \"object\") link.target = link_find(nodeById, link.target);\\n      count[link.source.index] = (count[link.source.index] || 0) + 1;\\n      count[link.target.index] = (count[link.target.index] || 0) + 1;\\n    }\\n\\n    for (i = 0, bias = new Array(m); i < m; ++i) {\\n      link = links[i], bias[i] = count[link.source.index] / (count[link.source.index] + count[link.target.index]);\\n    }\\n\\n    strengths = new Array(m), initializeStrength();\\n    distances = new Array(m), initializeDistance();\\n  }\\n\\n  function initializeStrength() {\\n    if (!nodes) return;\\n\\n    for (var i = 0, n = links.length; i < n; ++i) {\\n      strengths[i] = +strength(links[i], i, links);\\n    }\\n  }\\n\\n  function initializeDistance() {\\n    if (!nodes) return;\\n\\n    for (var i = 0, n = links.length; i < n; ++i) {\\n      distances[i] = +distance(links[i], i, links);\\n    }\\n  }\\n\\n  force.initialize = function(_) {\\n    nodes = _;\\n    initialize();\\n  };\\n\\n  force.links = function(_) {\\n    return arguments.length ? (links = _, initialize(), force) : links;\\n  };\\n\\n  force.id = function(_) {\\n    return arguments.length ? (id = _, force) : id;\\n  };\\n\\n  force.iterations = function(_) {\\n    return arguments.length ? (iterations = +_, force) : iterations;\\n  };\\n\\n  force.strength = function(_) {\\n    return arguments.length ? (strength = typeof _ === \"function\" ? _ : d3_force_src_constant(+_), initializeStrength(), force) : strength;\\n  };\\n\\n  force.distance = function(_) {\\n    return arguments.length ? (distance = typeof _ === \"function\" ? _ : d3_force_src_constant(+_), initializeDistance(), force) : distance;\\n  };\\n\\n  return force;\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-force/src/simulation.js\\n\\n\\n\\n\\nfunction simulation_x(d) {\\n  return d.x;\\n}\\n\\nfunction simulation_y(d) {\\n  return d.y;\\n}\\n\\nvar simulation_initialRadius = 10,\\n    simulation_initialAngle = Math.PI * (3 - Math.sqrt(5));\\n\\n/* harmony default export */ var src_simulation = (function(nodes) {\\n  var simulation,\\n      alpha = 1,\\n      alphaMin = 0.001,\\n      alphaDecay = 1 - Math.pow(alphaMin, 1 / 300),\\n      alphaTarget = 0,\\n      velocityDecay = 0.6,\\n      forces = src_map(),\\n      stepper = timer(step),\\n      event = src_dispatch(\"tick\", \"end\");\\n\\n  if (nodes == null) nodes = [];\\n\\n  function step() {\\n    tick();\\n    event.call(\"tick\", simulation);\\n    if (alpha < alphaMin) {\\n      stepper.stop();\\n      event.call(\"end\", simulation);\\n    }\\n  }\\n\\n  function tick() {\\n    var i, n = nodes.length, node;\\n\\n    alpha += (alphaTarget - alpha) * alphaDecay;\\n\\n    forces.each(function(force) {\\n      force(alpha);\\n    });\\n\\n    for (i = 0; i < n; ++i) {\\n      node = nodes[i];\\n      if (node.fx == null) node.x += node.vx *= velocityDecay;\\n      else node.x = node.fx, node.vx = 0;\\n      if (node.fy == null) node.y += node.vy *= velocityDecay;\\n      else node.y = node.fy, node.vy = 0;\\n    }\\n  }\\n\\n  function initializeNodes() {\\n    for (var i = 0, n = nodes.length, node; i < n; ++i) {\\n      node = nodes[i], node.index = i;\\n      if (isNaN(node.x) || isNaN(node.y)) {\\n        var radius = simulation_initialRadius * Math.sqrt(i), angle = i * simulation_initialAngle;\\n        node.x = radius * Math.cos(angle);\\n        node.y = radius * Math.sin(angle);\\n      }\\n      if (isNaN(node.vx) || isNaN(node.vy)) {\\n        node.vx = node.vy = 0;\\n      }\\n    }\\n  }\\n\\n  function initializeForce(force) {\\n    if (force.initialize) force.initialize(nodes);\\n    return force;\\n  }\\n\\n  initializeNodes();\\n\\n  return simulation = {\\n    tick: tick,\\n\\n    restart: function() {\\n      return stepper.restart(step), simulation;\\n    },\\n\\n    stop: function() {\\n      return stepper.stop(), simulation;\\n    },\\n\\n    nodes: function(_) {\\n      return arguments.length ? (nodes = _, initializeNodes(), forces.each(initializeForce), simulation) : nodes;\\n    },\\n\\n    alpha: function(_) {\\n      return arguments.length ? (alpha = +_, simulation) : alpha;\\n    },\\n\\n    alphaMin: function(_) {\\n      return arguments.length ? (alphaMin = +_, simulation) : alphaMin;\\n    },\\n\\n    alphaDecay: function(_) {\\n      return arguments.length ? (alphaDecay = +_, simulation) : +alphaDecay;\\n    },\\n\\n    alphaTarget: function(_) {\\n      return arguments.length ? (alphaTarget = +_, simulation) : alphaTarget;\\n    },\\n\\n    velocityDecay: function(_) {\\n      return arguments.length ? (velocityDecay = 1 - _, simulation) : 1 - velocityDecay;\\n    },\\n\\n    force: function(name, _) {\\n      return arguments.length > 1 ? ((_ == null ? forces.remove(name) : forces.set(name, initializeForce(_))), simulation) : forces.get(name);\\n    },\\n\\n    find: function(x, y, radius) {\\n      var i = 0,\\n          n = nodes.length,\\n          dx,\\n          dy,\\n          d2,\\n          node,\\n          closest;\\n\\n      if (radius == null) radius = Infinity;\\n      else radius *= radius;\\n\\n      for (i = 0; i < n; ++i) {\\n        node = nodes[i];\\n        dx = x - node.x;\\n        dy = y - node.y;\\n        d2 = dx * dx + dy * dy;\\n        if (d2 < radius) closest = node, radius = d2;\\n      }\\n\\n      return closest;\\n    },\\n\\n    on: function(name, _) {\\n      return arguments.length > 1 ? (event.on(name, _), simulation) : event.on(name);\\n    }\\n  };\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-force/src/manyBody.js\\n\\n\\n\\n\\n\\n/* harmony default export */ var manyBody = (function() {\\n  var nodes,\\n      node,\\n      alpha,\\n      strength = d3_force_src_constant(-30),\\n      strengths,\\n      distanceMin2 = 1,\\n      distanceMax2 = Infinity,\\n      theta2 = 0.81;\\n\\n  function force(_) {\\n    var i, n = nodes.length, tree = quadtree_quadtree(nodes, simulation_x, simulation_y).visitAfter(accumulate);\\n    for (alpha = _, i = 0; i < n; ++i) node = nodes[i], tree.visit(apply);\\n  }\\n\\n  function initialize() {\\n    if (!nodes) return;\\n    var i, n = nodes.length, node;\\n    strengths = new Array(n);\\n    for (i = 0; i < n; ++i) node = nodes[i], strengths[node.index] = +strength(node, i, nodes);\\n  }\\n\\n  function accumulate(quad) {\\n    var strength = 0, q, c, weight = 0, x, y, i;\\n\\n    // For internal nodes, accumulate forces from child quadrants.\\n    if (quad.length) {\\n      for (x = y = i = 0; i < 4; ++i) {\\n        if ((q = quad[i]) && (c = Math.abs(q.value))) {\\n          strength += q.value, weight += c, x += c * q.x, y += c * q.y;\\n        }\\n      }\\n      quad.x = x / weight;\\n      quad.y = y / weight;\\n    }\\n\\n    // For leaf nodes, accumulate forces from coincident quadrants.\\n    else {\\n      q = quad;\\n      q.x = q.data.x;\\n      q.y = q.data.y;\\n      do strength += strengths[q.data.index];\\n      while (q = q.next);\\n    }\\n\\n    quad.value = strength;\\n  }\\n\\n  function apply(quad, x1, _, x2) {\\n    if (!quad.value) return true;\\n\\n    var x = quad.x - node.x,\\n        y = quad.y - node.y,\\n        w = x2 - x1,\\n        l = x * x + y * y;\\n\\n    // Apply the Barnes-Hut approximation if possible.\\n    // Limit forces for very close nodes; randomize direction if coincident.\\n    if (w * w / theta2 < l) {\\n      if (l < distanceMax2) {\\n        if (x === 0) x = jiggle(), l += x * x;\\n        if (y === 0) y = jiggle(), l += y * y;\\n        if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);\\n        node.vx += x * quad.value * alpha / l;\\n        node.vy += y * quad.value * alpha / l;\\n      }\\n      return true;\\n    }\\n\\n    // Otherwise, process points directly.\\n    else if (quad.length || l >= distanceMax2) return;\\n\\n    // Limit forces for very close nodes; randomize direction if coincident.\\n    if (quad.data !== node || quad.next) {\\n      if (x === 0) x = jiggle(), l += x * x;\\n      if (y === 0) y = jiggle(), l += y * y;\\n      if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);\\n    }\\n\\n    do if (quad.data !== node) {\\n      w = strengths[quad.data.index] * alpha / l;\\n      node.vx += x * w;\\n      node.vy += y * w;\\n    } while (quad = quad.next);\\n  }\\n\\n  force.initialize = function(_) {\\n    nodes = _;\\n    initialize();\\n  };\\n\\n  force.strength = function(_) {\\n    return arguments.length ? (strength = typeof _ === \"function\" ? _ : d3_force_src_constant(+_), initialize(), force) : strength;\\n  };\\n\\n  force.distanceMin = function(_) {\\n    return arguments.length ? (distanceMin2 = _ * _, force) : Math.sqrt(distanceMin2);\\n  };\\n\\n  force.distanceMax = function(_) {\\n    return arguments.length ? (distanceMax2 = _ * _, force) : Math.sqrt(distanceMax2);\\n  };\\n\\n  force.theta = function(_) {\\n    return arguments.length ? (theta2 = _ * _, force) : Math.sqrt(theta2);\\n  };\\n\\n  return force;\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-force/src/radial.js\\n\\n\\n/* harmony default export */ var radial = (function(radius, x, y) {\\n  var nodes,\\n      strength = d3_force_src_constant(0.1),\\n      strengths,\\n      radiuses;\\n\\n  if (typeof radius !== \"function\") radius = d3_force_src_constant(+radius);\\n  if (x == null) x = 0;\\n  if (y == null) y = 0;\\n\\n  function force(alpha) {\\n    for (var i = 0, n = nodes.length; i < n; ++i) {\\n      var node = nodes[i],\\n          dx = node.x - x || 1e-6,\\n          dy = node.y - y || 1e-6,\\n          r = Math.sqrt(dx * dx + dy * dy),\\n          k = (radiuses[i] - r) * strengths[i] * alpha / r;\\n      node.vx += dx * k;\\n      node.vy += dy * k;\\n    }\\n  }\\n\\n  function initialize() {\\n    if (!nodes) return;\\n    var i, n = nodes.length;\\n    strengths = new Array(n);\\n    radiuses = new Array(n);\\n    for (i = 0; i < n; ++i) {\\n      radiuses[i] = +radius(nodes[i], i, nodes);\\n      strengths[i] = isNaN(radiuses[i]) ? 0 : +strength(nodes[i], i, nodes);\\n    }\\n  }\\n\\n  force.initialize = function(_) {\\n    nodes = _, initialize();\\n  };\\n\\n  force.strength = function(_) {\\n    return arguments.length ? (strength = typeof _ === \"function\" ? _ : d3_force_src_constant(+_), initialize(), force) : strength;\\n  };\\n\\n  force.radius = function(_) {\\n    return arguments.length ? (radius = typeof _ === \"function\" ? _ : d3_force_src_constant(+_), initialize(), force) : radius;\\n  };\\n\\n  force.x = function(_) {\\n    return arguments.length ? (x = +_, force) : x;\\n  };\\n\\n  force.y = function(_) {\\n    return arguments.length ? (y = +_, force) : y;\\n  };\\n\\n  return force;\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-force/src/x.js\\n\\n\\n/* harmony default export */ var d3_force_src_x = (function(x) {\\n  var strength = d3_force_src_constant(0.1),\\n      nodes,\\n      strengths,\\n      xz;\\n\\n  if (typeof x !== \"function\") x = d3_force_src_constant(x == null ? 0 : +x);\\n\\n  function force(alpha) {\\n    for (var i = 0, n = nodes.length, node; i < n; ++i) {\\n      node = nodes[i], node.vx += (xz[i] - node.x) * strengths[i] * alpha;\\n    }\\n  }\\n\\n  function initialize() {\\n    if (!nodes) return;\\n    var i, n = nodes.length;\\n    strengths = new Array(n);\\n    xz = new Array(n);\\n    for (i = 0; i < n; ++i) {\\n      strengths[i] = isNaN(xz[i] = +x(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);\\n    }\\n  }\\n\\n  force.initialize = function(_) {\\n    nodes = _;\\n    initialize();\\n  };\\n\\n  force.strength = function(_) {\\n    return arguments.length ? (strength = typeof _ === \"function\" ? _ : d3_force_src_constant(+_), initialize(), force) : strength;\\n  };\\n\\n  force.x = function(_) {\\n    return arguments.length ? (x = typeof _ === \"function\" ? _ : d3_force_src_constant(+_), initialize(), force) : x;\\n  };\\n\\n  return force;\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-force/src/y.js\\n\\n\\n/* harmony default export */ var d3_force_src_y = (function(y) {\\n  var strength = d3_force_src_constant(0.1),\\n      nodes,\\n      strengths,\\n      yz;\\n\\n  if (typeof y !== \"function\") y = d3_force_src_constant(y == null ? 0 : +y);\\n\\n  function force(alpha) {\\n    for (var i = 0, n = nodes.length, node; i < n; ++i) {\\n      node = nodes[i], node.vy += (yz[i] - node.y) * strengths[i] * alpha;\\n    }\\n  }\\n\\n  function initialize() {\\n    if (!nodes) return;\\n    var i, n = nodes.length;\\n    strengths = new Array(n);\\n    yz = new Array(n);\\n    for (i = 0; i < n; ++i) {\\n      strengths[i] = isNaN(yz[i] = +y(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);\\n    }\\n  }\\n\\n  force.initialize = function(_) {\\n    nodes = _;\\n    initialize();\\n  };\\n\\n  force.strength = function(_) {\\n    return arguments.length ? (strength = typeof _ === \"function\" ? _ : d3_force_src_constant(+_), initialize(), force) : strength;\\n  };\\n\\n  force.y = function(_) {\\n    return arguments.length ? (y = typeof _ === \"function\" ? _ : d3_force_src_constant(+_), initialize(), force) : y;\\n  };\\n\\n  return force;\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-force/index.js\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n// CONCATENATED MODULE: ./node_modules/d3-format/src/formatDecimal.js\\n// Computes the decimal coefficient and exponent of the specified number x with\\n// significant digits p, where x is positive and p is in [1, 21] or undefined.\\n// For example, formatDecimal(1.23) returns [\"123\", 0].\\n/* harmony default export */ var formatDecimal = (function(x, p) {\\n  if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf(\"e\")) < 0) return null; // NaN, ±Infinity\\n  var i, coefficient = x.slice(0, i);\\n\\n  // The string returned by toExponential either has the form \\\\d\\\\.\\\\d+e[-+]\\\\d+\\n  // (e.g., 1.2e+3) or the form \\\\de[-+]\\\\d+ (e.g., 1e+3).\\n  return [\\n    coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,\\n    +x.slice(i + 1)\\n  ];\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-format/src/exponent.js\\n\\n\\n/* harmony default export */ var src_exponent = (function(x) {\\n  return x = formatDecimal(Math.abs(x)), x ? x[1] : NaN;\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-format/src/formatGroup.js\\n/* harmony default export */ var formatGroup = (function(grouping, thousands) {\\n  return function(value, width) {\\n    var i = value.length,\\n        t = [],\\n        j = 0,\\n        g = grouping[0],\\n        length = 0;\\n\\n    while (i > 0 && g > 0) {\\n      if (length + g + 1 > width) g = Math.max(1, width - length);\\n      t.push(value.substring(i -= g, i + g));\\n      if ((length += g + 1) > width) break;\\n      g = grouping[j = (j + 1) % grouping.length];\\n    }\\n\\n    return t.reverse().join(thousands);\\n  };\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-format/src/formatNumerals.js\\n/* harmony default export */ var formatNumerals = (function(numerals) {\\n  return function(value) {\\n    return value.replace(/[0-9]/g, function(i) {\\n      return numerals[+i];\\n    });\\n  };\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-format/src/formatDefault.js\\n/* harmony default export */ var formatDefault = (function(x, p) {\\n  x = x.toPrecision(p);\\n\\n  out: for (var n = x.length, i = 1, i0 = -1, i1; i < n; ++i) {\\n    switch (x[i]) {\\n      case \".\": i0 = i1 = i; break;\\n      case \"0\": if (i0 === 0) i0 = i; i1 = i; break;\\n      case \"e\": break out;\\n      default: if (i0 > 0) i0 = 0; break;\\n    }\\n  }\\n\\n  return i0 > 0 ? x.slice(0, i0) + x.slice(i1 + 1) : x;\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-format/src/formatPrefixAuto.js\\n\\n\\nvar formatPrefixAuto_prefixExponent;\\n\\n/* harmony default export */ var formatPrefixAuto = (function(x, p) {\\n  var d = formatDecimal(x, p);\\n  if (!d) return x + \"\";\\n  var coefficient = d[0],\\n      exponent = d[1],\\n      i = exponent - (formatPrefixAuto_prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1,\\n      n = coefficient.length;\\n  return i === n ? coefficient\\n      : i > n ? coefficient + new Array(i - n + 1).join(\"0\")\\n      : i > 0 ? coefficient.slice(0, i) + \".\" + coefficient.slice(i)\\n      : \"0.\" + new Array(1 - i).join(\"0\") + formatDecimal(x, Math.max(0, p + i - 1))[0]; // less than 1y!\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-format/src/formatRounded.js\\n\\n\\n/* harmony default export */ var formatRounded = (function(x, p) {\\n  var d = formatDecimal(x, p);\\n  if (!d) return x + \"\";\\n  var coefficient = d[0],\\n      exponent = d[1];\\n  return exponent < 0 ? \"0.\" + new Array(-exponent).join(\"0\") + coefficient\\n      : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + \".\" + coefficient.slice(exponent + 1)\\n      : coefficient + new Array(exponent - coefficient.length + 2).join(\"0\");\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-format/src/formatTypes.js\\n\\n\\n\\n\\n/* harmony default export */ var formatTypes = ({\\n  \"\": formatDefault,\\n  \"%\": function(x, p) { return (x * 100).toFixed(p); },\\n  \"b\": function(x) { return Math.round(x).toString(2); },\\n  \"c\": function(x) { return x + \"\"; },\\n  \"d\": function(x) { return Math.round(x).toString(10); },\\n  \"e\": function(x, p) { return x.toExponential(p); },\\n  \"f\": function(x, p) { return x.toFixed(p); },\\n  \"g\": function(x, p) { return x.toPrecision(p); },\\n  \"o\": function(x) { return Math.round(x).toString(8); },\\n  \"p\": function(x, p) { return formatRounded(x * 100, p); },\\n  \"r\": formatRounded,\\n  \"s\": formatPrefixAuto,\\n  \"X\": function(x) { return Math.round(x).toString(16).toUpperCase(); },\\n  \"x\": function(x) { return Math.round(x).toString(16); }\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-format/src/formatSpecifier.js\\n\\n\\n// [[fill]align][sign][symbol][0][width][,][.precision][type]\\nvar formatSpecifier_re = /^(?:(.)?([<>=^]))?([+\\\\-\\\\( ])?([$#])?(0)?(\\\\d+)?(,)?(\\\\.\\\\d+)?([a-z%])?$/i;\\n\\nfunction formatSpecifier_formatSpecifier(specifier) {\\n  return new formatSpecifier_FormatSpecifier(specifier);\\n}\\n\\nformatSpecifier_formatSpecifier.prototype = formatSpecifier_FormatSpecifier.prototype; // instanceof\\n\\nfunction formatSpecifier_FormatSpecifier(specifier) {\\n  if (!(match = formatSpecifier_re.exec(specifier))) throw new Error(\"invalid format: \" + specifier);\\n\\n  var match,\\n      fill = match[1] || \" \",\\n      align = match[2] || \">\",\\n      sign = match[3] || \"-\",\\n      symbol = match[4] || \"\",\\n      zero = !!match[5],\\n      width = match[6] && +match[6],\\n      comma = !!match[7],\\n      precision = match[8] && +match[8].slice(1),\\n      type = match[9] || \"\";\\n\\n  // The \"n\" type is an alias for \",g\".\\n  if (type === \"n\") comma = true, type = \"g\";\\n\\n  // Map invalid types to the default format.\\n  else if (!formatTypes[type]) type = \"\";\\n\\n  // If zero fill is specified, padding goes after sign and before digits.\\n  if (zero || (fill === \"0\" && align === \"=\")) zero = true, fill = \"0\", align = \"=\";\\n\\n  this.fill = fill;\\n  this.align = align;\\n  this.sign = sign;\\n  this.symbol = symbol;\\n  this.zero = zero;\\n  this.width = width;\\n  this.comma = comma;\\n  this.precision = precision;\\n  this.type = type;\\n}\\n\\nformatSpecifier_FormatSpecifier.prototype.toString = function() {\\n  return this.fill\\n      + this.align\\n      + this.sign\\n      + this.symbol\\n      + (this.zero ? \"0\" : \"\")\\n      + (this.width == null ? \"\" : Math.max(1, this.width | 0))\\n      + (this.comma ? \",\" : \"\")\\n      + (this.precision == null ? \"\" : \".\" + Math.max(0, this.precision | 0))\\n      + this.type;\\n};\\n\\n// CONCATENATED MODULE: ./node_modules/d3-format/src/identity.js\\n/* harmony default export */ var d3_format_src_identity = (function(x) {\\n  return x;\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-format/src/locale.js\\n\\n\\n\\n\\n\\n\\n\\n\\nvar locale_prefixes = [\"y\",\"z\",\"a\",\"f\",\"p\",\"n\",\"µ\",\"m\",\"\",\"k\",\"M\",\"G\",\"T\",\"P\",\"E\",\"Z\",\"Y\"];\\n\\n/* harmony default export */ var src_locale = (function(locale) {\\n  var group = locale.grouping && locale.thousands ? formatGroup(locale.grouping, locale.thousands) : d3_format_src_identity,\\n      currency = locale.currency,\\n      decimal = locale.decimal,\\n      numerals = locale.numerals ? formatNumerals(locale.numerals) : d3_format_src_identity,\\n      percent = locale.percent || \"%\";\\n\\n  function newFormat(specifier) {\\n    specifier = formatSpecifier_formatSpecifier(specifier);\\n\\n    var fill = specifier.fill,\\n        align = specifier.align,\\n        sign = specifier.sign,\\n        symbol = specifier.symbol,\\n        zero = specifier.zero,\\n        width = specifier.width,\\n        comma = specifier.comma,\\n        precision = specifier.precision,\\n        type = specifier.type;\\n\\n    // Compute the prefix and suffix.\\n    // For SI-prefix, the suffix is lazily computed.\\n    var prefix = symbol === \"$\" ? currency[0] : symbol === \"#\" && /[boxX]/.test(type) ? \"0\" + type.toLowerCase() : \"\",\\n        suffix = symbol === \"$\" ? currency[1] : /[%p]/.test(type) ? percent : \"\";\\n\\n    // What format function should we use?\\n    // Is this an integer type?\\n    // Can this type generate exponential notation?\\n    var formatType = formatTypes[type],\\n        maybeSuffix = !type || /[defgprs%]/.test(type);\\n\\n    // Set the default precision if not specified,\\n    // or clamp the specified precision to the supported range.\\n    // For significant precision, it must be in [1, 21].\\n    // For fixed precision, it must be in [0, 20].\\n    precision = precision == null ? (type ? 6 : 12)\\n        : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision))\\n        : Math.max(0, Math.min(20, precision));\\n\\n    function format(value) {\\n      var valuePrefix = prefix,\\n          valueSuffix = suffix,\\n          i, n, c;\\n\\n      if (type === \"c\") {\\n        valueSuffix = formatType(value) + valueSuffix;\\n        value = \"\";\\n      } else {\\n        value = +value;\\n\\n        // Perform the initial formatting.\\n        var valueNegative = value < 0;\\n        value = formatType(Math.abs(value), precision);\\n\\n        // If a negative value rounds to zero during formatting, treat as positive.\\n        if (valueNegative && +value === 0) valueNegative = false;\\n\\n        // Compute the prefix and suffix.\\n        valuePrefix = (valueNegative ? (sign === \"(\" ? sign : \"-\") : sign === \"-\" || sign === \"(\" ? \"\" : sign) + valuePrefix;\\n        valueSuffix = (type === \"s\" ? locale_prefixes[8 + formatPrefixAuto_prefixExponent / 3] : \"\") + valueSuffix + (valueNegative && sign === \"(\" ? \")\" : \"\");\\n\\n        // Break the formatted value into the integer “value” part that can be\\n        // grouped, and fractional or exponential “suffix” part that is not.\\n        if (maybeSuffix) {\\n          i = -1, n = value.length;\\n          while (++i < n) {\\n            if (c = value.charCodeAt(i), 48 > c || c > 57) {\\n              valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;\\n              value = value.slice(0, i);\\n              break;\\n            }\\n          }\\n        }\\n      }\\n\\n      // If the fill character is not \"0\", grouping is applied before padding.\\n      if (comma && !zero) value = group(value, Infinity);\\n\\n      // Compute the padding.\\n      var length = valuePrefix.length + value.length + valueSuffix.length,\\n          padding = length < width ? new Array(width - length + 1).join(fill) : \"\";\\n\\n      // If the fill character is \"0\", grouping is applied after padding.\\n      if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = \"\";\\n\\n      // Reconstruct the final output based on the desired alignment.\\n      switch (align) {\\n        case \"<\": value = valuePrefix + value + valueSuffix + padding; break;\\n        case \"=\": value = valuePrefix + padding + value + valueSuffix; break;\\n        case \"^\": value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length); break;\\n        default: value = padding + valuePrefix + value + valueSuffix; break;\\n      }\\n\\n      return numerals(value);\\n    }\\n\\n    format.toString = function() {\\n      return specifier + \"\";\\n    };\\n\\n    return format;\\n  }\\n\\n  function formatPrefix(specifier, value) {\\n    var f = newFormat((specifier = formatSpecifier_formatSpecifier(specifier), specifier.type = \"f\", specifier)),\\n        e = Math.max(-8, Math.min(8, Math.floor(src_exponent(value) / 3))) * 3,\\n        k = Math.pow(10, -e),\\n        prefix = locale_prefixes[8 + e / 3];\\n    return function(value) {\\n      return f(k * value) + prefix;\\n    };\\n  }\\n\\n  return {\\n    format: newFormat,\\n    formatPrefix: formatPrefix\\n  };\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-format/src/defaultLocale.js\\n\\n\\nvar defaultLocale_locale;\\nvar defaultLocale_format;\\nvar defaultLocale_formatPrefix;\\n\\ndefaultLocale_defaultLocale({\\n  decimal: \".\",\\n  thousands: \",\",\\n  grouping: [3],\\n  currency: [\"$\", \"\"]\\n});\\n\\nfunction defaultLocale_defaultLocale(definition) {\\n  defaultLocale_locale = src_locale(definition);\\n  defaultLocale_format = defaultLocale_locale.format;\\n  defaultLocale_formatPrefix = defaultLocale_locale.formatPrefix;\\n  return defaultLocale_locale;\\n}\\n\\n// CONCATENATED MODULE: ./node_modules/d3-format/src/precisionFixed.js\\n\\n\\n/* harmony default export */ var precisionFixed = (function(step) {\\n  return Math.max(0, -src_exponent(Math.abs(step)));\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-format/src/precisionPrefix.js\\n\\n\\n/* harmony default export */ var precisionPrefix = (function(step, value) {\\n  return Math.max(0, Math.max(-8, Math.min(8, Math.floor(src_exponent(value) / 3))) * 3 - src_exponent(Math.abs(step)));\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-format/src/precisionRound.js\\n\\n\\n/* harmony default export */ var precisionRound = (function(step, max) {\\n  step = Math.abs(step), max = Math.abs(max) - step;\\n  return Math.max(0, src_exponent(max) - src_exponent(step)) + 1;\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-format/index.js\\n\\n\\n\\n\\n\\n\\n\\n// CONCATENATED MODULE: ./node_modules/d3-geo/src/adder.js\\n// Adds floating point numbers with twice the normal precision.\\n// Reference: J. R. Shewchuk, Adaptive Precision Floating-Point Arithmetic and\\n// Fast Robust Geometric Predicates, Discrete & Computational Geometry 18(3)\\n// 305–363 (1997).\\n// Code adapted from GeographicLib by Charles F. F. Karney,\\n// http://geographiclib.sourceforge.net/\\n\\n/* harmony default export */ var adder = (function() {\\n  return new Adder;\\n});\\n\\nfunction Adder() {\\n  this.reset();\\n}\\n\\nAdder.prototype = {\\n  constructor: Adder,\\n  reset: function() {\\n    this.s = // rounded value\\n    this.t = 0; // exact error\\n  },\\n  add: function(y) {\\n    adder_add(temp, y, this.t);\\n    adder_add(this, temp.s, this.s);\\n    if (this.s) this.t += temp.t;\\n    else this.s = temp.t;\\n  },\\n  valueOf: function() {\\n    return this.s;\\n  }\\n};\\n\\nvar temp = new Adder;\\n\\nfunction adder_add(adder, a, b) {\\n  var x = adder.s = a + b,\\n      bv = x - a,\\n      av = x - bv;\\n  adder.t = (a - av) + (b - bv);\\n}\\n\\n// CONCATENATED MODULE: ./node_modules/d3-geo/src/math.js\\nvar math_epsilon = 1e-6;\\nvar math_epsilon2 = 1e-12;\\nvar src_math_pi = Math.PI;\\nvar src_math_halfPi = src_math_pi / 2;\\nvar quarterPi = src_math_pi / 4;\\nvar src_math_tau = src_math_pi * 2;\\n\\nvar math_degrees = 180 / src_math_pi;\\nvar radians = src_math_pi / 180;\\n\\nvar abs = Math.abs;\\nvar atan = Math.atan;\\nvar atan2 = Math.atan2;\\nvar math_cos = Math.cos;\\nvar ceil = Math.ceil;\\nvar exp = Math.exp;\\nvar floor = Math.floor;\\nvar math_log = Math.log;\\nvar math_pow = Math.pow;\\nvar math_sin = Math.sin;\\nvar math_sign = Math.sign || function(x) { return x > 0 ? 1 : x < 0 ? -1 : 0; };\\nvar math_sqrt = Math.sqrt;\\nvar tan = Math.tan;\\n\\nfunction acos(x) {\\n  return x > 1 ? 0 : x < -1 ? src_math_pi : Math.acos(x);\\n}\\n\\nfunction asin(x) {\\n  return x > 1 ? src_math_halfPi : x < -1 ? -src_math_halfPi : Math.asin(x);\\n}\\n\\nfunction haversin(x) {\\n  return (x = math_sin(x / 2)) * x;\\n}\\n\\n// CONCATENATED MODULE: ./node_modules/d3-geo/src/noop.js\\nfunction noop_noop() {}\\n\\n// CONCATENATED MODULE: ./node_modules/d3-geo/src/stream.js\\nfunction streamGeometry(geometry, stream) {\\n  if (geometry && streamGeometryType.hasOwnProperty(geometry.type)) {\\n    streamGeometryType[geometry.type](geometry, stream);\\n  }\\n}\\n\\nvar streamObjectType = {\\n  Feature: function(object, stream) {\\n    streamGeometry(object.geometry, stream);\\n  },\\n  FeatureCollection: function(object, stream) {\\n    var features = object.features, i = -1, n = features.length;\\n    while (++i < n) streamGeometry(features[i].geometry, stream);\\n  }\\n};\\n\\nvar streamGeometryType = {\\n  Sphere: function(object, stream) {\\n    stream.sphere();\\n  },\\n  Point: function(object, stream) {\\n    object = object.coordinates;\\n    stream.point(object[0], object[1], object[2]);\\n  },\\n  MultiPoint: function(object, stream) {\\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\\n    while (++i < n) object = coordinates[i], stream.point(object[0], object[1], object[2]);\\n  },\\n  LineString: function(object, stream) {\\n    streamLine(object.coordinates, stream, 0);\\n  },\\n  MultiLineString: function(object, stream) {\\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\\n    while (++i < n) streamLine(coordinates[i], stream, 0);\\n  },\\n  Polygon: function(object, stream) {\\n    streamPolygon(object.coordinates, stream);\\n  },\\n  MultiPolygon: function(object, stream) {\\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\\n    while (++i < n) streamPolygon(coordinates[i], stream);\\n  },\\n  GeometryCollection: function(object, stream) {\\n    var geometries = object.geometries, i = -1, n = geometries.length;\\n    while (++i < n) streamGeometry(geometries[i], stream);\\n  }\\n};\\n\\nfunction streamLine(coordinates, stream, closed) {\\n  var i = -1, n = coordinates.length - closed, coordinate;\\n  stream.lineStart();\\n  while (++i < n) coordinate = coordinates[i], stream.point(coordinate[0], coordinate[1], coordinate[2]);\\n  stream.lineEnd();\\n}\\n\\nfunction streamPolygon(coordinates, stream) {\\n  var i = -1, n = coordinates.length;\\n  stream.polygonStart();\\n  while (++i < n) streamLine(coordinates[i], stream, 1);\\n  stream.polygonEnd();\\n}\\n\\n/* harmony default export */ var src_stream = (function(object, stream) {\\n  if (object && streamObjectType.hasOwnProperty(object.type)) {\\n    streamObjectType[object.type](object, stream);\\n  } else {\\n    streamGeometry(object, stream);\\n  }\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-geo/src/area.js\\n\\n\\n\\n\\n\\nvar area_areaRingSum = adder();\\n\\nvar area_areaSum = adder(),\\n    area_lambda00,\\n    area_phi00,\\n    area_lambda0,\\n    area_cosPhi0,\\n    area_sinPhi0;\\n\\nvar area_areaStream = {\\n  point: noop_noop,\\n  lineStart: noop_noop,\\n  lineEnd: noop_noop,\\n  polygonStart: function() {\\n    area_areaRingSum.reset();\\n    area_areaStream.lineStart = area_areaRingStart;\\n    area_areaStream.lineEnd = area_areaRingEnd;\\n  },\\n  polygonEnd: function() {\\n    var areaRing = +area_areaRingSum;\\n    area_areaSum.add(areaRing < 0 ? src_math_tau + areaRing : areaRing);\\n    this.lineStart = this.lineEnd = this.point = noop_noop;\\n  },\\n  sphere: function() {\\n    area_areaSum.add(src_math_tau);\\n  }\\n};\\n\\nfunction area_areaRingStart() {\\n  area_areaStream.point = area_areaPointFirst;\\n}\\n\\nfunction area_areaRingEnd() {\\n  area_areaPoint(area_lambda00, area_phi00);\\n}\\n\\nfunction area_areaPointFirst(lambda, phi) {\\n  area_areaStream.point = area_areaPoint;\\n  area_lambda00 = lambda, area_phi00 = phi;\\n  lambda *= radians, phi *= radians;\\n  area_lambda0 = lambda, area_cosPhi0 = math_cos(phi = phi / 2 + quarterPi), area_sinPhi0 = math_sin(phi);\\n}\\n\\nfunction area_areaPoint(lambda, phi) {\\n  lambda *= radians, phi *= radians;\\n  phi = phi / 2 + quarterPi; // half the angular distance from south pole\\n\\n  // Spherical excess E for a spherical triangle with vertices: south pole,\\n  // previous point, current point.  Uses a formula derived from Cagnoli’s\\n  // theorem.  See Todhunter, Spherical Trig. (1871), Sec. 103, Eq. (2).\\n  var dLambda = lambda - area_lambda0,\\n      sdLambda = dLambda >= 0 ? 1 : -1,\\n      adLambda = sdLambda * dLambda,\\n      cosPhi = math_cos(phi),\\n      sinPhi = math_sin(phi),\\n      k = area_sinPhi0 * sinPhi,\\n      u = area_cosPhi0 * cosPhi + k * math_cos(adLambda),\\n      v = k * sdLambda * math_sin(adLambda);\\n  area_areaRingSum.add(atan2(v, u));\\n\\n  // Advance the previous points.\\n  area_lambda0 = lambda, area_cosPhi0 = cosPhi, area_sinPhi0 = sinPhi;\\n}\\n\\n/* harmony default export */ var src_area = (function(object) {\\n  area_areaSum.reset();\\n  src_stream(object, area_areaStream);\\n  return area_areaSum * 2;\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-geo/src/cartesian.js\\n\\n\\nfunction cartesian_spherical(cartesian) {\\n  return [atan2(cartesian[1], cartesian[0]), asin(cartesian[2])];\\n}\\n\\nfunction cartesian_cartesian(spherical) {\\n  var lambda = spherical[0], phi = spherical[1], cosPhi = math_cos(phi);\\n  return [cosPhi * math_cos(lambda), cosPhi * math_sin(lambda), math_sin(phi)];\\n}\\n\\nfunction cartesian_cartesianDot(a, b) {\\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\\n}\\n\\nfunction cartesian_cartesianCross(a, b) {\\n  return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];\\n}\\n\\n// TODO return a\\nfunction cartesian_cartesianAddInPlace(a, b) {\\n  a[0] += b[0], a[1] += b[1], a[2] += b[2];\\n}\\n\\nfunction cartesian_cartesianScale(vector, k) {\\n  return [vector[0] * k, vector[1] * k, vector[2] * k];\\n}\\n\\n// TODO return d\\nfunction cartesian_cartesianNormalizeInPlace(d) {\\n  var l = math_sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);\\n  d[0] /= l, d[1] /= l, d[2] /= l;\\n}\\n\\n// CONCATENATED MODULE: ./node_modules/d3-geo/src/bounds.js\\n\\n\\n\\n\\n\\n\\nvar bounds_lambda0, bounds_phi0, bounds_lambda1, bounds_phi1, // bounds\\n    bounds_lambda2, // previous lambda-coordinate\\n    bounds_lambda00, bounds_phi00, // first point\\n    bounds_p0, // previous 3D point\\n    bounds_deltaSum = adder(),\\n    bounds_ranges,\\n    bounds_range;\\n\\nvar bounds_boundsStream = {\\n  point: bounds_boundsPoint,\\n  lineStart: bounds_boundsLineStart,\\n  lineEnd: bounds_boundsLineEnd,\\n  polygonStart: function() {\\n    bounds_boundsStream.point = bounds_boundsRingPoint;\\n    bounds_boundsStream.lineStart = bounds_boundsRingStart;\\n    bounds_boundsStream.lineEnd = bounds_boundsRingEnd;\\n    bounds_deltaSum.reset();\\n    area_areaStream.polygonStart();\\n  },\\n  polygonEnd: function() {\\n    area_areaStream.polygonEnd();\\n    bounds_boundsStream.point = bounds_boundsPoint;\\n    bounds_boundsStream.lineStart = bounds_boundsLineStart;\\n    bounds_boundsStream.lineEnd = bounds_boundsLineEnd;\\n    if (area_areaRingSum < 0) bounds_lambda0 = -(bounds_lambda1 = 180), bounds_phi0 = -(bounds_phi1 = 90);\\n    else if (bounds_deltaSum > math_epsilon) bounds_phi1 = 90;\\n    else if (bounds_deltaSum < -math_epsilon) bounds_phi0 = -90;\\n    bounds_range[0] = bounds_lambda0, bounds_range[1] = bounds_lambda1;\\n  }\\n};\\n\\nfunction bounds_boundsPoint(lambda, phi) {\\n  bounds_ranges.push(bounds_range = [bounds_lambda0 = lambda, bounds_lambda1 = lambda]);\\n  if (phi < bounds_phi0) bounds_phi0 = phi;\\n  if (phi > bounds_phi1) bounds_phi1 = phi;\\n}\\n\\nfunction bounds_linePoint(lambda, phi) {\\n  var p = cartesian_cartesian([lambda * radians, phi * radians]);\\n  if (bounds_p0) {\\n    var normal = cartesian_cartesianCross(bounds_p0, p),\\n        equatorial = [normal[1], -normal[0], 0],\\n        inflection = cartesian_cartesianCross(equatorial, normal);\\n    cartesian_cartesianNormalizeInPlace(inflection);\\n    inflection = cartesian_spherical(inflection);\\n    var delta = lambda - bounds_lambda2,\\n        sign = delta > 0 ? 1 : -1,\\n        lambdai = inflection[0] * math_degrees * sign,\\n        phii,\\n        antimeridian = abs(delta) > 180;\\n    if (antimeridian ^ (sign * bounds_lambda2 < lambdai && lambdai < sign * lambda)) {\\n      phii = inflection[1] * math_degrees;\\n      if (phii > bounds_phi1) bounds_phi1 = phii;\\n    } else if (lambdai = (lambdai + 360) % 360 - 180, antimeridian ^ (sign * bounds_lambda2 < lambdai && lambdai < sign * lambda)) {\\n      phii = -inflection[1] * math_degrees;\\n      if (phii < bounds_phi0) bounds_phi0 = phii;\\n    } else {\\n      if (phi < bounds_phi0) bounds_phi0 = phi;\\n      if (phi > bounds_phi1) bounds_phi1 = phi;\\n    }\\n    if (antimeridian) {\\n      if (lambda < bounds_lambda2) {\\n        if (bounds_angle(bounds_lambda0, lambda) > bounds_angle(bounds_lambda0, bounds_lambda1)) bounds_lambda1 = lambda;\\n      } else {\\n        if (bounds_angle(lambda, bounds_lambda1) > bounds_angle(bounds_lambda0, bounds_lambda1)) bounds_lambda0 = lambda;\\n      }\\n    } else {\\n      if (bounds_lambda1 >= bounds_lambda0) {\\n        if (lambda < bounds_lambda0) bounds_lambda0 = lambda;\\n        if (lambda > bounds_lambda1) bounds_lambda1 = lambda;\\n      } else {\\n        if (lambda > bounds_lambda2) {\\n          if (bounds_angle(bounds_lambda0, lambda) > bounds_angle(bounds_lambda0, bounds_lambda1)) bounds_lambda1 = lambda;\\n        } else {\\n          if (bounds_angle(lambda, bounds_lambda1) > bounds_angle(bounds_lambda0, bounds_lambda1)) bounds_lambda0 = lambda;\\n        }\\n      }\\n    }\\n  } else {\\n    bounds_ranges.push(bounds_range = [bounds_lambda0 = lambda, bounds_lambda1 = lambda]);\\n  }\\n  if (phi < bounds_phi0) bounds_phi0 = phi;\\n  if (phi > bounds_phi1) bounds_phi1 = phi;\\n  bounds_p0 = p, bounds_lambda2 = lambda;\\n}\\n\\nfunction bounds_boundsLineStart() {\\n  bounds_boundsStream.point = bounds_linePoint;\\n}\\n\\nfunction bounds_boundsLineEnd() {\\n  bounds_range[0] = bounds_lambda0, bounds_range[1] = bounds_lambda1;\\n  bounds_boundsStream.point = bounds_boundsPoint;\\n  bounds_p0 = null;\\n}\\n\\nfunction bounds_boundsRingPoint(lambda, phi) {\\n  if (bounds_p0) {\\n    var delta = lambda - bounds_lambda2;\\n    bounds_deltaSum.add(abs(delta) > 180 ? delta + (delta > 0 ? 360 : -360) : delta);\\n  } else {\\n    bounds_lambda00 = lambda, bounds_phi00 = phi;\\n  }\\n  area_areaStream.point(lambda, phi);\\n  bounds_linePoint(lambda, phi);\\n}\\n\\nfunction bounds_boundsRingStart() {\\n  area_areaStream.lineStart();\\n}\\n\\nfunction bounds_boundsRingEnd() {\\n  bounds_boundsRingPoint(bounds_lambda00, bounds_phi00);\\n  area_areaStream.lineEnd();\\n  if (abs(bounds_deltaSum) > math_epsilon) bounds_lambda0 = -(bounds_lambda1 = 180);\\n  bounds_range[0] = bounds_lambda0, bounds_range[1] = bounds_lambda1;\\n  bounds_p0 = null;\\n}\\n\\n// Finds the left-right distance between two longitudes.\\n// This is almost the same as (lambda1 - lambda0 + 360°) % 360°, except that we want\\n// the distance between ±180° to be 360°.\\nfunction bounds_angle(lambda0, lambda1) {\\n  return (lambda1 -= lambda0) < 0 ? lambda1 + 360 : lambda1;\\n}\\n\\nfunction bounds_rangeCompare(a, b) {\\n  return a[0] - b[0];\\n}\\n\\nfunction bounds_rangeContains(range, x) {\\n  return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;\\n}\\n\\n/* harmony default export */ var bounds = (function(feature) {\\n  var i, n, a, b, merged, deltaMax, delta;\\n\\n  bounds_phi1 = bounds_lambda1 = -(bounds_lambda0 = bounds_phi0 = Infinity);\\n  bounds_ranges = [];\\n  src_stream(feature, bounds_boundsStream);\\n\\n  // First, sort ranges by their minimum longitudes.\\n  if (n = bounds_ranges.length) {\\n    bounds_ranges.sort(bounds_rangeCompare);\\n\\n    // Then, merge any ranges that overlap.\\n    for (i = 1, a = bounds_ranges[0], merged = [a]; i < n; ++i) {\\n      b = bounds_ranges[i];\\n      if (bounds_rangeContains(a, b[0]) || bounds_rangeContains(a, b[1])) {\\n        if (bounds_angle(a[0], b[1]) > bounds_angle(a[0], a[1])) a[1] = b[1];\\n        if (bounds_angle(b[0], a[1]) > bounds_angle(a[0], a[1])) a[0] = b[0];\\n      } else {\\n        merged.push(a = b);\\n      }\\n    }\\n\\n    // Finally, find the largest gap between the merged ranges.\\n    // The final bounding box will be the inverse of this gap.\\n    for (deltaMax = -Infinity, n = merged.length - 1, i = 0, a = merged[n]; i <= n; a = b, ++i) {\\n      b = merged[i];\\n      if ((delta = bounds_angle(a[1], b[0])) > deltaMax) deltaMax = delta, bounds_lambda0 = b[0], bounds_lambda1 = a[1];\\n    }\\n  }\\n\\n  bounds_ranges = bounds_range = null;\\n\\n  return bounds_lambda0 === Infinity || bounds_phi0 === Infinity\\n      ? [[NaN, NaN], [NaN, NaN]]\\n      : [[bounds_lambda0, bounds_phi0], [bounds_lambda1, bounds_phi1]];\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-geo/src/centroid.js\\n\\n\\n\\n\\nvar centroid_W0, centroid_W1,\\n    centroid_X0, centroid_Y0, centroid_Z0,\\n    centroid_X1, centroid_Y1, centroid_Z1,\\n    centroid_X2, centroid_Y2, centroid_Z2,\\n    centroid_lambda00, centroid_phi00, // first point\\n    centroid_x0, centroid_y0, centroid_z0; // previous point\\n\\nvar centroid_centroidStream = {\\n  sphere: noop_noop,\\n  point: centroid_centroidPoint,\\n  lineStart: centroid_centroidLineStart,\\n  lineEnd: centroid_centroidLineEnd,\\n  polygonStart: function() {\\n    centroid_centroidStream.lineStart = centroid_centroidRingStart;\\n    centroid_centroidStream.lineEnd = centroid_centroidRingEnd;\\n  },\\n  polygonEnd: function() {\\n    centroid_centroidStream.lineStart = centroid_centroidLineStart;\\n    centroid_centroidStream.lineEnd = centroid_centroidLineEnd;\\n  }\\n};\\n\\n// Arithmetic mean of Cartesian vectors.\\nfunction centroid_centroidPoint(lambda, phi) {\\n  lambda *= radians, phi *= radians;\\n  var cosPhi = math_cos(phi);\\n  centroid_centroidPointCartesian(cosPhi * math_cos(lambda), cosPhi * math_sin(lambda), math_sin(phi));\\n}\\n\\nfunction centroid_centroidPointCartesian(x, y, z) {\\n  ++centroid_W0;\\n  centroid_X0 += (x - centroid_X0) / centroid_W0;\\n  centroid_Y0 += (y - centroid_Y0) / centroid_W0;\\n  centroid_Z0 += (z - centroid_Z0) / centroid_W0;\\n}\\n\\nfunction centroid_centroidLineStart() {\\n  centroid_centroidStream.point = centroid_centroidLinePointFirst;\\n}\\n\\nfunction centroid_centroidLinePointFirst(lambda, phi) {\\n  lambda *= radians, phi *= radians;\\n  var cosPhi = math_cos(phi);\\n  centroid_x0 = cosPhi * math_cos(lambda);\\n  centroid_y0 = cosPhi * math_sin(lambda);\\n  centroid_z0 = math_sin(phi);\\n  centroid_centroidStream.point = centroid_centroidLinePoint;\\n  centroid_centroidPointCartesian(centroid_x0, centroid_y0, centroid_z0);\\n}\\n\\nfunction centroid_centroidLinePoint(lambda, phi) {\\n  lambda *= radians, phi *= radians;\\n  var cosPhi = math_cos(phi),\\n      x = cosPhi * math_cos(lambda),\\n      y = cosPhi * math_sin(lambda),\\n      z = math_sin(phi),\\n      w = atan2(math_sqrt((w = centroid_y0 * z - centroid_z0 * y) * w + (w = centroid_z0 * x - centroid_x0 * z) * w + (w = centroid_x0 * y - centroid_y0 * x) * w), centroid_x0 * x + centroid_y0 * y + centroid_z0 * z);\\n  centroid_W1 += w;\\n  centroid_X1 += w * (centroid_x0 + (centroid_x0 = x));\\n  centroid_Y1 += w * (centroid_y0 + (centroid_y0 = y));\\n  centroid_Z1 += w * (centroid_z0 + (centroid_z0 = z));\\n  centroid_centroidPointCartesian(centroid_x0, centroid_y0, centroid_z0);\\n}\\n\\nfunction centroid_centroidLineEnd() {\\n  centroid_centroidStream.point = centroid_centroidPoint;\\n}\\n\\n// See J. E. Brock, The Inertia Tensor for a Spherical Triangle,\\n// J. Applied Mechanics 42, 239 (1975).\\nfunction centroid_centroidRingStart() {\\n  centroid_centroidStream.point = centroid_centroidRingPointFirst;\\n}\\n\\nfunction centroid_centroidRingEnd() {\\n  centroid_centroidRingPoint(centroid_lambda00, centroid_phi00);\\n  centroid_centroidStream.point = centroid_centroidPoint;\\n}\\n\\nfunction centroid_centroidRingPointFirst(lambda, phi) {\\n  centroid_lambda00 = lambda, centroid_phi00 = phi;\\n  lambda *= radians, phi *= radians;\\n  centroid_centroidStream.point = centroid_centroidRingPoint;\\n  var cosPhi = math_cos(phi);\\n  centroid_x0 = cosPhi * math_cos(lambda);\\n  centroid_y0 = cosPhi * math_sin(lambda);\\n  centroid_z0 = math_sin(phi);\\n  centroid_centroidPointCartesian(centroid_x0, centroid_y0, centroid_z0);\\n}\\n\\nfunction centroid_centroidRingPoint(lambda, phi) {\\n  lambda *= radians, phi *= radians;\\n  var cosPhi = math_cos(phi),\\n      x = cosPhi * math_cos(lambda),\\n      y = cosPhi * math_sin(lambda),\\n      z = math_sin(phi),\\n      cx = centroid_y0 * z - centroid_z0 * y,\\n      cy = centroid_z0 * x - centroid_x0 * z,\\n      cz = centroid_x0 * y - centroid_y0 * x,\\n      m = math_sqrt(cx * cx + cy * cy + cz * cz),\\n      w = asin(m), // line weight = angle\\n      v = m && -w / m; // area weight multiplier\\n  centroid_X2 += v * cx;\\n  centroid_Y2 += v * cy;\\n  centroid_Z2 += v * cz;\\n  centroid_W1 += w;\\n  centroid_X1 += w * (centroid_x0 + (centroid_x0 = x));\\n  centroid_Y1 += w * (centroid_y0 + (centroid_y0 = y));\\n  centroid_Z1 += w * (centroid_z0 + (centroid_z0 = z));\\n  centroid_centroidPointCartesian(centroid_x0, centroid_y0, centroid_z0);\\n}\\n\\n/* harmony default export */ var src_centroid = (function(object) {\\n  centroid_W0 = centroid_W1 =\\n  centroid_X0 = centroid_Y0 = centroid_Z0 =\\n  centroid_X1 = centroid_Y1 = centroid_Z1 =\\n  centroid_X2 = centroid_Y2 = centroid_Z2 = 0;\\n  src_stream(object, centroid_centroidStream);\\n\\n  var x = centroid_X2,\\n      y = centroid_Y2,\\n      z = centroid_Z2,\\n      m = x * x + y * y + z * z;\\n\\n  // If the area-weighted ccentroid is undefined, fall back to length-weighted ccentroid.\\n  if (m < math_epsilon2) {\\n    x = centroid_X1, y = centroid_Y1, z = centroid_Z1;\\n    // If the feature has zero length, fall back to arithmetic mean of point vectors.\\n    if (centroid_W1 < math_epsilon) x = centroid_X0, y = centroid_Y0, z = centroid_Z0;\\n    m = x * x + y * y + z * z;\\n    // If the feature still has an undefined ccentroid, then return.\\n    if (m < math_epsilon2) return [NaN, NaN];\\n  }\\n\\n  return [atan2(y, x) * math_degrees, asin(z / math_sqrt(m)) * math_degrees];\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-geo/src/constant.js\\n/* harmony default export */ var d3_geo_src_constant = (function(x) {\\n  return function() {\\n    return x;\\n  };\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-geo/src/compose.js\\n/* harmony default export */ var compose = (function(a, b) {\\n\\n  function compose(x, y) {\\n    return x = a(x, y), b(x[0], x[1]);\\n  }\\n\\n  if (a.invert && b.invert) compose.invert = function(x, y) {\\n    return x = b.invert(x, y), x && a.invert(x[0], x[1]);\\n  };\\n\\n  return compose;\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-geo/src/rotation.js\\n\\n\\n\\nfunction rotation_rotationIdentity(lambda, phi) {\\n  return [lambda > src_math_pi ? lambda - src_math_tau : lambda < -src_math_pi ? lambda + src_math_tau : lambda, phi];\\n}\\n\\nrotation_rotationIdentity.invert = rotation_rotationIdentity;\\n\\nfunction rotation_rotateRadians(deltaLambda, deltaPhi, deltaGamma) {\\n  return (deltaLambda %= src_math_tau) ? (deltaPhi || deltaGamma ? compose(rotation_rotationLambda(deltaLambda), rotation_rotationPhiGamma(deltaPhi, deltaGamma))\\n    : rotation_rotationLambda(deltaLambda))\\n    : (deltaPhi || deltaGamma ? rotation_rotationPhiGamma(deltaPhi, deltaGamma)\\n    : rotation_rotationIdentity);\\n}\\n\\nfunction rotation_forwardRotationLambda(deltaLambda) {\\n  return function(lambda, phi) {\\n    return lambda += deltaLambda, [lambda > src_math_pi ? lambda - src_math_tau : lambda < -src_math_pi ? lambda + src_math_tau : lambda, phi];\\n  };\\n}\\n\\nfunction rotation_rotationLambda(deltaLambda) {\\n  var rotation = rotation_forwardRotationLambda(deltaLambda);\\n  rotation.invert = rotation_forwardRotationLambda(-deltaLambda);\\n  return rotation;\\n}\\n\\nfunction rotation_rotationPhiGamma(deltaPhi, deltaGamma) {\\n  var cosDeltaPhi = math_cos(deltaPhi),\\n      sinDeltaPhi = math_sin(deltaPhi),\\n      cosDeltaGamma = math_cos(deltaGamma),\\n      sinDeltaGamma = math_sin(deltaGamma);\\n\\n  function rotation(lambda, phi) {\\n    var cosPhi = math_cos(phi),\\n        x = math_cos(lambda) * cosPhi,\\n        y = math_sin(lambda) * cosPhi,\\n        z = math_sin(phi),\\n        k = z * cosDeltaPhi + x * sinDeltaPhi;\\n    return [\\n      atan2(y * cosDeltaGamma - k * sinDeltaGamma, x * cosDeltaPhi - z * sinDeltaPhi),\\n      asin(k * cosDeltaGamma + y * sinDeltaGamma)\\n    ];\\n  }\\n\\n  rotation.invert = function(lambda, phi) {\\n    var cosPhi = math_cos(phi),\\n        x = math_cos(lambda) * cosPhi,\\n        y = math_sin(lambda) * cosPhi,\\n        z = math_sin(phi),\\n        k = z * cosDeltaGamma - y * sinDeltaGamma;\\n    return [\\n      atan2(y * cosDeltaGamma + z * sinDeltaGamma, x * cosDeltaPhi + k * sinDeltaPhi),\\n      asin(k * cosDeltaPhi - x * sinDeltaPhi)\\n    ];\\n  };\\n\\n  return rotation;\\n}\\n\\n/* harmony default export */ var src_rotation = (function(rotate) {\\n  rotate = rotation_rotateRadians(rotate[0] * radians, rotate[1] * radians, rotate.length > 2 ? rotate[2] * radians : 0);\\n\\n  function forward(coordinates) {\\n    coordinates = rotate(coordinates[0] * radians, coordinates[1] * radians);\\n    return coordinates[0] *= math_degrees, coordinates[1] *= math_degrees, coordinates;\\n  }\\n\\n  forward.invert = function(coordinates) {\\n    coordinates = rotate.invert(coordinates[0] * radians, coordinates[1] * radians);\\n    return coordinates[0] *= math_degrees, coordinates[1] *= math_degrees, coordinates;\\n  };\\n\\n  return forward;\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-geo/src/circle.js\\n\\n\\n\\n\\n\\n// Generates a circle centered at [0°, 0°], with a given radius and precision.\\nfunction circle_circleStream(stream, radius, delta, direction, t0, t1) {\\n  if (!delta) return;\\n  var cosRadius = math_cos(radius),\\n      sinRadius = math_sin(radius),\\n      step = direction * delta;\\n  if (t0 == null) {\\n    t0 = radius + direction * src_math_tau;\\n    t1 = radius - step / 2;\\n  } else {\\n    t0 = circle_circleRadius(cosRadius, t0);\\n    t1 = circle_circleRadius(cosRadius, t1);\\n    if (direction > 0 ? t0 < t1 : t0 > t1) t0 += direction * src_math_tau;\\n  }\\n  for (var point, t = t0; direction > 0 ? t > t1 : t < t1; t -= step) {\\n    point = cartesian_spherical([cosRadius, -sinRadius * math_cos(t), -sinRadius * math_sin(t)]);\\n    stream.point(point[0], point[1]);\\n  }\\n}\\n\\n// Returns the signed angle of a cartesian point relative to [cosRadius, 0, 0].\\nfunction circle_circleRadius(cosRadius, point) {\\n  point = cartesian_cartesian(point), point[0] -= cosRadius;\\n  cartesian_cartesianNormalizeInPlace(point);\\n  var radius = acos(-point[1]);\\n  return ((-point[2] < 0 ? -radius : radius) + src_math_tau - math_epsilon) % src_math_tau;\\n}\\n\\n/* harmony default export */ var src_circle = (function() {\\n  var center = d3_geo_src_constant([0, 0]),\\n      radius = d3_geo_src_constant(90),\\n      precision = d3_geo_src_constant(6),\\n      ring,\\n      rotate,\\n      stream = {point: point};\\n\\n  function point(x, y) {\\n    ring.push(x = rotate(x, y));\\n    x[0] *= math_degrees, x[1] *= math_degrees;\\n  }\\n\\n  function circle() {\\n    var c = center.apply(this, arguments),\\n        r = radius.apply(this, arguments) * radians,\\n        p = precision.apply(this, arguments) * radians;\\n    ring = [];\\n    rotate = rotation_rotateRadians(-c[0] * radians, -c[1] * radians, 0).invert;\\n    circle_circleStream(stream, r, p, 1);\\n    c = {type: \"Polygon\", coordinates: [ring]};\\n    ring = rotate = null;\\n    return c;\\n  }\\n\\n  circle.center = function(_) {\\n    return arguments.length ? (center = typeof _ === \"function\" ? _ : d3_geo_src_constant([+_[0], +_[1]]), circle) : center;\\n  };\\n\\n  circle.radius = function(_) {\\n    return arguments.length ? (radius = typeof _ === \"function\" ? _ : d3_geo_src_constant(+_), circle) : radius;\\n  };\\n\\n  circle.precision = function(_) {\\n    return arguments.length ? (precision = typeof _ === \"function\" ? _ : d3_geo_src_constant(+_), circle) : precision;\\n  };\\n\\n  return circle;\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-geo/src/clip/buffer.js\\n\\n\\n/* harmony default export */ var clip_buffer = (function() {\\n  var lines = [],\\n      line;\\n  return {\\n    point: function(x, y) {\\n      line.push([x, y]);\\n    },\\n    lineStart: function() {\\n      lines.push(line = []);\\n    },\\n    lineEnd: noop_noop,\\n    rejoin: function() {\\n      if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));\\n    },\\n    result: function() {\\n      var result = lines;\\n      lines = [];\\n      line = null;\\n      return result;\\n    }\\n  };\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-geo/src/pointEqual.js\\n\\n\\n/* harmony default export */ var pointEqual = (function(a, b) {\\n  return abs(a[0] - b[0]) < math_epsilon && abs(a[1] - b[1]) < math_epsilon;\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-geo/src/clip/rejoin.js\\n\\n\\nfunction rejoin_Intersection(point, points, other, entry) {\\n  this.x = point;\\n  this.z = points;\\n  this.o = other; // another intersection\\n  this.e = entry; // is an entry?\\n  this.v = false; // visited\\n  this.n = this.p = null; // next & previous\\n}\\n\\n// A generalized polygon clipping algorithm: given a polygon that has been cut\\n// into its visible line segments, and rejoins the segments by interpolating\\n// along the clip edge.\\n/* harmony default export */ var rejoin = (function(segments, compareIntersection, startInside, interpolate, stream) {\\n  var subject = [],\\n      clip = [],\\n      i,\\n      n;\\n\\n  segments.forEach(function(segment) {\\n    if ((n = segment.length - 1) <= 0) return;\\n    var n, p0 = segment[0], p1 = segment[n], x;\\n\\n    // If the first and last points of a segment are coincident, then treat as a\\n    // closed ring. TODO if all rings are closed, then the winding order of the\\n    // exterior ring should be checked.\\n    if (pointEqual(p0, p1)) {\\n      stream.lineStart();\\n      for (i = 0; i < n; ++i) stream.point((p0 = segment[i])[0], p0[1]);\\n      stream.lineEnd();\\n      return;\\n    }\\n\\n    subject.push(x = new rejoin_Intersection(p0, segment, null, true));\\n    clip.push(x.o = new rejoin_Intersection(p0, null, x, false));\\n    subject.push(x = new rejoin_Intersection(p1, segment, null, false));\\n    clip.push(x.o = new rejoin_Intersection(p1, null, x, true));\\n  });\\n\\n  if (!subject.length) return;\\n\\n  clip.sort(compareIntersection);\\n  rejoin_link(subject);\\n  rejoin_link(clip);\\n\\n  for (i = 0, n = clip.length; i < n; ++i) {\\n    clip[i].e = startInside = !startInside;\\n  }\\n\\n  var start = subject[0],\\n      points,\\n      point;\\n\\n  while (1) {\\n    // Find first unvisited intersection.\\n    var current = start,\\n        isSubject = true;\\n    while (current.v) if ((current = current.n) === start) return;\\n    points = current.z;\\n    stream.lineStart();\\n    do {\\n      current.v = current.o.v = true;\\n      if (current.e) {\\n        if (isSubject) {\\n          for (i = 0, n = points.length; i < n; ++i) stream.point((point = points[i])[0], point[1]);\\n        } else {\\n          interpolate(current.x, current.n.x, 1, stream);\\n        }\\n        current = current.n;\\n      } else {\\n        if (isSubject) {\\n          points = current.p.z;\\n          for (i = points.length - 1; i >= 0; --i) stream.point((point = points[i])[0], point[1]);\\n        } else {\\n          interpolate(current.x, current.p.x, -1, stream);\\n        }\\n        current = current.p;\\n      }\\n      current = current.o;\\n      points = current.z;\\n      isSubject = !isSubject;\\n    } while (!current.v);\\n    stream.lineEnd();\\n  }\\n});\\n\\nfunction rejoin_link(array) {\\n  if (!(n = array.length)) return;\\n  var n,\\n      i = 0,\\n      a = array[0],\\n      b;\\n  while (++i < n) {\\n    a.n = b = array[i];\\n    b.p = a;\\n    a = b;\\n  }\\n  a.n = b = array[0];\\n  b.p = a;\\n}\\n\\n// CONCATENATED MODULE: ./node_modules/d3-geo/src/polygonContains.js\\n\\n\\n\\n\\nvar polygonContains_sum = adder();\\n\\n/* harmony default export */ var polygonContains = (function(polygon, point) {\\n  var lambda = point[0],\\n      phi = point[1],\\n      normal = [math_sin(lambda), -math_cos(lambda), 0],\\n      angle = 0,\\n      winding = 0;\\n\\n  polygonContains_sum.reset();\\n\\n  for (var i = 0, n = polygon.length; i < n; ++i) {\\n    if (!(m = (ring = polygon[i]).length)) continue;\\n    var ring,\\n        m,\\n        point0 = ring[m - 1],\\n        lambda0 = point0[0],\\n        phi0 = point0[1] / 2 + quarterPi,\\n        sinPhi0 = math_sin(phi0),\\n        cosPhi0 = math_cos(phi0);\\n\\n    for (var j = 0; j < m; ++j, lambda0 = lambda1, sinPhi0 = sinPhi1, cosPhi0 = cosPhi1, point0 = point1) {\\n      var point1 = ring[j],\\n          lambda1 = point1[0],\\n          phi1 = point1[1] / 2 + quarterPi,\\n          sinPhi1 = math_sin(phi1),\\n          cosPhi1 = math_cos(phi1),\\n          delta = lambda1 - lambda0,\\n          sign = delta >= 0 ? 1 : -1,\\n          absDelta = sign * delta,\\n          antimeridian = absDelta > src_math_pi,\\n          k = sinPhi0 * sinPhi1;\\n\\n      polygonContains_sum.add(atan2(k * sign * math_sin(absDelta), cosPhi0 * cosPhi1 + k * math_cos(absDelta)));\\n      angle += antimeridian ? delta + sign * src_math_tau : delta;\\n\\n      // Are the longitudes either side of the point’s meridian (lambda),\\n      // and are the latitudes smaller than the parallel (phi)?\\n      if (antimeridian ^ lambda0 >= lambda ^ lambda1 >= lambda) {\\n        var arc = cartesian_cartesianCross(cartesian_cartesian(point0), cartesian_cartesian(point1));\\n        cartesian_cartesianNormalizeInPlace(arc);\\n        var intersection = cartesian_cartesianCross(normal, arc);\\n        cartesian_cartesianNormalizeInPlace(intersection);\\n        var phiArc = (antimeridian ^ delta >= 0 ? -1 : 1) * asin(intersection[2]);\\n        if (phi > phiArc || phi === phiArc && (arc[0] || arc[1])) {\\n          winding += antimeridian ^ delta >= 0 ? 1 : -1;\\n        }\\n      }\\n    }\\n  }\\n\\n  // First, determine whether the South pole is inside or outside:\\n  //\\n  // It is inside if:\\n  // * the polygon winds around it in a clockwise direction.\\n  // * the polygon does not (cumulatively) wind around it, but has a negative\\n  //   (counter-clockwise) area.\\n  //\\n  // Second, count the (signed) number of times a segment crosses a lambda\\n  // from the point to the South pole.  If it is zero, then the point is the\\n  // same side as the South pole.\\n\\n  return (angle < -math_epsilon || angle < math_epsilon && polygonContains_sum < -math_epsilon) ^ (winding & 1);\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-geo/src/clip/index.js\\n\\n\\n\\n\\n\\n\\n/* harmony default export */ var src_clip = (function(pointVisible, clipLine, interpolate, start) {\\n  return function(sink) {\\n    var line = clipLine(sink),\\n        ringBuffer = clip_buffer(),\\n        ringSink = clipLine(ringBuffer),\\n        polygonStarted = false,\\n        polygon,\\n        segments,\\n        ring;\\n\\n    var clip = {\\n      point: point,\\n      lineStart: lineStart,\\n      lineEnd: lineEnd,\\n      polygonStart: function() {\\n        clip.point = pointRing;\\n        clip.lineStart = ringStart;\\n        clip.lineEnd = ringEnd;\\n        segments = [];\\n        polygon = [];\\n      },\\n      polygonEnd: function() {\\n        clip.point = point;\\n        clip.lineStart = lineStart;\\n        clip.lineEnd = lineEnd;\\n        segments = src_merge(segments);\\n        var startInside = polygonContains(polygon, start);\\n        if (segments.length) {\\n          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\\n          rejoin(segments, clip_compareIntersection, startInside, interpolate, sink);\\n        } else if (startInside) {\\n          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\\n          sink.lineStart();\\n          interpolate(null, null, 1, sink);\\n          sink.lineEnd();\\n        }\\n        if (polygonStarted) sink.polygonEnd(), polygonStarted = false;\\n        segments = polygon = null;\\n      },\\n      sphere: function() {\\n        sink.polygonStart();\\n        sink.lineStart();\\n        interpolate(null, null, 1, sink);\\n        sink.lineEnd();\\n        sink.polygonEnd();\\n      }\\n    };\\n\\n    function point(lambda, phi) {\\n      if (pointVisible(lambda, phi)) sink.point(lambda, phi);\\n    }\\n\\n    function pointLine(lambda, phi) {\\n      line.point(lambda, phi);\\n    }\\n\\n    function lineStart() {\\n      clip.point = pointLine;\\n      line.lineStart();\\n    }\\n\\n    function lineEnd() {\\n      clip.point = point;\\n      line.lineEnd();\\n    }\\n\\n    function pointRing(lambda, phi) {\\n      ring.push([lambda, phi]);\\n      ringSink.point(lambda, phi);\\n    }\\n\\n    function ringStart() {\\n      ringSink.lineStart();\\n      ring = [];\\n    }\\n\\n    function ringEnd() {\\n      pointRing(ring[0][0], ring[0][1]);\\n      ringSink.lineEnd();\\n\\n      var clean = ringSink.clean(),\\n          ringSegments = ringBuffer.result(),\\n          i, n = ringSegments.length, m,\\n          segment,\\n          point;\\n\\n      ring.pop();\\n      polygon.push(ring);\\n      ring = null;\\n\\n      if (!n) return;\\n\\n      // No intersections.\\n      if (clean & 1) {\\n        segment = ringSegments[0];\\n        if ((m = segment.length - 1) > 0) {\\n          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\\n          sink.lineStart();\\n          for (i = 0; i < m; ++i) sink.point((point = segment[i])[0], point[1]);\\n          sink.lineEnd();\\n        }\\n        return;\\n      }\\n\\n      // Rejoin connected segments.\\n      // TODO reuse ringBuffer.rejoin()?\\n      if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));\\n\\n      segments.push(ringSegments.filter(clip_validSegment));\\n    }\\n\\n    return clip;\\n  };\\n});\\n\\nfunction clip_validSegment(segment) {\\n  return segment.length > 1;\\n}\\n\\n// Intersections are sorted along the clip edge. For both antimeridian cutting\\n// and circle clipping, the same comparison is used.\\nfunction clip_compareIntersection(a, b) {\\n  return ((a = a.x)[0] < 0 ? a[1] - src_math_halfPi - math_epsilon : src_math_halfPi - a[1])\\n       - ((b = b.x)[0] < 0 ? b[1] - src_math_halfPi - math_epsilon : src_math_halfPi - b[1]);\\n}\\n\\n// CONCATENATED MODULE: ./node_modules/d3-geo/src/clip/antimeridian.js\\n\\n\\n\\n/* harmony default export */ var clip_antimeridian = (src_clip(\\n  function() { return true; },\\n  antimeridian_clipAntimeridianLine,\\n  antimeridian_clipAntimeridianInterpolate,\\n  [-src_math_pi, -src_math_halfPi]\\n));\\n\\n// Takes a line and cuts into visible segments. Return values: 0 - there were\\n// intersections or the line was empty; 1 - no intersections; 2 - there were\\n// intersections, and the first and last segments should be rejoined.\\nfunction antimeridian_clipAntimeridianLine(stream) {\\n  var lambda0 = NaN,\\n      phi0 = NaN,\\n      sign0 = NaN,\\n      clean; // no intersections\\n\\n  return {\\n    lineStart: function() {\\n      stream.lineStart();\\n      clean = 1;\\n    },\\n    point: function(lambda1, phi1) {\\n      var sign1 = lambda1 > 0 ? src_math_pi : -src_math_pi,\\n          delta = abs(lambda1 - lambda0);\\n      if (abs(delta - src_math_pi) < math_epsilon) { // line crosses a pole\\n        stream.point(lambda0, phi0 = (phi0 + phi1) / 2 > 0 ? src_math_halfPi : -src_math_halfPi);\\n        stream.point(sign0, phi0);\\n        stream.lineEnd();\\n        stream.lineStart();\\n        stream.point(sign1, phi0);\\n        stream.point(lambda1, phi0);\\n        clean = 0;\\n      } else if (sign0 !== sign1 && delta >= src_math_pi) { // line crosses antimeridian\\n        if (abs(lambda0 - sign0) < math_epsilon) lambda0 -= sign0 * math_epsilon; // handle degeneracies\\n        if (abs(lambda1 - sign1) < math_epsilon) lambda1 -= sign1 * math_epsilon;\\n        phi0 = antimeridian_clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1);\\n        stream.point(sign0, phi0);\\n        stream.lineEnd();\\n        stream.lineStart();\\n        stream.point(sign1, phi0);\\n        clean = 0;\\n      }\\n      stream.point(lambda0 = lambda1, phi0 = phi1);\\n      sign0 = sign1;\\n    },\\n    lineEnd: function() {\\n      stream.lineEnd();\\n      lambda0 = phi0 = NaN;\\n    },\\n    clean: function() {\\n      return 2 - clean; // if intersections, rejoin first and last segments\\n    }\\n  };\\n}\\n\\nfunction antimeridian_clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1) {\\n  var cosPhi0,\\n      cosPhi1,\\n      sinLambda0Lambda1 = math_sin(lambda0 - lambda1);\\n  return abs(sinLambda0Lambda1) > math_epsilon\\n      ? atan((math_sin(phi0) * (cosPhi1 = math_cos(phi1)) * math_sin(lambda1)\\n          - math_sin(phi1) * (cosPhi0 = math_cos(phi0)) * math_sin(lambda0))\\n          / (cosPhi0 * cosPhi1 * sinLambda0Lambda1))\\n      : (phi0 + phi1) / 2;\\n}\\n\\nfunction antimeridian_clipAntimeridianInterpolate(from, to, direction, stream) {\\n  var phi;\\n  if (from == null) {\\n    phi = direction * src_math_halfPi;\\n    stream.point(-src_math_pi, phi);\\n    stream.point(0, phi);\\n    stream.point(src_math_pi, phi);\\n    stream.point(src_math_pi, 0);\\n    stream.point(src_math_pi, -phi);\\n    stream.point(0, -phi);\\n    stream.point(-src_math_pi, -phi);\\n    stream.point(-src_math_pi, 0);\\n    stream.point(-src_math_pi, phi);\\n  } else if (abs(from[0] - to[0]) > math_epsilon) {\\n    var lambda = from[0] < to[0] ? src_math_pi : -src_math_pi;\\n    phi = direction * lambda / 2;\\n    stream.point(-lambda, phi);\\n    stream.point(0, phi);\\n    stream.point(lambda, phi);\\n  } else {\\n    stream.point(to[0], to[1]);\\n  }\\n}\\n\\n// CONCATENATED MODULE: ./node_modules/d3-geo/src/clip/circle.js\\n\\n\\n\\n\\n\\n\\n/* harmony default export */ var clip_circle = (function(radius) {\\n  var cr = math_cos(radius),\\n      delta = 6 * radians,\\n      smallRadius = cr > 0,\\n      notHemisphere = abs(cr) > math_epsilon; // TODO optimise for this common case\\n\\n  function interpolate(from, to, direction, stream) {\\n    circle_circleStream(stream, radius, delta, direction, from, to);\\n  }\\n\\n  function visible(lambda, phi) {\\n    return math_cos(lambda) * math_cos(phi) > cr;\\n  }\\n\\n  // Takes a line and cuts into visible segments. Return values used for polygon\\n  // clipping: 0 - there were intersections or the line was empty; 1 - no\\n  // intersections 2 - there were intersections, and the first and last segments\\n  // should be rejoined.\\n  function clipLine(stream) {\\n    var point0, // previous point\\n        c0, // code for previous point\\n        v0, // visibility of previous point\\n        v00, // visibility of first point\\n        clean; // no intersections\\n    return {\\n      lineStart: function() {\\n        v00 = v0 = false;\\n        clean = 1;\\n      },\\n      point: function(lambda, phi) {\\n        var point1 = [lambda, phi],\\n            point2,\\n            v = visible(lambda, phi),\\n            c = smallRadius\\n              ? v ? 0 : code(lambda, phi)\\n              : v ? code(lambda + (lambda < 0 ? src_math_pi : -src_math_pi), phi) : 0;\\n        if (!point0 && (v00 = v0 = v)) stream.lineStart();\\n        // Handle degeneracies.\\n        // TODO ignore if not clipping polygons.\\n        if (v !== v0) {\\n          point2 = intersect(point0, point1);\\n          if (!point2 || pointEqual(point0, point2) || pointEqual(point1, point2)) {\\n            point1[0] += math_epsilon;\\n            point1[1] += math_epsilon;\\n            v = visible(point1[0], point1[1]);\\n          }\\n        }\\n        if (v !== v0) {\\n          clean = 0;\\n          if (v) {\\n            // outside going in\\n            stream.lineStart();\\n            point2 = intersect(point1, point0);\\n            stream.point(point2[0], point2[1]);\\n          } else {\\n            // inside going out\\n            point2 = intersect(point0, point1);\\n            stream.point(point2[0], point2[1]);\\n            stream.lineEnd();\\n          }\\n          point0 = point2;\\n        } else if (notHemisphere && point0 && smallRadius ^ v) {\\n          var t;\\n          // If the codes for two points are different, or are both zero,\\n          // and there this segment intersects with the small circle.\\n          if (!(c & c0) && (t = intersect(point1, point0, true))) {\\n            clean = 0;\\n            if (smallRadius) {\\n              stream.lineStart();\\n              stream.point(t[0][0], t[0][1]);\\n              stream.point(t[1][0], t[1][1]);\\n              stream.lineEnd();\\n            } else {\\n              stream.point(t[1][0], t[1][1]);\\n              stream.lineEnd();\\n              stream.lineStart();\\n              stream.point(t[0][0], t[0][1]);\\n            }\\n          }\\n        }\\n        if (v && (!point0 || !pointEqual(point0, point1))) {\\n          stream.point(point1[0], point1[1]);\\n        }\\n        point0 = point1, v0 = v, c0 = c;\\n      },\\n      lineEnd: function() {\\n        if (v0) stream.lineEnd();\\n        point0 = null;\\n      },\\n      // Rejoin first and last segments if there were intersections and the first\\n      // and last points were visible.\\n      clean: function() {\\n        return clean | ((v00 && v0) << 1);\\n      }\\n    };\\n  }\\n\\n  // Intersects the great circle between a and b with the clip circle.\\n  function intersect(a, b, two) {\\n    var pa = cartesian_cartesian(a),\\n        pb = cartesian_cartesian(b);\\n\\n    // We have two planes, n1.p = d1 and n2.p = d2.\\n    // Find intersection line p(t) = c1 n1 + c2 n2 + t (n1 ⨯ n2).\\n    var n1 = [1, 0, 0], // normal\\n        n2 = cartesian_cartesianCross(pa, pb),\\n        n2n2 = cartesian_cartesianDot(n2, n2),\\n        n1n2 = n2[0], // cartesianDot(n1, n2),\\n        determinant = n2n2 - n1n2 * n1n2;\\n\\n    // Two polar points.\\n    if (!determinant) return !two && a;\\n\\n    var c1 =  cr * n2n2 / determinant,\\n        c2 = -cr * n1n2 / determinant,\\n        n1xn2 = cartesian_cartesianCross(n1, n2),\\n        A = cartesian_cartesianScale(n1, c1),\\n        B = cartesian_cartesianScale(n2, c2);\\n    cartesian_cartesianAddInPlace(A, B);\\n\\n    // Solve |p(t)|^2 = 1.\\n    var u = n1xn2,\\n        w = cartesian_cartesianDot(A, u),\\n        uu = cartesian_cartesianDot(u, u),\\n        t2 = w * w - uu * (cartesian_cartesianDot(A, A) - 1);\\n\\n    if (t2 < 0) return;\\n\\n    var t = math_sqrt(t2),\\n        q = cartesian_cartesianScale(u, (-w - t) / uu);\\n    cartesian_cartesianAddInPlace(q, A);\\n    q = cartesian_spherical(q);\\n\\n    if (!two) return q;\\n\\n    // Two intersection points.\\n    var lambda0 = a[0],\\n        lambda1 = b[0],\\n        phi0 = a[1],\\n        phi1 = b[1],\\n        z;\\n\\n    if (lambda1 < lambda0) z = lambda0, lambda0 = lambda1, lambda1 = z;\\n\\n    var delta = lambda1 - lambda0,\\n        polar = abs(delta - src_math_pi) < math_epsilon,\\n        meridian = polar || delta < math_epsilon;\\n\\n    if (!polar && phi1 < phi0) z = phi0, phi0 = phi1, phi1 = z;\\n\\n    // Check that the first point is between a and b.\\n    if (meridian\\n        ? polar\\n          ? phi0 + phi1 > 0 ^ q[1] < (abs(q[0] - lambda0) < math_epsilon ? phi0 : phi1)\\n          : phi0 <= q[1] && q[1] <= phi1\\n        : delta > src_math_pi ^ (lambda0 <= q[0] && q[0] <= lambda1)) {\\n      var q1 = cartesian_cartesianScale(u, (-w + t) / uu);\\n      cartesian_cartesianAddInPlace(q1, A);\\n      return [q, cartesian_spherical(q1)];\\n    }\\n  }\\n\\n  // Generates a 4-bit vector representing the location of a point relative to\\n  // the small circle\\'s bounding box.\\n  function code(lambda, phi) {\\n    var r = smallRadius ? radius : src_math_pi - radius,\\n        code = 0;\\n    if (lambda < -r) code |= 1; // left\\n    else if (lambda > r) code |= 2; // right\\n    if (phi < -r) code |= 4; // below\\n    else if (phi > r) code |= 8; // above\\n    return code;\\n  }\\n\\n  return src_clip(visible, clipLine, interpolate, smallRadius ? [0, -radius] : [-src_math_pi, radius - src_math_pi]);\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-geo/src/clip/line.js\\n/* harmony default export */ var clip_line = (function(a, b, x0, y0, x1, y1) {\\n  var ax = a[0],\\n      ay = a[1],\\n      bx = b[0],\\n      by = b[1],\\n      t0 = 0,\\n      t1 = 1,\\n      dx = bx - ax,\\n      dy = by - ay,\\n      r;\\n\\n  r = x0 - ax;\\n  if (!dx && r > 0) return;\\n  r /= dx;\\n  if (dx < 0) {\\n    if (r < t0) return;\\n    if (r < t1) t1 = r;\\n  } else if (dx > 0) {\\n    if (r > t1) return;\\n    if (r > t0) t0 = r;\\n  }\\n\\n  r = x1 - ax;\\n  if (!dx && r < 0) return;\\n  r /= dx;\\n  if (dx < 0) {\\n    if (r > t1) return;\\n    if (r > t0) t0 = r;\\n  } else if (dx > 0) {\\n    if (r < t0) return;\\n    if (r < t1) t1 = r;\\n  }\\n\\n  r = y0 - ay;\\n  if (!dy && r > 0) return;\\n  r /= dy;\\n  if (dy < 0) {\\n    if (r < t0) return;\\n    if (r < t1) t1 = r;\\n  } else if (dy > 0) {\\n    if (r > t1) return;\\n    if (r > t0) t0 = r;\\n  }\\n\\n  r = y1 - ay;\\n  if (!dy && r < 0) return;\\n  r /= dy;\\n  if (dy < 0) {\\n    if (r > t1) return;\\n    if (r > t0) t0 = r;\\n  } else if (dy > 0) {\\n    if (r < t0) return;\\n    if (r < t1) t1 = r;\\n  }\\n\\n  if (t0 > 0) a[0] = ax + t0 * dx, a[1] = ay + t0 * dy;\\n  if (t1 < 1) b[0] = ax + t1 * dx, b[1] = ay + t1 * dy;\\n  return true;\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-geo/src/clip/rectangle.js\\n\\n\\n\\n\\n\\n\\nvar rectangle_clipMax = 1e9, rectangle_clipMin = -rectangle_clipMax;\\n\\n// TODO Use d3-polygon’s polygonContains here for the ring check?\\n// TODO Eliminate duplicate buffering in clipBuffer and polygon.push?\\n\\nfunction rectangle_clipRectangle(x0, y0, x1, y1) {\\n\\n  function visible(x, y) {\\n    return x0 <= x && x <= x1 && y0 <= y && y <= y1;\\n  }\\n\\n  function interpolate(from, to, direction, stream) {\\n    var a = 0, a1 = 0;\\n    if (from == null\\n        || (a = corner(from, direction)) !== (a1 = corner(to, direction))\\n        || comparePoint(from, to) < 0 ^ direction > 0) {\\n      do stream.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);\\n      while ((a = (a + direction + 4) % 4) !== a1);\\n    } else {\\n      stream.point(to[0], to[1]);\\n    }\\n  }\\n\\n  function corner(p, direction) {\\n    return abs(p[0] - x0) < math_epsilon ? direction > 0 ? 0 : 3\\n        : abs(p[0] - x1) < math_epsilon ? direction > 0 ? 2 : 1\\n        : abs(p[1] - y0) < math_epsilon ? direction > 0 ? 1 : 0\\n        : direction > 0 ? 3 : 2; // abs(p[1] - y1) < epsilon\\n  }\\n\\n  function compareIntersection(a, b) {\\n    return comparePoint(a.x, b.x);\\n  }\\n\\n  function comparePoint(a, b) {\\n    var ca = corner(a, 1),\\n        cb = corner(b, 1);\\n    return ca !== cb ? ca - cb\\n        : ca === 0 ? b[1] - a[1]\\n        : ca === 1 ? a[0] - b[0]\\n        : ca === 2 ? a[1] - b[1]\\n        : b[0] - a[0];\\n  }\\n\\n  return function(stream) {\\n    var activeStream = stream,\\n        bufferStream = clip_buffer(),\\n        segments,\\n        polygon,\\n        ring,\\n        x__, y__, v__, // first point\\n        x_, y_, v_, // previous point\\n        first,\\n        clean;\\n\\n    var clipStream = {\\n      point: point,\\n      lineStart: lineStart,\\n      lineEnd: lineEnd,\\n      polygonStart: polygonStart,\\n      polygonEnd: polygonEnd\\n    };\\n\\n    function point(x, y) {\\n      if (visible(x, y)) activeStream.point(x, y);\\n    }\\n\\n    function polygonInside() {\\n      var winding = 0;\\n\\n      for (var i = 0, n = polygon.length; i < n; ++i) {\\n        for (var ring = polygon[i], j = 1, m = ring.length, point = ring[0], a0, a1, b0 = point[0], b1 = point[1]; j < m; ++j) {\\n          a0 = b0, a1 = b1, point = ring[j], b0 = point[0], b1 = point[1];\\n          if (a1 <= y1) { if (b1 > y1 && (b0 - a0) * (y1 - a1) > (b1 - a1) * (x0 - a0)) ++winding; }\\n          else { if (b1 <= y1 && (b0 - a0) * (y1 - a1) < (b1 - a1) * (x0 - a0)) --winding; }\\n        }\\n      }\\n\\n      return winding;\\n    }\\n\\n    // Buffer geometry within a polygon and then clip it en masse.\\n    function polygonStart() {\\n      activeStream = bufferStream, segments = [], polygon = [], clean = true;\\n    }\\n\\n    function polygonEnd() {\\n      var startInside = polygonInside(),\\n          cleanInside = clean && startInside,\\n          visible = (segments = src_merge(segments)).length;\\n      if (cleanInside || visible) {\\n        stream.polygonStart();\\n        if (cleanInside) {\\n          stream.lineStart();\\n          interpolate(null, null, 1, stream);\\n          stream.lineEnd();\\n        }\\n        if (visible) {\\n          rejoin(segments, compareIntersection, startInside, interpolate, stream);\\n        }\\n        stream.polygonEnd();\\n      }\\n      activeStream = stream, segments = polygon = ring = null;\\n    }\\n\\n    function lineStart() {\\n      clipStream.point = linePoint;\\n      if (polygon) polygon.push(ring = []);\\n      first = true;\\n      v_ = false;\\n      x_ = y_ = NaN;\\n    }\\n\\n    // TODO rather than special-case polygons, simply handle them separately.\\n    // Ideally, coincident intersection points should be jittered to avoid\\n    // clipping issues.\\n    function lineEnd() {\\n      if (segments) {\\n        linePoint(x__, y__);\\n        if (v__ && v_) bufferStream.rejoin();\\n        segments.push(bufferStream.result());\\n      }\\n      clipStream.point = point;\\n      if (v_) activeStream.lineEnd();\\n    }\\n\\n    function linePoint(x, y) {\\n      var v = visible(x, y);\\n      if (polygon) ring.push([x, y]);\\n      if (first) {\\n        x__ = x, y__ = y, v__ = v;\\n        first = false;\\n        if (v) {\\n          activeStream.lineStart();\\n          activeStream.point(x, y);\\n        }\\n      } else {\\n        if (v && v_) activeStream.point(x, y);\\n        else {\\n          var a = [x_ = Math.max(rectangle_clipMin, Math.min(rectangle_clipMax, x_)), y_ = Math.max(rectangle_clipMin, Math.min(rectangle_clipMax, y_))],\\n              b = [x = Math.max(rectangle_clipMin, Math.min(rectangle_clipMax, x)), y = Math.max(rectangle_clipMin, Math.min(rectangle_clipMax, y))];\\n          if (clip_line(a, b, x0, y0, x1, y1)) {\\n            if (!v_) {\\n              activeStream.lineStart();\\n              activeStream.point(a[0], a[1]);\\n            }\\n            activeStream.point(b[0], b[1]);\\n            if (!v) activeStream.lineEnd();\\n            clean = false;\\n          } else if (v) {\\n            activeStream.lineStart();\\n            activeStream.point(x, y);\\n            clean = false;\\n          }\\n        }\\n      }\\n      x_ = x, y_ = y, v_ = v;\\n    }\\n\\n    return clipStream;\\n  };\\n}\\n\\n// CONCATENATED MODULE: ./node_modules/d3-geo/src/clip/extent.js\\n\\n\\n/* harmony default export */ var clip_extent = (function() {\\n  var x0 = 0,\\n      y0 = 0,\\n      x1 = 960,\\n      y1 = 500,\\n      cache,\\n      cacheStream,\\n      clip;\\n\\n  return clip = {\\n    stream: function(stream) {\\n      return cache && cacheStream === stream ? cache : cache = rectangle_clipRectangle(x0, y0, x1, y1)(cacheStream = stream);\\n    },\\n    extent: function(_) {\\n      return arguments.length ? (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1], cache = cacheStream = null, clip) : [[x0, y0], [x1, y1]];\\n    }\\n  };\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-geo/src/length.js\\n\\n\\n\\n\\n\\nvar length_lengthSum = adder(),\\n    length_lambda0,\\n    length_sinPhi0,\\n    length_cosPhi0;\\n\\nvar length_lengthStream = {\\n  sphere: noop_noop,\\n  point: noop_noop,\\n  lineStart: length_lengthLineStart,\\n  lineEnd: noop_noop,\\n  polygonStart: noop_noop,\\n  polygonEnd: noop_noop\\n};\\n\\nfunction length_lengthLineStart() {\\n  length_lengthStream.point = length_lengthPointFirst;\\n  length_lengthStream.lineEnd = length_lengthLineEnd;\\n}\\n\\nfunction length_lengthLineEnd() {\\n  length_lengthStream.point = length_lengthStream.lineEnd = noop_noop;\\n}\\n\\nfunction length_lengthPointFirst(lambda, phi) {\\n  lambda *= radians, phi *= radians;\\n  length_lambda0 = lambda, length_sinPhi0 = math_sin(phi), length_cosPhi0 = math_cos(phi);\\n  length_lengthStream.point = length_lengthPoint;\\n}\\n\\nfunction length_lengthPoint(lambda, phi) {\\n  lambda *= radians, phi *= radians;\\n  var sinPhi = math_sin(phi),\\n      cosPhi = math_cos(phi),\\n      delta = abs(lambda - length_lambda0),\\n      cosDelta = math_cos(delta),\\n      sinDelta = math_sin(delta),\\n      x = cosPhi * sinDelta,\\n      y = length_cosPhi0 * sinPhi - length_sinPhi0 * cosPhi * cosDelta,\\n      z = length_sinPhi0 * sinPhi + length_cosPhi0 * cosPhi * cosDelta;\\n  length_lengthSum.add(atan2(math_sqrt(x * x + y * y), z));\\n  length_lambda0 = lambda, length_sinPhi0 = sinPhi, length_cosPhi0 = cosPhi;\\n}\\n\\n/* harmony default export */ var src_length = (function(object) {\\n  length_lengthSum.reset();\\n  src_stream(object, length_lengthStream);\\n  return +length_lengthSum;\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-geo/src/distance.js\\n\\n\\nvar distance_coordinates = [null, null],\\n    distance_object = {type: \"LineString\", coordinates: distance_coordinates};\\n\\n/* harmony default export */ var src_distance = (function(a, b) {\\n  distance_coordinates[0] = a;\\n  distance_coordinates[1] = b;\\n  return src_length(distance_object);\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-geo/src/contains.js\\n\\n\\n\\n\\nvar contains_containsObjectType = {\\n  Feature: function(object, point) {\\n    return contains_containsGeometry(object.geometry, point);\\n  },\\n  FeatureCollection: function(object, point) {\\n    var features = object.features, i = -1, n = features.length;\\n    while (++i < n) if (contains_containsGeometry(features[i].geometry, point)) return true;\\n    return false;\\n  }\\n};\\n\\nvar contains_containsGeometryType = {\\n  Sphere: function() {\\n    return true;\\n  },\\n  Point: function(object, point) {\\n    return contains_containsPoint(object.coordinates, point);\\n  },\\n  MultiPoint: function(object, point) {\\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\\n    while (++i < n) if (contains_containsPoint(coordinates[i], point)) return true;\\n    return false;\\n  },\\n  LineString: function(object, point) {\\n    return contains_containsLine(object.coordinates, point);\\n  },\\n  MultiLineString: function(object, point) {\\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\\n    while (++i < n) if (contains_containsLine(coordinates[i], point)) return true;\\n    return false;\\n  },\\n  Polygon: function(object, point) {\\n    return contains_containsPolygon(object.coordinates, point);\\n  },\\n  MultiPolygon: function(object, point) {\\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\\n    while (++i < n) if (contains_containsPolygon(coordinates[i], point)) return true;\\n    return false;\\n  },\\n  GeometryCollection: function(object, point) {\\n    var geometries = object.geometries, i = -1, n = geometries.length;\\n    while (++i < n) if (contains_containsGeometry(geometries[i], point)) return true;\\n    return false;\\n  }\\n};\\n\\nfunction contains_containsGeometry(geometry, point) {\\n  return geometry && contains_containsGeometryType.hasOwnProperty(geometry.type)\\n      ? contains_containsGeometryType[geometry.type](geometry, point)\\n      : false;\\n}\\n\\nfunction contains_containsPoint(coordinates, point) {\\n  return src_distance(coordinates, point) === 0;\\n}\\n\\nfunction contains_containsLine(coordinates, point) {\\n  var ab = src_distance(coordinates[0], coordinates[1]),\\n      ao = src_distance(coordinates[0], point),\\n      ob = src_distance(point, coordinates[1]);\\n  return ao + ob <= ab + math_epsilon;\\n}\\n\\nfunction contains_containsPolygon(coordinates, point) {\\n  return !!polygonContains(coordinates.map(contains_ringRadians), contains_pointRadians(point));\\n}\\n\\nfunction contains_ringRadians(ring) {\\n  return ring = ring.map(contains_pointRadians), ring.pop(), ring;\\n}\\n\\nfunction contains_pointRadians(point) {\\n  return [point[0] * radians, point[1] * radians];\\n}\\n\\n/* harmony default export */ var contains = (function(object, point) {\\n  return (object && contains_containsObjectType.hasOwnProperty(object.type)\\n      ? contains_containsObjectType[object.type]\\n      : contains_containsGeometry)(object, point);\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-geo/src/graticule.js\\n\\n\\n\\nfunction graticule_graticuleX(y0, y1, dy) {\\n  var y = src_range(y0, y1 - math_epsilon, dy).concat(y1);\\n  return function(x) { return y.map(function(y) { return [x, y]; }); };\\n}\\n\\nfunction graticule_graticuleY(x0, x1, dx) {\\n  var x = src_range(x0, x1 - math_epsilon, dx).concat(x1);\\n  return function(y) { return x.map(function(x) { return [x, y]; }); };\\n}\\n\\nfunction graticule_graticule() {\\n  var x1, x0, X1, X0,\\n      y1, y0, Y1, Y0,\\n      dx = 10, dy = dx, DX = 90, DY = 360,\\n      x, y, X, Y,\\n      precision = 2.5;\\n\\n  function graticule() {\\n    return {type: \"MultiLineString\", coordinates: lines()};\\n  }\\n\\n  function lines() {\\n    return src_range(ceil(X0 / DX) * DX, X1, DX).map(X)\\n        .concat(src_range(ceil(Y0 / DY) * DY, Y1, DY).map(Y))\\n        .concat(src_range(ceil(x0 / dx) * dx, x1, dx).filter(function(x) { return abs(x % DX) > math_epsilon; }).map(x))\\n        .concat(src_range(ceil(y0 / dy) * dy, y1, dy).filter(function(y) { return abs(y % DY) > math_epsilon; }).map(y));\\n  }\\n\\n  graticule.lines = function() {\\n    return lines().map(function(coordinates) { return {type: \"LineString\", coordinates: coordinates}; });\\n  };\\n\\n  graticule.outline = function() {\\n    return {\\n      type: \"Polygon\",\\n      coordinates: [\\n        X(X0).concat(\\n        Y(Y1).slice(1),\\n        X(X1).reverse().slice(1),\\n        Y(Y0).reverse().slice(1))\\n      ]\\n    };\\n  };\\n\\n  graticule.extent = function(_) {\\n    if (!arguments.length) return graticule.extentMinor();\\n    return graticule.extentMajor(_).extentMinor(_);\\n  };\\n\\n  graticule.extentMajor = function(_) {\\n    if (!arguments.length) return [[X0, Y0], [X1, Y1]];\\n    X0 = +_[0][0], X1 = +_[1][0];\\n    Y0 = +_[0][1], Y1 = +_[1][1];\\n    if (X0 > X1) _ = X0, X0 = X1, X1 = _;\\n    if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;\\n    return graticule.precision(precision);\\n  };\\n\\n  graticule.extentMinor = function(_) {\\n    if (!arguments.length) return [[x0, y0], [x1, y1]];\\n    x0 = +_[0][0], x1 = +_[1][0];\\n    y0 = +_[0][1], y1 = +_[1][1];\\n    if (x0 > x1) _ = x0, x0 = x1, x1 = _;\\n    if (y0 > y1) _ = y0, y0 = y1, y1 = _;\\n    return graticule.precision(precision);\\n  };\\n\\n  graticule.step = function(_) {\\n    if (!arguments.length) return graticule.stepMinor();\\n    return graticule.stepMajor(_).stepMinor(_);\\n  };\\n\\n  graticule.stepMajor = function(_) {\\n    if (!arguments.length) return [DX, DY];\\n    DX = +_[0], DY = +_[1];\\n    return graticule;\\n  };\\n\\n  graticule.stepMinor = function(_) {\\n    if (!arguments.length) return [dx, dy];\\n    dx = +_[0], dy = +_[1];\\n    return graticule;\\n  };\\n\\n  graticule.precision = function(_) {\\n    if (!arguments.length) return precision;\\n    precision = +_;\\n    x = graticule_graticuleX(y0, y1, 90);\\n    y = graticule_graticuleY(x0, x1, precision);\\n    X = graticule_graticuleX(Y0, Y1, 90);\\n    Y = graticule_graticuleY(X0, X1, precision);\\n    return graticule;\\n  };\\n\\n  return graticule\\n      .extentMajor([[-180, -90 + math_epsilon], [180, 90 - math_epsilon]])\\n      .extentMinor([[-180, -80 - math_epsilon], [180, 80 + math_epsilon]]);\\n}\\n\\nfunction graticule_graticule10() {\\n  return graticule_graticule()();\\n}\\n\\n// CONCATENATED MODULE: ./node_modules/d3-geo/src/interpolate.js\\n\\n\\n/* harmony default export */ var src_interpolate = (function(a, b) {\\n  var x0 = a[0] * radians,\\n      y0 = a[1] * radians,\\n      x1 = b[0] * radians,\\n      y1 = b[1] * radians,\\n      cy0 = math_cos(y0),\\n      sy0 = math_sin(y0),\\n      cy1 = math_cos(y1),\\n      sy1 = math_sin(y1),\\n      kx0 = cy0 * math_cos(x0),\\n      ky0 = cy0 * math_sin(x0),\\n      kx1 = cy1 * math_cos(x1),\\n      ky1 = cy1 * math_sin(x1),\\n      d = 2 * asin(math_sqrt(haversin(y1 - y0) + cy0 * cy1 * haversin(x1 - x0))),\\n      k = math_sin(d);\\n\\n  var interpolate = d ? function(t) {\\n    var B = math_sin(t *= d) / k,\\n        A = math_sin(d - t) / k,\\n        x = A * kx0 + B * kx1,\\n        y = A * ky0 + B * ky1,\\n        z = A * sy0 + B * sy1;\\n    return [\\n      atan2(y, x) * math_degrees,\\n      atan2(z, math_sqrt(x * x + y * y)) * math_degrees\\n    ];\\n  } : function() {\\n    return [x0 * math_degrees, y0 * math_degrees];\\n  };\\n\\n  interpolate.distance = d;\\n\\n  return interpolate;\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-geo/src/identity.js\\n/* harmony default export */ var d3_geo_src_identity = (function(x) {\\n  return x;\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-geo/src/path/area.js\\n\\n\\n\\n\\nvar path_area_areaSum = adder(),\\n    path_area_areaRingSum = adder(),\\n    area_x00,\\n    area_y00,\\n    area_x0,\\n    area_y0;\\n\\nvar path_area_areaStream = {\\n  point: noop_noop,\\n  lineStart: noop_noop,\\n  lineEnd: noop_noop,\\n  polygonStart: function() {\\n    path_area_areaStream.lineStart = path_area_areaRingStart;\\n    path_area_areaStream.lineEnd = path_area_areaRingEnd;\\n  },\\n  polygonEnd: function() {\\n    path_area_areaStream.lineStart = path_area_areaStream.lineEnd = path_area_areaStream.point = noop_noop;\\n    path_area_areaSum.add(abs(path_area_areaRingSum));\\n    path_area_areaRingSum.reset();\\n  },\\n  result: function() {\\n    var area = path_area_areaSum / 2;\\n    path_area_areaSum.reset();\\n    return area;\\n  }\\n};\\n\\nfunction path_area_areaRingStart() {\\n  path_area_areaStream.point = path_area_areaPointFirst;\\n}\\n\\nfunction path_area_areaPointFirst(x, y) {\\n  path_area_areaStream.point = path_area_areaPoint;\\n  area_x00 = area_x0 = x, area_y00 = area_y0 = y;\\n}\\n\\nfunction path_area_areaPoint(x, y) {\\n  path_area_areaRingSum.add(area_y0 * x - area_x0 * y);\\n  area_x0 = x, area_y0 = y;\\n}\\n\\nfunction path_area_areaRingEnd() {\\n  path_area_areaPoint(area_x00, area_y00);\\n}\\n\\n/* harmony default export */ var path_area = (path_area_areaStream);\\n\\n// CONCATENATED MODULE: ./node_modules/d3-geo/src/path/bounds.js\\n\\n\\nvar bounds_x0 = Infinity,\\n    bounds_y0 = bounds_x0,\\n    bounds_x1 = -bounds_x0,\\n    bounds_y1 = bounds_x1;\\n\\nvar path_bounds_boundsStream = {\\n  point: path_bounds_boundsPoint,\\n  lineStart: noop_noop,\\n  lineEnd: noop_noop,\\n  polygonStart: noop_noop,\\n  polygonEnd: noop_noop,\\n  result: function() {\\n    var bounds = [[bounds_x0, bounds_y0], [bounds_x1, bounds_y1]];\\n    bounds_x1 = bounds_y1 = -(bounds_y0 = bounds_x0 = Infinity);\\n    return bounds;\\n  }\\n};\\n\\nfunction path_bounds_boundsPoint(x, y) {\\n  if (x < bounds_x0) bounds_x0 = x;\\n  if (x > bounds_x1) bounds_x1 = x;\\n  if (y < bounds_y0) bounds_y0 = y;\\n  if (y > bounds_y1) bounds_y1 = y;\\n}\\n\\n/* harmony default export */ var path_bounds = (path_bounds_boundsStream);\\n\\n// CONCATENATED MODULE: ./node_modules/d3-geo/src/path/centroid.js\\n\\n\\n// TODO Enforce positive area for exterior, negative area for interior?\\n\\nvar path_centroid_X0 = 0,\\n    path_centroid_Y0 = 0,\\n    path_centroid_Z0 = 0,\\n    path_centroid_X1 = 0,\\n    path_centroid_Y1 = 0,\\n    path_centroid_Z1 = 0,\\n    path_centroid_X2 = 0,\\n    path_centroid_Y2 = 0,\\n    path_centroid_Z2 = 0,\\n    centroid_x00,\\n    centroid_y00,\\n    path_centroid_x0,\\n    path_centroid_y0;\\n\\nvar path_centroid_centroidStream = {\\n  point: path_centroid_centroidPoint,\\n  lineStart: path_centroid_centroidLineStart,\\n  lineEnd: path_centroid_centroidLineEnd,\\n  polygonStart: function() {\\n    path_centroid_centroidStream.lineStart = path_centroid_centroidRingStart;\\n    path_centroid_centroidStream.lineEnd = path_centroid_centroidRingEnd;\\n  },\\n  polygonEnd: function() {\\n    path_centroid_centroidStream.point = path_centroid_centroidPoint;\\n    path_centroid_centroidStream.lineStart = path_centroid_centroidLineStart;\\n    path_centroid_centroidStream.lineEnd = path_centroid_centroidLineEnd;\\n  },\\n  result: function() {\\n    var centroid = path_centroid_Z2 ? [path_centroid_X2 / path_centroid_Z2, path_centroid_Y2 / path_centroid_Z2]\\n        : path_centroid_Z1 ? [path_centroid_X1 / path_centroid_Z1, path_centroid_Y1 / path_centroid_Z1]\\n        : path_centroid_Z0 ? [path_centroid_X0 / path_centroid_Z0, path_centroid_Y0 / path_centroid_Z0]\\n        : [NaN, NaN];\\n    path_centroid_X0 = path_centroid_Y0 = path_centroid_Z0 =\\n    path_centroid_X1 = path_centroid_Y1 = path_centroid_Z1 =\\n    path_centroid_X2 = path_centroid_Y2 = path_centroid_Z2 = 0;\\n    return centroid;\\n  }\\n};\\n\\nfunction path_centroid_centroidPoint(x, y) {\\n  path_centroid_X0 += x;\\n  path_centroid_Y0 += y;\\n  ++path_centroid_Z0;\\n}\\n\\nfunction path_centroid_centroidLineStart() {\\n  path_centroid_centroidStream.point = centroid_centroidPointFirstLine;\\n}\\n\\nfunction centroid_centroidPointFirstLine(x, y) {\\n  path_centroid_centroidStream.point = centroid_centroidPointLine;\\n  path_centroid_centroidPoint(path_centroid_x0 = x, path_centroid_y0 = y);\\n}\\n\\nfunction centroid_centroidPointLine(x, y) {\\n  var dx = x - path_centroid_x0, dy = y - path_centroid_y0, z = math_sqrt(dx * dx + dy * dy);\\n  path_centroid_X1 += z * (path_centroid_x0 + x) / 2;\\n  path_centroid_Y1 += z * (path_centroid_y0 + y) / 2;\\n  path_centroid_Z1 += z;\\n  path_centroid_centroidPoint(path_centroid_x0 = x, path_centroid_y0 = y);\\n}\\n\\nfunction path_centroid_centroidLineEnd() {\\n  path_centroid_centroidStream.point = path_centroid_centroidPoint;\\n}\\n\\nfunction path_centroid_centroidRingStart() {\\n  path_centroid_centroidStream.point = centroid_centroidPointFirstRing;\\n}\\n\\nfunction path_centroid_centroidRingEnd() {\\n  centroid_centroidPointRing(centroid_x00, centroid_y00);\\n}\\n\\nfunction centroid_centroidPointFirstRing(x, y) {\\n  path_centroid_centroidStream.point = centroid_centroidPointRing;\\n  path_centroid_centroidPoint(centroid_x00 = path_centroid_x0 = x, centroid_y00 = path_centroid_y0 = y);\\n}\\n\\nfunction centroid_centroidPointRing(x, y) {\\n  var dx = x - path_centroid_x0,\\n      dy = y - path_centroid_y0,\\n      z = math_sqrt(dx * dx + dy * dy);\\n\\n  path_centroid_X1 += z * (path_centroid_x0 + x) / 2;\\n  path_centroid_Y1 += z * (path_centroid_y0 + y) / 2;\\n  path_centroid_Z1 += z;\\n\\n  z = path_centroid_y0 * x - path_centroid_x0 * y;\\n  path_centroid_X2 += z * (path_centroid_x0 + x);\\n  path_centroid_Y2 += z * (path_centroid_y0 + y);\\n  path_centroid_Z2 += z * 3;\\n  path_centroid_centroidPoint(path_centroid_x0 = x, path_centroid_y0 = y);\\n}\\n\\n/* harmony default export */ var path_centroid = (path_centroid_centroidStream);\\n\\n// CONCATENATED MODULE: ./node_modules/d3-geo/src/path/context.js\\n\\n\\n\\nfunction context_PathContext(context) {\\n  this._context = context;\\n}\\n\\ncontext_PathContext.prototype = {\\n  _radius: 4.5,\\n  pointRadius: function(_) {\\n    return this._radius = _, this;\\n  },\\n  polygonStart: function() {\\n    this._line = 0;\\n  },\\n  polygonEnd: function() {\\n    this._line = NaN;\\n  },\\n  lineStart: function() {\\n    this._point = 0;\\n  },\\n  lineEnd: function() {\\n    if (this._line === 0) this._context.closePath();\\n    this._point = NaN;\\n  },\\n  point: function(x, y) {\\n    switch (this._point) {\\n      case 0: {\\n        this._context.moveTo(x, y);\\n        this._point = 1;\\n        break;\\n      }\\n      case 1: {\\n        this._context.lineTo(x, y);\\n        break;\\n      }\\n      default: {\\n        this._context.moveTo(x + this._radius, y);\\n        this._context.arc(x, y, this._radius, 0, src_math_tau);\\n        break;\\n      }\\n    }\\n  },\\n  result: noop_noop\\n};\\n\\n// CONCATENATED MODULE: ./node_modules/d3-geo/src/path/measure.js\\n\\n\\n\\n\\nvar measure_lengthSum = adder(),\\n    measure_lengthRing,\\n    measure_x00,\\n    measure_y00,\\n    measure_x0,\\n    measure_y0;\\n\\nvar measure_lengthStream = {\\n  point: noop_noop,\\n  lineStart: function() {\\n    measure_lengthStream.point = measure_lengthPointFirst;\\n  },\\n  lineEnd: function() {\\n    if (measure_lengthRing) measure_lengthPoint(measure_x00, measure_y00);\\n    measure_lengthStream.point = noop_noop;\\n  },\\n  polygonStart: function() {\\n    measure_lengthRing = true;\\n  },\\n  polygonEnd: function() {\\n    measure_lengthRing = null;\\n  },\\n  result: function() {\\n    var length = +measure_lengthSum;\\n    measure_lengthSum.reset();\\n    return length;\\n  }\\n};\\n\\nfunction measure_lengthPointFirst(x, y) {\\n  measure_lengthStream.point = measure_lengthPoint;\\n  measure_x00 = measure_x0 = x, measure_y00 = measure_y0 = y;\\n}\\n\\nfunction measure_lengthPoint(x, y) {\\n  measure_x0 -= x, measure_y0 -= y;\\n  measure_lengthSum.add(math_sqrt(measure_x0 * measure_x0 + measure_y0 * measure_y0));\\n  measure_x0 = x, measure_y0 = y;\\n}\\n\\n/* harmony default export */ var measure = (measure_lengthStream);\\n\\n// CONCATENATED MODULE: ./node_modules/d3-geo/src/path/string.js\\nfunction PathString() {\\n  this._string = [];\\n}\\n\\nPathString.prototype = {\\n  _radius: 4.5,\\n  _circle: string_circle(4.5),\\n  pointRadius: function(_) {\\n    if ((_ = +_) !== this._radius) this._radius = _, this._circle = null;\\n    return this;\\n  },\\n  polygonStart: function() {\\n    this._line = 0;\\n  },\\n  polygonEnd: function() {\\n    this._line = NaN;\\n  },\\n  lineStart: function() {\\n    this._point = 0;\\n  },\\n  lineEnd: function() {\\n    if (this._line === 0) this._string.push(\"Z\");\\n    this._point = NaN;\\n  },\\n  point: function(x, y) {\\n    switch (this._point) {\\n      case 0: {\\n        this._string.push(\"M\", x, \",\", y);\\n        this._point = 1;\\n        break;\\n      }\\n      case 1: {\\n        this._string.push(\"L\", x, \",\", y);\\n        break;\\n      }\\n      default: {\\n        if (this._circle == null) this._circle = string_circle(this._radius);\\n        this._string.push(\"M\", x, \",\", y, this._circle);\\n        break;\\n      }\\n    }\\n  },\\n  result: function() {\\n    if (this._string.length) {\\n      var result = this._string.join(\"\");\\n      this._string = [];\\n      return result;\\n    } else {\\n      return null;\\n    }\\n  }\\n};\\n\\nfunction string_circle(radius) {\\n  return \"m0,\" + radius\\n      + \"a\" + radius + \",\" + radius + \" 0 1,1 0,\" + -2 * radius\\n      + \"a\" + radius + \",\" + radius + \" 0 1,1 0,\" + 2 * radius\\n      + \"z\";\\n}\\n\\n// CONCATENATED MODULE: ./node_modules/d3-geo/src/path/index.js\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n/* harmony default export */ var d3_geo_src_path = (function(projection, context) {\\n  var pointRadius = 4.5,\\n      projectionStream,\\n      contextStream;\\n\\n  function path(object) {\\n    if (object) {\\n      if (typeof pointRadius === \"function\") contextStream.pointRadius(+pointRadius.apply(this, arguments));\\n      src_stream(object, projectionStream(contextStream));\\n    }\\n    return contextStream.result();\\n  }\\n\\n  path.area = function(object) {\\n    src_stream(object, projectionStream(path_area));\\n    return path_area.result();\\n  };\\n\\n  path.measure = function(object) {\\n    src_stream(object, projectionStream(measure));\\n    return measure.result();\\n  };\\n\\n  path.bounds = function(object) {\\n    src_stream(object, projectionStream(path_bounds));\\n    return path_bounds.result();\\n  };\\n\\n  path.centroid = function(object) {\\n    src_stream(object, projectionStream(path_centroid));\\n    return path_centroid.result();\\n  };\\n\\n  path.projection = function(_) {\\n    return arguments.length ? (projectionStream = _ == null ? (projection = null, d3_geo_src_identity) : (projection = _).stream, path) : projection;\\n  };\\n\\n  path.context = function(_) {\\n    if (!arguments.length) return context;\\n    contextStream = _ == null ? (context = null, new PathString) : new context_PathContext(context = _);\\n    if (typeof pointRadius !== \"function\") contextStream.pointRadius(pointRadius);\\n    return path;\\n  };\\n\\n  path.pointRadius = function(_) {\\n    if (!arguments.length) return pointRadius;\\n    pointRadius = typeof _ === \"function\" ? _ : (contextStream.pointRadius(+_), +_);\\n    return path;\\n  };\\n\\n  return path.projection(projection).context(context);\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-geo/src/transform.js\\n/* harmony default export */ var src_transform = (function(methods) {\\n  return {\\n    stream: transformer(methods)\\n  };\\n});\\n\\nfunction transformer(methods) {\\n  return function(stream) {\\n    var s = new TransformStream;\\n    for (var key in methods) s[key] = methods[key];\\n    s.stream = stream;\\n    return s;\\n  };\\n}\\n\\nfunction TransformStream() {}\\n\\nTransformStream.prototype = {\\n  constructor: TransformStream,\\n  point: function(x, y) { this.stream.point(x, y); },\\n  sphere: function() { this.stream.sphere(); },\\n  lineStart: function() { this.stream.lineStart(); },\\n  lineEnd: function() { this.stream.lineEnd(); },\\n  polygonStart: function() { this.stream.polygonStart(); },\\n  polygonEnd: function() { this.stream.polygonEnd(); }\\n};\\n\\n// CONCATENATED MODULE: ./node_modules/d3-geo/src/projection/fit.js\\n\\n\\n\\nfunction fit_fit(projection, fitBounds, object) {\\n  var clip = projection.clipExtent && projection.clipExtent();\\n  projection.scale(150).translate([0, 0]);\\n  if (clip != null) projection.clipExtent(null);\\n  src_stream(object, projection.stream(path_bounds));\\n  fitBounds(path_bounds.result());\\n  if (clip != null) projection.clipExtent(clip);\\n  return projection;\\n}\\n\\nfunction fit_fitExtent(projection, extent, object) {\\n  return fit_fit(projection, function(b) {\\n    var w = extent[1][0] - extent[0][0],\\n        h = extent[1][1] - extent[0][1],\\n        k = Math.min(w / (b[1][0] - b[0][0]), h / (b[1][1] - b[0][1])),\\n        x = +extent[0][0] + (w - k * (b[1][0] + b[0][0])) / 2,\\n        y = +extent[0][1] + (h - k * (b[1][1] + b[0][1])) / 2;\\n    projection.scale(150 * k).translate([x, y]);\\n  }, object);\\n}\\n\\nfunction fit_fitSize(projection, size, object) {\\n  return fit_fitExtent(projection, [[0, 0], size], object);\\n}\\n\\nfunction fit_fitWidth(projection, width, object) {\\n  return fit_fit(projection, function(b) {\\n    var w = +width,\\n        k = w / (b[1][0] - b[0][0]),\\n        x = (w - k * (b[1][0] + b[0][0])) / 2,\\n        y = -k * b[0][1];\\n    projection.scale(150 * k).translate([x, y]);\\n  }, object);\\n}\\n\\nfunction fit_fitHeight(projection, height, object) {\\n  return fit_fit(projection, function(b) {\\n    var h = +height,\\n        k = h / (b[1][1] - b[0][1]),\\n        x = -k * b[0][0],\\n        y = (h - k * (b[1][1] + b[0][1])) / 2;\\n    projection.scale(150 * k).translate([x, y]);\\n  }, object);\\n}\\n\\n// CONCATENATED MODULE: ./node_modules/d3-geo/src/projection/resample.js\\n\\n\\n\\n\\nvar resample_maxDepth = 16, // maximum depth of subdivision\\n    resample_cosMinDistance = math_cos(30 * radians); // cos(minimum angular distance)\\n\\n/* harmony default export */ var projection_resample = (function(project, delta2) {\\n  return +delta2 ? resample_resample(project, delta2) : resample_resampleNone(project);\\n});\\n\\nfunction resample_resampleNone(project) {\\n  return transformer({\\n    point: function(x, y) {\\n      x = project(x, y);\\n      this.stream.point(x[0], x[1]);\\n    }\\n  });\\n}\\n\\nfunction resample_resample(project, delta2) {\\n\\n  function resampleLineTo(x0, y0, lambda0, a0, b0, c0, x1, y1, lambda1, a1, b1, c1, depth, stream) {\\n    var dx = x1 - x0,\\n        dy = y1 - y0,\\n        d2 = dx * dx + dy * dy;\\n    if (d2 > 4 * delta2 && depth--) {\\n      var a = a0 + a1,\\n          b = b0 + b1,\\n          c = c0 + c1,\\n          m = math_sqrt(a * a + b * b + c * c),\\n          phi2 = asin(c /= m),\\n          lambda2 = abs(abs(c) - 1) < math_epsilon || abs(lambda0 - lambda1) < math_epsilon ? (lambda0 + lambda1) / 2 : atan2(b, a),\\n          p = project(lambda2, phi2),\\n          x2 = p[0],\\n          y2 = p[1],\\n          dx2 = x2 - x0,\\n          dy2 = y2 - y0,\\n          dz = dy * dx2 - dx * dy2;\\n      if (dz * dz / d2 > delta2 // perpendicular projected distance\\n          || abs((dx * dx2 + dy * dy2) / d2 - 0.5) > 0.3 // midpoint close to an end\\n          || a0 * a1 + b0 * b1 + c0 * c1 < resample_cosMinDistance) { // angular distance\\n        resampleLineTo(x0, y0, lambda0, a0, b0, c0, x2, y2, lambda2, a /= m, b /= m, c, depth, stream);\\n        stream.point(x2, y2);\\n        resampleLineTo(x2, y2, lambda2, a, b, c, x1, y1, lambda1, a1, b1, c1, depth, stream);\\n      }\\n    }\\n  }\\n  return function(stream) {\\n    var lambda00, x00, y00, a00, b00, c00, // first point\\n        lambda0, x0, y0, a0, b0, c0; // previous point\\n\\n    var resampleStream = {\\n      point: point,\\n      lineStart: lineStart,\\n      lineEnd: lineEnd,\\n      polygonStart: function() { stream.polygonStart(); resampleStream.lineStart = ringStart; },\\n      polygonEnd: function() { stream.polygonEnd(); resampleStream.lineStart = lineStart; }\\n    };\\n\\n    function point(x, y) {\\n      x = project(x, y);\\n      stream.point(x[0], x[1]);\\n    }\\n\\n    function lineStart() {\\n      x0 = NaN;\\n      resampleStream.point = linePoint;\\n      stream.lineStart();\\n    }\\n\\n    function linePoint(lambda, phi) {\\n      var c = cartesian_cartesian([lambda, phi]), p = project(lambda, phi);\\n      resampleLineTo(x0, y0, lambda0, a0, b0, c0, x0 = p[0], y0 = p[1], lambda0 = lambda, a0 = c[0], b0 = c[1], c0 = c[2], resample_maxDepth, stream);\\n      stream.point(x0, y0);\\n    }\\n\\n    function lineEnd() {\\n      resampleStream.point = point;\\n      stream.lineEnd();\\n    }\\n\\n    function ringStart() {\\n      lineStart();\\n      resampleStream.point = ringPoint;\\n      resampleStream.lineEnd = ringEnd;\\n    }\\n\\n    function ringPoint(lambda, phi) {\\n      linePoint(lambda00 = lambda, phi), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;\\n      resampleStream.point = linePoint;\\n    }\\n\\n    function ringEnd() {\\n      resampleLineTo(x0, y0, lambda0, a0, b0, c0, x00, y00, lambda00, a00, b00, c00, resample_maxDepth, stream);\\n      resampleStream.lineEnd = lineEnd;\\n      lineEnd();\\n    }\\n\\n    return resampleStream;\\n  };\\n}\\n\\n// CONCATENATED MODULE: ./node_modules/d3-geo/src/projection/index.js\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nvar projection_transformRadians = transformer({\\n  point: function(x, y) {\\n    this.stream.point(x * radians, y * radians);\\n  }\\n});\\n\\nfunction projection_transformRotate(rotate) {\\n  return transformer({\\n    point: function(x, y) {\\n      var r = rotate(x, y);\\n      return this.stream.point(r[0], r[1]);\\n    }\\n  });\\n}\\n\\nfunction projection_projection(project) {\\n  return projection_projectionMutator(function() { return project; })();\\n}\\n\\nfunction projection_projectionMutator(projectAt) {\\n  var project,\\n      k = 150, // scale\\n      x = 480, y = 250, // translate\\n      dx, dy, lambda = 0, phi = 0, // center\\n      deltaLambda = 0, deltaPhi = 0, deltaGamma = 0, rotate, projectRotate, // rotate\\n      theta = null, preclip = clip_antimeridian, // clip angle\\n      x0 = null, y0, x1, y1, postclip = d3_geo_src_identity, // clip extent\\n      delta2 = 0.5, projectResample = projection_resample(projectTransform, delta2), // precision\\n      cache,\\n      cacheStream;\\n\\n  function projection(point) {\\n    point = projectRotate(point[0] * radians, point[1] * radians);\\n    return [point[0] * k + dx, dy - point[1] * k];\\n  }\\n\\n  function invert(point) {\\n    point = projectRotate.invert((point[0] - dx) / k, (dy - point[1]) / k);\\n    return point && [point[0] * math_degrees, point[1] * math_degrees];\\n  }\\n\\n  function projectTransform(x, y) {\\n    return x = project(x, y), [x[0] * k + dx, dy - x[1] * k];\\n  }\\n\\n  projection.stream = function(stream) {\\n    return cache && cacheStream === stream ? cache : cache = projection_transformRadians(projection_transformRotate(rotate)(preclip(projectResample(postclip(cacheStream = stream)))));\\n  };\\n\\n  projection.preclip = function(_) {\\n    return arguments.length ? (preclip = _, theta = undefined, reset()) : preclip;\\n  };\\n\\n  projection.postclip = function(_) {\\n    return arguments.length ? (postclip = _, x0 = y0 = x1 = y1 = null, reset()) : postclip;\\n  };\\n\\n  projection.clipAngle = function(_) {\\n    return arguments.length ? (preclip = +_ ? clip_circle(theta = _ * radians) : (theta = null, clip_antimeridian), reset()) : theta * math_degrees;\\n  };\\n\\n  projection.clipExtent = function(_) {\\n    return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, d3_geo_src_identity) : rectangle_clipRectangle(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];\\n  };\\n\\n  projection.scale = function(_) {\\n    return arguments.length ? (k = +_, recenter()) : k;\\n  };\\n\\n  projection.translate = function(_) {\\n    return arguments.length ? (x = +_[0], y = +_[1], recenter()) : [x, y];\\n  };\\n\\n  projection.center = function(_) {\\n    return arguments.length ? (lambda = _[0] % 360 * radians, phi = _[1] % 360 * radians, recenter()) : [lambda * math_degrees, phi * math_degrees];\\n  };\\n\\n  projection.rotate = function(_) {\\n    return arguments.length ? (deltaLambda = _[0] % 360 * radians, deltaPhi = _[1] % 360 * radians, deltaGamma = _.length > 2 ? _[2] % 360 * radians : 0, recenter()) : [deltaLambda * math_degrees, deltaPhi * math_degrees, deltaGamma * math_degrees];\\n  };\\n\\n  projection.precision = function(_) {\\n    return arguments.length ? (projectResample = projection_resample(projectTransform, delta2 = _ * _), reset()) : math_sqrt(delta2);\\n  };\\n\\n  projection.fitExtent = function(extent, object) {\\n    return fit_fitExtent(projection, extent, object);\\n  };\\n\\n  projection.fitSize = function(size, object) {\\n    return fit_fitSize(projection, size, object);\\n  };\\n\\n  projection.fitWidth = function(width, object) {\\n    return fit_fitWidth(projection, width, object);\\n  };\\n\\n  projection.fitHeight = function(height, object) {\\n    return fit_fitHeight(projection, height, object);\\n  };\\n\\n  function recenter() {\\n    projectRotate = compose(rotate = rotation_rotateRadians(deltaLambda, deltaPhi, deltaGamma), project);\\n    var center = project(lambda, phi);\\n    dx = x - center[0] * k;\\n    dy = y + center[1] * k;\\n    return reset();\\n  }\\n\\n  function reset() {\\n    cache = cacheStream = null;\\n    return projection;\\n  }\\n\\n  return function() {\\n    project = projectAt.apply(this, arguments);\\n    projection.invert = project.invert && invert;\\n    return recenter();\\n  };\\n}\\n\\n// CONCATENATED MODULE: ./node_modules/d3-geo/src/projection/conic.js\\n\\n\\n\\nfunction conic_conicProjection(projectAt) {\\n  var phi0 = 0,\\n      phi1 = src_math_pi / 3,\\n      m = projection_projectionMutator(projectAt),\\n      p = m(phi0, phi1);\\n\\n  p.parallels = function(_) {\\n    return arguments.length ? m(phi0 = _[0] * radians, phi1 = _[1] * radians) : [phi0 * math_degrees, phi1 * math_degrees];\\n  };\\n\\n  return p;\\n}\\n\\n// CONCATENATED MODULE: ./node_modules/d3-geo/src/projection/cylindricalEqualArea.js\\n\\n\\nfunction cylindricalEqualArea_cylindricalEqualAreaRaw(phi0) {\\n  var cosPhi0 = math_cos(phi0);\\n\\n  function forward(lambda, phi) {\\n    return [lambda * cosPhi0, math_sin(phi) / cosPhi0];\\n  }\\n\\n  forward.invert = function(x, y) {\\n    return [x / cosPhi0, asin(y * cosPhi0)];\\n  };\\n\\n  return forward;\\n}\\n\\n// CONCATENATED MODULE: ./node_modules/d3-geo/src/projection/conicEqualArea.js\\n\\n\\n\\n\\nfunction conicEqualArea_conicEqualAreaRaw(y0, y1) {\\n  var sy0 = math_sin(y0), n = (sy0 + math_sin(y1)) / 2;\\n\\n  // Are the parallels symmetrical around the Equator?\\n  if (abs(n) < math_epsilon) return cylindricalEqualArea_cylindricalEqualAreaRaw(y0);\\n\\n  var c = 1 + sy0 * (2 * n - sy0), r0 = math_sqrt(c) / n;\\n\\n  function project(x, y) {\\n    var r = math_sqrt(c - 2 * n * math_sin(y)) / n;\\n    return [r * math_sin(x *= n), r0 - r * math_cos(x)];\\n  }\\n\\n  project.invert = function(x, y) {\\n    var r0y = r0 - y;\\n    return [atan2(x, abs(r0y)) / n * math_sign(r0y), asin((c - (x * x + r0y * r0y) * n * n) / (2 * n))];\\n  };\\n\\n  return project;\\n}\\n\\n/* harmony default export */ var conicEqualArea = (function() {\\n  return conic_conicProjection(conicEqualArea_conicEqualAreaRaw)\\n      .scale(155.424)\\n      .center([0, 33.6442]);\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-geo/src/projection/albers.js\\n\\n\\n/* harmony default export */ var albers = (function() {\\n  return conicEqualArea()\\n      .parallels([29.5, 45.5])\\n      .scale(1070)\\n      .translate([480, 250])\\n      .rotate([96, 0])\\n      .center([-0.6, 38.7]);\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-geo/src/projection/albersUsa.js\\n\\n\\n\\n\\n\\n// The projections must have mutually exclusive clip regions on the sphere,\\n// as this will avoid emitting interleaving lines and polygons.\\nfunction albersUsa_multiplex(streams) {\\n  var n = streams.length;\\n  return {\\n    point: function(x, y) { var i = -1; while (++i < n) streams[i].point(x, y); },\\n    sphere: function() { var i = -1; while (++i < n) streams[i].sphere(); },\\n    lineStart: function() { var i = -1; while (++i < n) streams[i].lineStart(); },\\n    lineEnd: function() { var i = -1; while (++i < n) streams[i].lineEnd(); },\\n    polygonStart: function() { var i = -1; while (++i < n) streams[i].polygonStart(); },\\n    polygonEnd: function() { var i = -1; while (++i < n) streams[i].polygonEnd(); }\\n  };\\n}\\n\\n// A composite projection for the United States, configured by default for\\n// 960×500. The projection also works quite well at 960×600 if you change the\\n// scale to 1285 and adjust the translate accordingly. The set of standard\\n// parallels for each region comes from USGS, which is published here:\\n// http://egsc.usgs.gov/isb/pubs/MapProjections/projections.html#albers\\n/* harmony default export */ var projection_albersUsa = (function() {\\n  var cache,\\n      cacheStream,\\n      lower48 = albers(), lower48Point,\\n      alaska = conicEqualArea().rotate([154, 0]).center([-2, 58.5]).parallels([55, 65]), alaskaPoint, // EPSG:3338\\n      hawaii = conicEqualArea().rotate([157, 0]).center([-3, 19.9]).parallels([8, 18]), hawaiiPoint, // ESRI:102007\\n      point, pointStream = {point: function(x, y) { point = [x, y]; }};\\n\\n  function albersUsa(coordinates) {\\n    var x = coordinates[0], y = coordinates[1];\\n    return point = null,\\n        (lower48Point.point(x, y), point)\\n        || (alaskaPoint.point(x, y), point)\\n        || (hawaiiPoint.point(x, y), point);\\n  }\\n\\n  albersUsa.invert = function(coordinates) {\\n    var k = lower48.scale(),\\n        t = lower48.translate(),\\n        x = (coordinates[0] - t[0]) / k,\\n        y = (coordinates[1] - t[1]) / k;\\n    return (y >= 0.120 && y < 0.234 && x >= -0.425 && x < -0.214 ? alaska\\n        : y >= 0.166 && y < 0.234 && x >= -0.214 && x < -0.115 ? hawaii\\n        : lower48).invert(coordinates);\\n  };\\n\\n  albersUsa.stream = function(stream) {\\n    return cache && cacheStream === stream ? cache : cache = albersUsa_multiplex([lower48.stream(cacheStream = stream), alaska.stream(stream), hawaii.stream(stream)]);\\n  };\\n\\n  albersUsa.precision = function(_) {\\n    if (!arguments.length) return lower48.precision();\\n    lower48.precision(_), alaska.precision(_), hawaii.precision(_);\\n    return reset();\\n  };\\n\\n  albersUsa.scale = function(_) {\\n    if (!arguments.length) return lower48.scale();\\n    lower48.scale(_), alaska.scale(_ * 0.35), hawaii.scale(_);\\n    return albersUsa.translate(lower48.translate());\\n  };\\n\\n  albersUsa.translate = function(_) {\\n    if (!arguments.length) return lower48.translate();\\n    var k = lower48.scale(), x = +_[0], y = +_[1];\\n\\n    lower48Point = lower48\\n        .translate(_)\\n        .clipExtent([[x - 0.455 * k, y - 0.238 * k], [x + 0.455 * k, y + 0.238 * k]])\\n        .stream(pointStream);\\n\\n    alaskaPoint = alaska\\n        .translate([x - 0.307 * k, y + 0.201 * k])\\n        .clipExtent([[x - 0.425 * k + math_epsilon, y + 0.120 * k + math_epsilon], [x - 0.214 * k - math_epsilon, y + 0.234 * k - math_epsilon]])\\n        .stream(pointStream);\\n\\n    hawaiiPoint = hawaii\\n        .translate([x - 0.205 * k, y + 0.212 * k])\\n        .clipExtent([[x - 0.214 * k + math_epsilon, y + 0.166 * k + math_epsilon], [x - 0.115 * k - math_epsilon, y + 0.234 * k - math_epsilon]])\\n        .stream(pointStream);\\n\\n    return reset();\\n  };\\n\\n  albersUsa.fitExtent = function(extent, object) {\\n    return fit_fitExtent(albersUsa, extent, object);\\n  };\\n\\n  albersUsa.fitSize = function(size, object) {\\n    return fit_fitSize(albersUsa, size, object);\\n  };\\n\\n  albersUsa.fitWidth = function(width, object) {\\n    return fit_fitWidth(albersUsa, width, object);\\n  };\\n\\n  albersUsa.fitHeight = function(height, object) {\\n    return fit_fitHeight(albersUsa, height, object);\\n  };\\n\\n  function reset() {\\n    cache = cacheStream = null;\\n    return albersUsa;\\n  }\\n\\n  return albersUsa.scale(1070);\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-geo/src/projection/azimuthal.js\\n\\n\\nfunction azimuthal_azimuthalRaw(scale) {\\n  return function(x, y) {\\n    var cx = math_cos(x),\\n        cy = math_cos(y),\\n        k = scale(cx * cy);\\n    return [\\n      k * cy * math_sin(x),\\n      k * math_sin(y)\\n    ];\\n  }\\n}\\n\\nfunction azimuthal_azimuthalInvert(angle) {\\n  return function(x, y) {\\n    var z = math_sqrt(x * x + y * y),\\n        c = angle(z),\\n        sc = math_sin(c),\\n        cc = math_cos(c);\\n    return [\\n      atan2(x * sc, z * cc),\\n      asin(z && y * sc / z)\\n    ];\\n  }\\n}\\n\\n// CONCATENATED MODULE: ./node_modules/d3-geo/src/projection/azimuthalEqualArea.js\\n\\n\\n\\n\\nvar azimuthalEqualArea_azimuthalEqualAreaRaw = azimuthal_azimuthalRaw(function(cxcy) {\\n  return math_sqrt(2 / (1 + cxcy));\\n});\\n\\nazimuthalEqualArea_azimuthalEqualAreaRaw.invert = azimuthal_azimuthalInvert(function(z) {\\n  return 2 * asin(z / 2);\\n});\\n\\n/* harmony default export */ var azimuthalEqualArea = (function() {\\n  return projection_projection(azimuthalEqualArea_azimuthalEqualAreaRaw)\\n      .scale(124.75)\\n      .clipAngle(180 - 1e-3);\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-geo/src/projection/azimuthalEquidistant.js\\n\\n\\n\\n\\nvar azimuthalEquidistant_azimuthalEquidistantRaw = azimuthal_azimuthalRaw(function(c) {\\n  return (c = acos(c)) && c / math_sin(c);\\n});\\n\\nazimuthalEquidistant_azimuthalEquidistantRaw.invert = azimuthal_azimuthalInvert(function(z) {\\n  return z;\\n});\\n\\n/* harmony default export */ var azimuthalEquidistant = (function() {\\n  return projection_projection(azimuthalEquidistant_azimuthalEquidistantRaw)\\n      .scale(79.4188)\\n      .clipAngle(180 - 1e-3);\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-geo/src/projection/mercator.js\\n\\n\\n\\n\\nfunction mercator_mercatorRaw(lambda, phi) {\\n  return [lambda, math_log(tan((src_math_halfPi + phi) / 2))];\\n}\\n\\nmercator_mercatorRaw.invert = function(x, y) {\\n  return [x, 2 * atan(exp(y)) - src_math_halfPi];\\n};\\n\\n/* harmony default export */ var mercator = (function() {\\n  return mercator_mercatorProjection(mercator_mercatorRaw)\\n      .scale(961 / src_math_tau);\\n});\\n\\nfunction mercator_mercatorProjection(project) {\\n  var m = projection_projection(project),\\n      center = m.center,\\n      scale = m.scale,\\n      translate = m.translate,\\n      clipExtent = m.clipExtent,\\n      x0 = null, y0, x1, y1; // clip extent\\n\\n  m.scale = function(_) {\\n    return arguments.length ? (scale(_), reclip()) : scale();\\n  };\\n\\n  m.translate = function(_) {\\n    return arguments.length ? (translate(_), reclip()) : translate();\\n  };\\n\\n  m.center = function(_) {\\n    return arguments.length ? (center(_), reclip()) : center();\\n  };\\n\\n  m.clipExtent = function(_) {\\n    return arguments.length ? ((_ == null ? x0 = y0 = x1 = y1 = null : (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1])), reclip()) : x0 == null ? null : [[x0, y0], [x1, y1]];\\n  };\\n\\n  function reclip() {\\n    var k = src_math_pi * scale(),\\n        t = m(src_rotation(m.rotate()).invert([0, 0]));\\n    return clipExtent(x0 == null\\n        ? [[t[0] - k, t[1] - k], [t[0] + k, t[1] + k]] : project === mercator_mercatorRaw\\n        ? [[Math.max(t[0] - k, x0), y0], [Math.min(t[0] + k, x1), y1]]\\n        : [[x0, Math.max(t[1] - k, y0)], [x1, Math.min(t[1] + k, y1)]]);\\n  }\\n\\n  return reclip();\\n}\\n\\n// CONCATENATED MODULE: ./node_modules/d3-geo/src/projection/conicConformal.js\\n\\n\\n\\n\\nfunction conicConformal_tany(y) {\\n  return tan((src_math_halfPi + y) / 2);\\n}\\n\\nfunction conicConformal_conicConformalRaw(y0, y1) {\\n  var cy0 = math_cos(y0),\\n      n = y0 === y1 ? math_sin(y0) : math_log(cy0 / math_cos(y1)) / math_log(conicConformal_tany(y1) / conicConformal_tany(y0)),\\n      f = cy0 * math_pow(conicConformal_tany(y0), n) / n;\\n\\n  if (!n) return mercator_mercatorRaw;\\n\\n  function project(x, y) {\\n    if (f > 0) { if (y < -src_math_halfPi + math_epsilon) y = -src_math_halfPi + math_epsilon; }\\n    else { if (y > src_math_halfPi - math_epsilon) y = src_math_halfPi - math_epsilon; }\\n    var r = f / math_pow(conicConformal_tany(y), n);\\n    return [r * math_sin(n * x), f - r * math_cos(n * x)];\\n  }\\n\\n  project.invert = function(x, y) {\\n    var fy = f - y, r = math_sign(n) * math_sqrt(x * x + fy * fy);\\n    return [atan2(x, abs(fy)) / n * math_sign(fy), 2 * atan(math_pow(f / r, 1 / n)) - src_math_halfPi];\\n  };\\n\\n  return project;\\n}\\n\\n/* harmony default export */ var conicConformal = (function() {\\n  return conic_conicProjection(conicConformal_conicConformalRaw)\\n      .scale(109.5)\\n      .parallels([30, 30]);\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-geo/src/projection/equirectangular.js\\n\\n\\nfunction equirectangular_equirectangularRaw(lambda, phi) {\\n  return [lambda, phi];\\n}\\n\\nequirectangular_equirectangularRaw.invert = equirectangular_equirectangularRaw;\\n\\n/* harmony default export */ var equirectangular = (function() {\\n  return projection_projection(equirectangular_equirectangularRaw)\\n      .scale(152.63);\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-geo/src/projection/conicEquidistant.js\\n\\n\\n\\n\\nfunction conicEquidistant_conicEquidistantRaw(y0, y1) {\\n  var cy0 = math_cos(y0),\\n      n = y0 === y1 ? math_sin(y0) : (cy0 - math_cos(y1)) / (y1 - y0),\\n      g = cy0 / n + y0;\\n\\n  if (abs(n) < math_epsilon) return equirectangular_equirectangularRaw;\\n\\n  function project(x, y) {\\n    var gy = g - y, nx = n * x;\\n    return [gy * math_sin(nx), g - gy * math_cos(nx)];\\n  }\\n\\n  project.invert = function(x, y) {\\n    var gy = g - y;\\n    return [atan2(x, abs(gy)) / n * math_sign(gy), g - math_sign(n) * math_sqrt(x * x + gy * gy)];\\n  };\\n\\n  return project;\\n}\\n\\n/* harmony default export */ var conicEquidistant = (function() {\\n  return conic_conicProjection(conicEquidistant_conicEquidistantRaw)\\n      .scale(131.154)\\n      .center([0, 13.9389]);\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-geo/src/projection/gnomonic.js\\n\\n\\n\\n\\nfunction gnomonic_gnomonicRaw(x, y) {\\n  var cy = math_cos(y), k = math_cos(x) * cy;\\n  return [cy * math_sin(x) / k, math_sin(y) / k];\\n}\\n\\ngnomonic_gnomonicRaw.invert = azimuthal_azimuthalInvert(atan);\\n\\n/* harmony default export */ var gnomonic = (function() {\\n  return projection_projection(gnomonic_gnomonicRaw)\\n      .scale(144.049)\\n      .clipAngle(60);\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-geo/src/projection/identity.js\\n\\n\\n\\n\\n\\nfunction identity_scaleTranslate(kx, ky, tx, ty) {\\n  return kx === 1 && ky === 1 && tx === 0 && ty === 0 ? d3_geo_src_identity : transformer({\\n    point: function(x, y) {\\n      this.stream.point(x * kx + tx, y * ky + ty);\\n    }\\n  });\\n}\\n\\n/* harmony default export */ var projection_identity = (function() {\\n  var k = 1, tx = 0, ty = 0, sx = 1, sy = 1, transform = d3_geo_src_identity, // scale, translate and reflect\\n      x0 = null, y0, x1, y1, // clip extent\\n      postclip = d3_geo_src_identity,\\n      cache,\\n      cacheStream,\\n      projection;\\n\\n  function reset() {\\n    cache = cacheStream = null;\\n    return projection;\\n  }\\n\\n  return projection = {\\n    stream: function(stream) {\\n      return cache && cacheStream === stream ? cache : cache = transform(postclip(cacheStream = stream));\\n    },\\n    postclip: function(_) {\\n      return arguments.length ? (postclip = _, x0 = y0 = x1 = y1 = null, reset()) : postclip;\\n    },\\n    clipExtent: function(_) {\\n      return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, d3_geo_src_identity) : rectangle_clipRectangle(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];\\n    },\\n    scale: function(_) {\\n      return arguments.length ? (transform = identity_scaleTranslate((k = +_) * sx, k * sy, tx, ty), reset()) : k;\\n    },\\n    translate: function(_) {\\n      return arguments.length ? (transform = identity_scaleTranslate(k * sx, k * sy, tx = +_[0], ty = +_[1]), reset()) : [tx, ty];\\n    },\\n    reflectX: function(_) {\\n      return arguments.length ? (transform = identity_scaleTranslate(k * (sx = _ ? -1 : 1), k * sy, tx, ty), reset()) : sx < 0;\\n    },\\n    reflectY: function(_) {\\n      return arguments.length ? (transform = identity_scaleTranslate(k * sx, k * (sy = _ ? -1 : 1), tx, ty), reset()) : sy < 0;\\n    },\\n    fitExtent: function(extent, object) {\\n      return fit_fitExtent(projection, extent, object);\\n    },\\n    fitSize: function(size, object) {\\n      return fit_fitSize(projection, size, object);\\n    },\\n    fitWidth: function(width, object) {\\n      return fit_fitWidth(projection, width, object);\\n    },\\n    fitHeight: function(height, object) {\\n      return fit_fitHeight(projection, height, object);\\n    }\\n  };\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-geo/src/projection/naturalEarth1.js\\n\\n\\n\\nfunction naturalEarth1_naturalEarth1Raw(lambda, phi) {\\n  var phi2 = phi * phi, phi4 = phi2 * phi2;\\n  return [\\n    lambda * (0.8707 - 0.131979 * phi2 + phi4 * (-0.013791 + phi4 * (0.003971 * phi2 - 0.001529 * phi4))),\\n    phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 0.005916 * phi4)))\\n  ];\\n}\\n\\nnaturalEarth1_naturalEarth1Raw.invert = function(x, y) {\\n  var phi = y, i = 25, delta;\\n  do {\\n    var phi2 = phi * phi, phi4 = phi2 * phi2;\\n    phi -= delta = (phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 0.005916 * phi4))) - y) /\\n        (1.007226 + phi2 * (0.015085 * 3 + phi4 * (-0.044475 * 7 + 0.028874 * 9 * phi2 - 0.005916 * 11 * phi4)));\\n  } while (abs(delta) > math_epsilon && --i > 0);\\n  return [\\n    x / (0.8707 + (phi2 = phi * phi) * (-0.131979 + phi2 * (-0.013791 + phi2 * phi2 * phi2 * (0.003971 - 0.001529 * phi2)))),\\n    phi\\n  ];\\n};\\n\\n/* harmony default export */ var naturalEarth1 = (function() {\\n  return projection_projection(naturalEarth1_naturalEarth1Raw)\\n      .scale(175.295);\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-geo/src/projection/orthographic.js\\n\\n\\n\\n\\nfunction orthographic_orthographicRaw(x, y) {\\n  return [math_cos(y) * math_sin(x), math_sin(y)];\\n}\\n\\northographic_orthographicRaw.invert = azimuthal_azimuthalInvert(asin);\\n\\n/* harmony default export */ var orthographic = (function() {\\n  return projection_projection(orthographic_orthographicRaw)\\n      .scale(249.5)\\n      .clipAngle(90 + math_epsilon);\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-geo/src/projection/stereographic.js\\n\\n\\n\\n\\nfunction stereographic_stereographicRaw(x, y) {\\n  var cy = math_cos(y), k = 1 + math_cos(x) * cy;\\n  return [cy * math_sin(x) / k, math_sin(y) / k];\\n}\\n\\nstereographic_stereographicRaw.invert = azimuthal_azimuthalInvert(function(z) {\\n  return 2 * atan(z);\\n});\\n\\n/* harmony default export */ var stereographic = (function() {\\n  return projection_projection(stereographic_stereographicRaw)\\n      .scale(250)\\n      .clipAngle(142);\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-geo/src/projection/transverseMercator.js\\n\\n\\n\\nfunction transverseMercator_transverseMercatorRaw(lambda, phi) {\\n  return [math_log(tan((src_math_halfPi + phi) / 2)), -lambda];\\n}\\n\\ntransverseMercator_transverseMercatorRaw.invert = function(x, y) {\\n  return [-y, 2 * atan(exp(x)) - src_math_halfPi];\\n};\\n\\n/* harmony default export */ var transverseMercator = (function() {\\n  var m = mercator_mercatorProjection(transverseMercator_transverseMercatorRaw),\\n      center = m.center,\\n      rotate = m.rotate;\\n\\n  m.center = function(_) {\\n    return arguments.length ? center([-_[1], _[0]]) : (_ = center(), [_[1], -_[0]]);\\n  };\\n\\n  m.rotate = function(_) {\\n    return arguments.length ? rotate([_[0], _[1], _.length > 2 ? _[2] + 90 : 90]) : (_ = rotate(), [_[0], _[1], _[2] - 90]);\\n  };\\n\\n  return rotate([0, 0, 90])\\n      .scale(159.155);\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-geo/index.js\\n\\n\\n\\n\\n\\n\\n // DEPRECATED! Use d3.geoIdentity().clipExtent(…).\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n// CONCATENATED MODULE: ./node_modules/d3-hierarchy/src/cluster.js\\nfunction cluster_defaultSeparation(a, b) {\\n  return a.parent === b.parent ? 1 : 2;\\n}\\n\\nfunction meanX(children) {\\n  return children.reduce(meanXReduce, 0) / children.length;\\n}\\n\\nfunction meanXReduce(x, c) {\\n  return x + c.x;\\n}\\n\\nfunction maxY(children) {\\n  return 1 + children.reduce(maxYReduce, 0);\\n}\\n\\nfunction maxYReduce(y, c) {\\n  return Math.max(y, c.y);\\n}\\n\\nfunction leafLeft(node) {\\n  var children;\\n  while (children = node.children) node = children[0];\\n  return node;\\n}\\n\\nfunction leafRight(node) {\\n  var children;\\n  while (children = node.children) node = children[children.length - 1];\\n  return node;\\n}\\n\\n/* harmony default export */ var cluster = (function() {\\n  var separation = cluster_defaultSeparation,\\n      dx = 1,\\n      dy = 1,\\n      nodeSize = false;\\n\\n  function cluster(root) {\\n    var previousNode,\\n        x = 0;\\n\\n    // First walk, computing the initial x & y values.\\n    root.eachAfter(function(node) {\\n      var children = node.children;\\n      if (children) {\\n        node.x = meanX(children);\\n        node.y = maxY(children);\\n      } else {\\n        node.x = previousNode ? x += separation(node, previousNode) : 0;\\n        node.y = 0;\\n        previousNode = node;\\n      }\\n    });\\n\\n    var left = leafLeft(root),\\n        right = leafRight(root),\\n        x0 = left.x - separation(left, right) / 2,\\n        x1 = right.x + separation(right, left) / 2;\\n\\n    // Second walk, normalizing x & y to the desired size.\\n    return root.eachAfter(nodeSize ? function(node) {\\n      node.x = (node.x - root.x) * dx;\\n      node.y = (root.y - node.y) * dy;\\n    } : function(node) {\\n      node.x = (node.x - x0) / (x1 - x0) * dx;\\n      node.y = (1 - (root.y ? node.y / root.y : 1)) * dy;\\n    });\\n  }\\n\\n  cluster.separation = function(x) {\\n    return arguments.length ? (separation = x, cluster) : separation;\\n  };\\n\\n  cluster.size = function(x) {\\n    return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], cluster) : (nodeSize ? null : [dx, dy]);\\n  };\\n\\n  cluster.nodeSize = function(x) {\\n    return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], cluster) : (nodeSize ? [dx, dy] : null);\\n  };\\n\\n  return cluster;\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-hierarchy/src/hierarchy/count.js\\nfunction count_count(node) {\\n  var sum = 0,\\n      children = node.children,\\n      i = children && children.length;\\n  if (!i) sum = 1;\\n  else while (--i >= 0) sum += children[i].value;\\n  node.value = sum;\\n}\\n\\n/* harmony default export */ var hierarchy_count = (function() {\\n  return this.eachAfter(count_count);\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-hierarchy/src/hierarchy/each.js\\n/* harmony default export */ var hierarchy_each = (function(callback) {\\n  var node = this, current, next = [node], children, i, n;\\n  do {\\n    current = next.reverse(), next = [];\\n    while (node = current.pop()) {\\n      callback(node), children = node.children;\\n      if (children) for (i = 0, n = children.length; i < n; ++i) {\\n        next.push(children[i]);\\n      }\\n    }\\n  } while (next.length);\\n  return this;\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-hierarchy/src/hierarchy/eachBefore.js\\n/* harmony default export */ var eachBefore = (function(callback) {\\n  var node = this, nodes = [node], children, i;\\n  while (node = nodes.pop()) {\\n    callback(node), children = node.children;\\n    if (children) for (i = children.length - 1; i >= 0; --i) {\\n      nodes.push(children[i]);\\n    }\\n  }\\n  return this;\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-hierarchy/src/hierarchy/eachAfter.js\\n/* harmony default export */ var eachAfter = (function(callback) {\\n  var node = this, nodes = [node], next = [], children, i, n;\\n  while (node = nodes.pop()) {\\n    next.push(node), children = node.children;\\n    if (children) for (i = 0, n = children.length; i < n; ++i) {\\n      nodes.push(children[i]);\\n    }\\n  }\\n  while (node = next.pop()) {\\n    callback(node);\\n  }\\n  return this;\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-hierarchy/src/hierarchy/sum.js\\n/* harmony default export */ var hierarchy_sum = (function(value) {\\n  return this.eachAfter(function(node) {\\n    var sum = +value(node.data) || 0,\\n        children = node.children,\\n        i = children && children.length;\\n    while (--i >= 0) sum += children[i].value;\\n    node.value = sum;\\n  });\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-hierarchy/src/hierarchy/sort.js\\n/* harmony default export */ var hierarchy_sort = (function(compare) {\\n  return this.eachBefore(function(node) {\\n    if (node.children) {\\n      node.children.sort(compare);\\n    }\\n  });\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-hierarchy/src/hierarchy/path.js\\n/* harmony default export */ var hierarchy_path = (function(end) {\\n  var start = this,\\n      ancestor = leastCommonAncestor(start, end),\\n      nodes = [start];\\n  while (start !== ancestor) {\\n    start = start.parent;\\n    nodes.push(start);\\n  }\\n  var k = nodes.length;\\n  while (end !== ancestor) {\\n    nodes.splice(k, 0, end);\\n    end = end.parent;\\n  }\\n  return nodes;\\n});\\n\\nfunction leastCommonAncestor(a, b) {\\n  if (a === b) return a;\\n  var aNodes = a.ancestors(),\\n      bNodes = b.ancestors(),\\n      c = null;\\n  a = aNodes.pop();\\n  b = bNodes.pop();\\n  while (a === b) {\\n    c = a;\\n    a = aNodes.pop();\\n    b = bNodes.pop();\\n  }\\n  return c;\\n}\\n\\n// CONCATENATED MODULE: ./node_modules/d3-hierarchy/src/hierarchy/ancestors.js\\n/* harmony default export */ var ancestors = (function() {\\n  var node = this, nodes = [node];\\n  while (node = node.parent) {\\n    nodes.push(node);\\n  }\\n  return nodes;\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-hierarchy/src/hierarchy/descendants.js\\n/* harmony default export */ var descendants = (function() {\\n  var nodes = [];\\n  this.each(function(node) {\\n    nodes.push(node);\\n  });\\n  return nodes;\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-hierarchy/src/hierarchy/leaves.js\\n/* harmony default export */ var leaves = (function() {\\n  var leaves = [];\\n  this.eachBefore(function(node) {\\n    if (!node.children) {\\n      leaves.push(node);\\n    }\\n  });\\n  return leaves;\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-hierarchy/src/hierarchy/links.js\\n/* harmony default export */ var hierarchy_links = (function() {\\n  var root = this, links = [];\\n  root.each(function(node) {\\n    if (node !== root) { // Don’t include the root’s parent, if any.\\n      links.push({source: node.parent, target: node});\\n    }\\n  });\\n  return links;\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-hierarchy/src/hierarchy/index.js\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nfunction hierarchy_hierarchy(data, children) {\\n  var root = new hierarchy_Node(data),\\n      valued = +data.value && (root.value = data.value),\\n      node,\\n      nodes = [root],\\n      child,\\n      childs,\\n      i,\\n      n;\\n\\n  if (children == null) children = hierarchy_defaultChildren;\\n\\n  while (node = nodes.pop()) {\\n    if (valued) node.value = +node.data.value;\\n    if ((childs = children(node.data)) && (n = childs.length)) {\\n      node.children = new Array(n);\\n      for (i = n - 1; i >= 0; --i) {\\n        nodes.push(child = node.children[i] = new hierarchy_Node(childs[i]));\\n        child.parent = node;\\n        child.depth = node.depth + 1;\\n      }\\n    }\\n  }\\n\\n  return root.eachBefore(hierarchy_computeHeight);\\n}\\n\\nfunction hierarchy_node_copy() {\\n  return hierarchy_hierarchy(this).eachBefore(hierarchy_copyData);\\n}\\n\\nfunction hierarchy_defaultChildren(d) {\\n  return d.children;\\n}\\n\\nfunction hierarchy_copyData(node) {\\n  node.data = node.data.data;\\n}\\n\\nfunction hierarchy_computeHeight(node) {\\n  var height = 0;\\n  do node.height = height;\\n  while ((node = node.parent) && (node.height < ++height));\\n}\\n\\nfunction hierarchy_Node(data) {\\n  this.data = data;\\n  this.depth =\\n  this.height = 0;\\n  this.parent = null;\\n}\\n\\nhierarchy_Node.prototype = hierarchy_hierarchy.prototype = {\\n  constructor: hierarchy_Node,\\n  count: hierarchy_count,\\n  each: hierarchy_each,\\n  eachAfter: eachAfter,\\n  eachBefore: eachBefore,\\n  sum: hierarchy_sum,\\n  sort: hierarchy_sort,\\n  path: hierarchy_path,\\n  ancestors: ancestors,\\n  descendants: descendants,\\n  leaves: leaves,\\n  links: hierarchy_links,\\n  copy: hierarchy_node_copy\\n};\\n\\n// CONCATENATED MODULE: ./node_modules/d3-hierarchy/src/array.js\\nvar d3_hierarchy_src_array_slice = Array.prototype.slice;\\n\\nfunction array_shuffle(array) {\\n  var m = array.length,\\n      t,\\n      i;\\n\\n  while (m) {\\n    i = Math.random() * m-- | 0;\\n    t = array[m];\\n    array[m] = array[i];\\n    array[i] = t;\\n  }\\n\\n  return array;\\n}\\n\\n// CONCATENATED MODULE: ./node_modules/d3-hierarchy/src/pack/enclose.js\\n\\n\\n/* harmony default export */ var enclose = (function(circles) {\\n  var i = 0, n = (circles = array_shuffle(d3_hierarchy_src_array_slice.call(circles))).length, B = [], p, e;\\n\\n  while (i < n) {\\n    p = circles[i];\\n    if (e && enclose_enclosesWeak(e, p)) ++i;\\n    else e = enclose_encloseBasis(B = enclose_extendBasis(B, p)), i = 0;\\n  }\\n\\n  return e;\\n});\\n\\nfunction enclose_extendBasis(B, p) {\\n  var i, j;\\n\\n  if (enclose_enclosesWeakAll(p, B)) return [p];\\n\\n  // If we get here then B must have at least one element.\\n  for (i = 0; i < B.length; ++i) {\\n    if (enclose_enclosesNot(p, B[i])\\n        && enclose_enclosesWeakAll(enclose_encloseBasis2(B[i], p), B)) {\\n      return [B[i], p];\\n    }\\n  }\\n\\n  // If we get here then B must have at least two elements.\\n  for (i = 0; i < B.length - 1; ++i) {\\n    for (j = i + 1; j < B.length; ++j) {\\n      if (enclose_enclosesNot(enclose_encloseBasis2(B[i], B[j]), p)\\n          && enclose_enclosesNot(enclose_encloseBasis2(B[i], p), B[j])\\n          && enclose_enclosesNot(enclose_encloseBasis2(B[j], p), B[i])\\n          && enclose_enclosesWeakAll(enclose_encloseBasis3(B[i], B[j], p), B)) {\\n        return [B[i], B[j], p];\\n      }\\n    }\\n  }\\n\\n  // If we get here then something is very wrong.\\n  throw new Error;\\n}\\n\\nfunction enclose_enclosesNot(a, b) {\\n  var dr = a.r - b.r, dx = b.x - a.x, dy = b.y - a.y;\\n  return dr < 0 || dr * dr < dx * dx + dy * dy;\\n}\\n\\nfunction enclose_enclosesWeak(a, b) {\\n  var dr = a.r - b.r + 1e-6, dx = b.x - a.x, dy = b.y - a.y;\\n  return dr > 0 && dr * dr > dx * dx + dy * dy;\\n}\\n\\nfunction enclose_enclosesWeakAll(a, B) {\\n  for (var i = 0; i < B.length; ++i) {\\n    if (!enclose_enclosesWeak(a, B[i])) {\\n      return false;\\n    }\\n  }\\n  return true;\\n}\\n\\nfunction enclose_encloseBasis(B) {\\n  switch (B.length) {\\n    case 1: return enclose_encloseBasis1(B[0]);\\n    case 2: return enclose_encloseBasis2(B[0], B[1]);\\n    case 3: return enclose_encloseBasis3(B[0], B[1], B[2]);\\n  }\\n}\\n\\nfunction enclose_encloseBasis1(a) {\\n  return {\\n    x: a.x,\\n    y: a.y,\\n    r: a.r\\n  };\\n}\\n\\nfunction enclose_encloseBasis2(a, b) {\\n  var x1 = a.x, y1 = a.y, r1 = a.r,\\n      x2 = b.x, y2 = b.y, r2 = b.r,\\n      x21 = x2 - x1, y21 = y2 - y1, r21 = r2 - r1,\\n      l = Math.sqrt(x21 * x21 + y21 * y21);\\n  return {\\n    x: (x1 + x2 + x21 / l * r21) / 2,\\n    y: (y1 + y2 + y21 / l * r21) / 2,\\n    r: (l + r1 + r2) / 2\\n  };\\n}\\n\\nfunction enclose_encloseBasis3(a, b, c) {\\n  var x1 = a.x, y1 = a.y, r1 = a.r,\\n      x2 = b.x, y2 = b.y, r2 = b.r,\\n      x3 = c.x, y3 = c.y, r3 = c.r,\\n      a2 = x1 - x2,\\n      a3 = x1 - x3,\\n      b2 = y1 - y2,\\n      b3 = y1 - y3,\\n      c2 = r2 - r1,\\n      c3 = r3 - r1,\\n      d1 = x1 * x1 + y1 * y1 - r1 * r1,\\n      d2 = d1 - x2 * x2 - y2 * y2 + r2 * r2,\\n      d3 = d1 - x3 * x3 - y3 * y3 + r3 * r3,\\n      ab = a3 * b2 - a2 * b3,\\n      xa = (b2 * d3 - b3 * d2) / (ab * 2) - x1,\\n      xb = (b3 * c2 - b2 * c3) / ab,\\n      ya = (a3 * d2 - a2 * d3) / (ab * 2) - y1,\\n      yb = (a2 * c3 - a3 * c2) / ab,\\n      A = xb * xb + yb * yb - 1,\\n      B = 2 * (r1 + xa * xb + ya * yb),\\n      C = xa * xa + ya * ya - r1 * r1,\\n      r = -(A ? (B + Math.sqrt(B * B - 4 * A * C)) / (2 * A) : C / B);\\n  return {\\n    x: x1 + xa + xb * r,\\n    y: y1 + ya + yb * r,\\n    r: r\\n  };\\n}\\n\\n// CONCATENATED MODULE: ./node_modules/d3-hierarchy/src/pack/siblings.js\\n\\n\\nfunction siblings_place(a, b, c) {\\n  var ax = a.x,\\n      ay = a.y,\\n      da = b.r + c.r,\\n      db = a.r + c.r,\\n      dx = b.x - ax,\\n      dy = b.y - ay,\\n      dc = dx * dx + dy * dy;\\n  if (dc) {\\n    var x = 0.5 + ((db *= db) - (da *= da)) / (2 * dc),\\n        y = Math.sqrt(Math.max(0, 2 * da * (db + dc) - (db -= dc) * db - da * da)) / (2 * dc);\\n    c.x = ax + x * dx + y * dy;\\n    c.y = ay + x * dy - y * dx;\\n  } else {\\n    c.x = ax + db;\\n    c.y = ay;\\n  }\\n}\\n\\nfunction siblings_intersects(a, b) {\\n  var dx = b.x - a.x,\\n      dy = b.y - a.y,\\n      dr = a.r + b.r;\\n  return dr * dr - 1e-6 > dx * dx + dy * dy;\\n}\\n\\nfunction siblings_score(node) {\\n  var a = node._,\\n      b = node.next._,\\n      ab = a.r + b.r,\\n      dx = (a.x * b.r + b.x * a.r) / ab,\\n      dy = (a.y * b.r + b.y * a.r) / ab;\\n  return dx * dx + dy * dy;\\n}\\n\\nfunction siblings_Node(circle) {\\n  this._ = circle;\\n  this.next = null;\\n  this.previous = null;\\n}\\n\\nfunction siblings_packEnclose(circles) {\\n  if (!(n = circles.length)) return 0;\\n\\n  var a, b, c, n, aa, ca, i, j, k, sj, sk;\\n\\n  // Place the first circle.\\n  a = circles[0], a.x = 0, a.y = 0;\\n  if (!(n > 1)) return a.r;\\n\\n  // Place the second circle.\\n  b = circles[1], a.x = -b.r, b.x = a.r, b.y = 0;\\n  if (!(n > 2)) return a.r + b.r;\\n\\n  // Place the third circle.\\n  siblings_place(b, a, c = circles[2]);\\n\\n  // Initialize the front-chain using the first three circles a, b and c.\\n  a = new siblings_Node(a), b = new siblings_Node(b), c = new siblings_Node(c);\\n  a.next = c.previous = b;\\n  b.next = a.previous = c;\\n  c.next = b.previous = a;\\n\\n  // Attempt to place each remaining circle…\\n  pack: for (i = 3; i < n; ++i) {\\n    siblings_place(a._, b._, c = circles[i]), c = new siblings_Node(c);\\n\\n    // Find the closest intersecting circle on the front-chain, if any.\\n    // “Closeness” is determined by linear distance along the front-chain.\\n    // “Ahead” or “behind” is likewise determined by linear distance.\\n    j = b.next, k = a.previous, sj = b._.r, sk = a._.r;\\n    do {\\n      if (sj <= sk) {\\n        if (siblings_intersects(j._, c._)) {\\n          b = j, a.next = b, b.previous = a, --i;\\n          continue pack;\\n        }\\n        sj += j._.r, j = j.next;\\n      } else {\\n        if (siblings_intersects(k._, c._)) {\\n          a = k, a.next = b, b.previous = a, --i;\\n          continue pack;\\n        }\\n        sk += k._.r, k = k.previous;\\n      }\\n    } while (j !== k.next);\\n\\n    // Success! Insert the new circle c between a and b.\\n    c.previous = a, c.next = b, a.next = b.previous = b = c;\\n\\n    // Compute the new closest circle pair to the centroid.\\n    aa = siblings_score(a);\\n    while ((c = c.next) !== b) {\\n      if ((ca = siblings_score(c)) < aa) {\\n        a = c, aa = ca;\\n      }\\n    }\\n    b = a.next;\\n  }\\n\\n  // Compute the enclosing circle of the front chain.\\n  a = [b._], c = b; while ((c = c.next) !== b) a.push(c._); c = enclose(a);\\n\\n  // Translate the circles to put the enclosing circle around the origin.\\n  for (i = 0; i < n; ++i) a = circles[i], a.x -= c.x, a.y -= c.y;\\n\\n  return c.r;\\n}\\n\\n/* harmony default export */ var siblings = (function(circles) {\\n  siblings_packEnclose(circles);\\n  return circles;\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-hierarchy/src/accessors.js\\nfunction optional(f) {\\n  return f == null ? null : required(f);\\n}\\n\\nfunction required(f) {\\n  if (typeof f !== \"function\") throw new Error;\\n  return f;\\n}\\n\\n// CONCATENATED MODULE: ./node_modules/d3-hierarchy/src/constant.js\\nfunction constantZero() {\\n  return 0;\\n}\\n\\n/* harmony default export */ var d3_hierarchy_src_constant = (function(x) {\\n  return function() {\\n    return x;\\n  };\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-hierarchy/src/pack/index.js\\n\\n\\n\\n\\nfunction pack_defaultRadius(d) {\\n  return Math.sqrt(d.value);\\n}\\n\\n/* harmony default export */ var src_pack = (function() {\\n  var radius = null,\\n      dx = 1,\\n      dy = 1,\\n      padding = constantZero;\\n\\n  function pack(root) {\\n    root.x = dx / 2, root.y = dy / 2;\\n    if (radius) {\\n      root.eachBefore(pack_radiusLeaf(radius))\\n          .eachAfter(pack_packChildren(padding, 0.5))\\n          .eachBefore(pack_translateChild(1));\\n    } else {\\n      root.eachBefore(pack_radiusLeaf(pack_defaultRadius))\\n          .eachAfter(pack_packChildren(constantZero, 1))\\n          .eachAfter(pack_packChildren(padding, root.r / Math.min(dx, dy)))\\n          .eachBefore(pack_translateChild(Math.min(dx, dy) / (2 * root.r)));\\n    }\\n    return root;\\n  }\\n\\n  pack.radius = function(x) {\\n    return arguments.length ? (radius = optional(x), pack) : radius;\\n  };\\n\\n  pack.size = function(x) {\\n    return arguments.length ? (dx = +x[0], dy = +x[1], pack) : [dx, dy];\\n  };\\n\\n  pack.padding = function(x) {\\n    return arguments.length ? (padding = typeof x === \"function\" ? x : d3_hierarchy_src_constant(+x), pack) : padding;\\n  };\\n\\n  return pack;\\n});\\n\\nfunction pack_radiusLeaf(radius) {\\n  return function(node) {\\n    if (!node.children) {\\n      node.r = Math.max(0, +radius(node) || 0);\\n    }\\n  };\\n}\\n\\nfunction pack_packChildren(padding, k) {\\n  return function(node) {\\n    if (children = node.children) {\\n      var children,\\n          i,\\n          n = children.length,\\n          r = padding(node) * k || 0,\\n          e;\\n\\n      if (r) for (i = 0; i < n; ++i) children[i].r += r;\\n      e = siblings_packEnclose(children);\\n      if (r) for (i = 0; i < n; ++i) children[i].r -= r;\\n      node.r = e + r;\\n    }\\n  };\\n}\\n\\nfunction pack_translateChild(k) {\\n  return function(node) {\\n    var parent = node.parent;\\n    node.r *= k;\\n    if (parent) {\\n      node.x = parent.x + k * node.x;\\n      node.y = parent.y + k * node.y;\\n    }\\n  };\\n}\\n\\n// CONCATENATED MODULE: ./node_modules/d3-hierarchy/src/treemap/round.js\\n/* harmony default export */ var treemap_round = (function(node) {\\n  node.x0 = Math.round(node.x0);\\n  node.y0 = Math.round(node.y0);\\n  node.x1 = Math.round(node.x1);\\n  node.y1 = Math.round(node.y1);\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-hierarchy/src/treemap/dice.js\\n/* harmony default export */ var dice = (function(parent, x0, y0, x1, y1) {\\n  var nodes = parent.children,\\n      node,\\n      i = -1,\\n      n = nodes.length,\\n      k = parent.value && (x1 - x0) / parent.value;\\n\\n  while (++i < n) {\\n    node = nodes[i], node.y0 = y0, node.y1 = y1;\\n    node.x0 = x0, node.x1 = x0 += node.value * k;\\n  }\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-hierarchy/src/partition.js\\n\\n\\n\\n/* harmony default export */ var src_partition = (function() {\\n  var dx = 1,\\n      dy = 1,\\n      padding = 0,\\n      round = false;\\n\\n  function partition(root) {\\n    var n = root.height + 1;\\n    root.x0 =\\n    root.y0 = padding;\\n    root.x1 = dx;\\n    root.y1 = dy / n;\\n    root.eachBefore(positionNode(dy, n));\\n    if (round) root.eachBefore(treemap_round);\\n    return root;\\n  }\\n\\n  function positionNode(dy, n) {\\n    return function(node) {\\n      if (node.children) {\\n        dice(node, node.x0, dy * (node.depth + 1) / n, node.x1, dy * (node.depth + 2) / n);\\n      }\\n      var x0 = node.x0,\\n          y0 = node.y0,\\n          x1 = node.x1 - padding,\\n          y1 = node.y1 - padding;\\n      if (x1 < x0) x0 = x1 = (x0 + x1) / 2;\\n      if (y1 < y0) y0 = y1 = (y0 + y1) / 2;\\n      node.x0 = x0;\\n      node.y0 = y0;\\n      node.x1 = x1;\\n      node.y1 = y1;\\n    };\\n  }\\n\\n  partition.round = function(x) {\\n    return arguments.length ? (round = !!x, partition) : round;\\n  };\\n\\n  partition.size = function(x) {\\n    return arguments.length ? (dx = +x[0], dy = +x[1], partition) : [dx, dy];\\n  };\\n\\n  partition.padding = function(x) {\\n    return arguments.length ? (padding = +x, partition) : padding;\\n  };\\n\\n  return partition;\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-hierarchy/src/stratify.js\\n\\n\\n\\nvar stratify_keyPrefix = \"$\", // Protect against keys like “__proto__”.\\n    stratify_preroot = {depth: -1},\\n    stratify_ambiguous = {};\\n\\nfunction stratify_defaultId(d) {\\n  return d.id;\\n}\\n\\nfunction stratify_defaultParentId(d) {\\n  return d.parentId;\\n}\\n\\n/* harmony default export */ var src_stratify = (function() {\\n  var id = stratify_defaultId,\\n      parentId = stratify_defaultParentId;\\n\\n  function stratify(data) {\\n    var d,\\n        i,\\n        n = data.length,\\n        root,\\n        parent,\\n        node,\\n        nodes = new Array(n),\\n        nodeId,\\n        nodeKey,\\n        nodeByKey = {};\\n\\n    for (i = 0; i < n; ++i) {\\n      d = data[i], node = nodes[i] = new hierarchy_Node(d);\\n      if ((nodeId = id(d, i, data)) != null && (nodeId += \"\")) {\\n        nodeKey = stratify_keyPrefix + (node.id = nodeId);\\n        nodeByKey[nodeKey] = nodeKey in nodeByKey ? stratify_ambiguous : node;\\n      }\\n    }\\n\\n    for (i = 0; i < n; ++i) {\\n      node = nodes[i], nodeId = parentId(data[i], i, data);\\n      if (nodeId == null || !(nodeId += \"\")) {\\n        if (root) throw new Error(\"multiple roots\");\\n        root = node;\\n      } else {\\n        parent = nodeByKey[stratify_keyPrefix + nodeId];\\n        if (!parent) throw new Error(\"missing: \" + nodeId);\\n        if (parent === stratify_ambiguous) throw new Error(\"ambiguous: \" + nodeId);\\n        if (parent.children) parent.children.push(node);\\n        else parent.children = [node];\\n        node.parent = parent;\\n      }\\n    }\\n\\n    if (!root) throw new Error(\"no root\");\\n    root.parent = stratify_preroot;\\n    root.eachBefore(function(node) { node.depth = node.parent.depth + 1; --n; }).eachBefore(hierarchy_computeHeight);\\n    root.parent = null;\\n    if (n > 0) throw new Error(\"cycle\");\\n\\n    return root;\\n  }\\n\\n  stratify.id = function(x) {\\n    return arguments.length ? (id = required(x), stratify) : id;\\n  };\\n\\n  stratify.parentId = function(x) {\\n    return arguments.length ? (parentId = required(x), stratify) : parentId;\\n  };\\n\\n  return stratify;\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-hierarchy/src/tree.js\\n\\n\\nfunction tree_defaultSeparation(a, b) {\\n  return a.parent === b.parent ? 1 : 2;\\n}\\n\\n// function radialSeparation(a, b) {\\n//   return (a.parent === b.parent ? 1 : 2) / a.depth;\\n// }\\n\\n// This function is used to traverse the left contour of a subtree (or\\n// subforest). It returns the successor of v on this contour. This successor is\\n// either given by the leftmost child of v or by the thread of v. The function\\n// returns null if and only if v is on the highest level of its subtree.\\nfunction tree_nextLeft(v) {\\n  var children = v.children;\\n  return children ? children[0] : v.t;\\n}\\n\\n// This function works analogously to nextLeft.\\nfunction tree_nextRight(v) {\\n  var children = v.children;\\n  return children ? children[children.length - 1] : v.t;\\n}\\n\\n// Shifts the current subtree rooted at w+. This is done by increasing\\n// prelim(w+) and mod(w+) by shift.\\nfunction tree_moveSubtree(wm, wp, shift) {\\n  var change = shift / (wp.i - wm.i);\\n  wp.c -= change;\\n  wp.s += shift;\\n  wm.c += change;\\n  wp.z += shift;\\n  wp.m += shift;\\n}\\n\\n// All other shifts, applied to the smaller subtrees between w- and w+, are\\n// performed by this function. To prepare the shifts, we have to adjust\\n// change(w+), shift(w+), and change(w-).\\nfunction tree_executeShifts(v) {\\n  var shift = 0,\\n      change = 0,\\n      children = v.children,\\n      i = children.length,\\n      w;\\n  while (--i >= 0) {\\n    w = children[i];\\n    w.z += shift;\\n    w.m += shift;\\n    shift += w.s + (change += w.c);\\n  }\\n}\\n\\n// If vi-’s ancestor is a sibling of v, returns vi-’s ancestor. Otherwise,\\n// returns the specified (default) ancestor.\\nfunction tree_nextAncestor(vim, v, ancestor) {\\n  return vim.a.parent === v.parent ? vim.a : ancestor;\\n}\\n\\nfunction tree_TreeNode(node, i) {\\n  this._ = node;\\n  this.parent = null;\\n  this.children = null;\\n  this.A = null; // default ancestor\\n  this.a = this; // ancestor\\n  this.z = 0; // prelim\\n  this.m = 0; // mod\\n  this.c = 0; // change\\n  this.s = 0; // shift\\n  this.t = null; // thread\\n  this.i = i; // number\\n}\\n\\ntree_TreeNode.prototype = Object.create(hierarchy_Node.prototype);\\n\\nfunction tree_treeRoot(root) {\\n  var tree = new tree_TreeNode(root, 0),\\n      node,\\n      nodes = [tree],\\n      child,\\n      children,\\n      i,\\n      n;\\n\\n  while (node = nodes.pop()) {\\n    if (children = node._.children) {\\n      node.children = new Array(n = children.length);\\n      for (i = n - 1; i >= 0; --i) {\\n        nodes.push(child = node.children[i] = new tree_TreeNode(children[i], i));\\n        child.parent = node;\\n      }\\n    }\\n  }\\n\\n  (tree.parent = new tree_TreeNode(null, 0)).children = [tree];\\n  return tree;\\n}\\n\\n// Node-link tree diagram using the Reingold-Tilford \"tidy\" algorithm\\n/* harmony default export */ var src_tree = (function() {\\n  var separation = tree_defaultSeparation,\\n      dx = 1,\\n      dy = 1,\\n      nodeSize = null;\\n\\n  function tree(root) {\\n    var t = tree_treeRoot(root);\\n\\n    // Compute the layout using Buchheim et al.’s algorithm.\\n    t.eachAfter(firstWalk), t.parent.m = -t.z;\\n    t.eachBefore(secondWalk);\\n\\n    // If a fixed node size is specified, scale x and y.\\n    if (nodeSize) root.eachBefore(sizeNode);\\n\\n    // If a fixed tree size is specified, scale x and y based on the extent.\\n    // Compute the left-most, right-most, and depth-most nodes for extents.\\n    else {\\n      var left = root,\\n          right = root,\\n          bottom = root;\\n      root.eachBefore(function(node) {\\n        if (node.x < left.x) left = node;\\n        if (node.x > right.x) right = node;\\n        if (node.depth > bottom.depth) bottom = node;\\n      });\\n      var s = left === right ? 1 : separation(left, right) / 2,\\n          tx = s - left.x,\\n          kx = dx / (right.x + s + tx),\\n          ky = dy / (bottom.depth || 1);\\n      root.eachBefore(function(node) {\\n        node.x = (node.x + tx) * kx;\\n        node.y = node.depth * ky;\\n      });\\n    }\\n\\n    return root;\\n  }\\n\\n  // Computes a preliminary x-coordinate for v. Before that, FIRST WALK is\\n  // applied recursively to the children of v, as well as the function\\n  // APPORTION. After spacing out the children by calling EXECUTE SHIFTS, the\\n  // node v is placed to the midpoint of its outermost children.\\n  function firstWalk(v) {\\n    var children = v.children,\\n        siblings = v.parent.children,\\n        w = v.i ? siblings[v.i - 1] : null;\\n    if (children) {\\n      tree_executeShifts(v);\\n      var midpoint = (children[0].z + children[children.length - 1].z) / 2;\\n      if (w) {\\n        v.z = w.z + separation(v._, w._);\\n        v.m = v.z - midpoint;\\n      } else {\\n        v.z = midpoint;\\n      }\\n    } else if (w) {\\n      v.z = w.z + separation(v._, w._);\\n    }\\n    v.parent.A = apportion(v, w, v.parent.A || siblings[0]);\\n  }\\n\\n  // Computes all real x-coordinates by summing up the modifiers recursively.\\n  function secondWalk(v) {\\n    v._.x = v.z + v.parent.m;\\n    v.m += v.parent.m;\\n  }\\n\\n  // The core of the algorithm. Here, a new subtree is combined with the\\n  // previous subtrees. Threads are used to traverse the inside and outside\\n  // contours of the left and right subtree up to the highest common level. The\\n  // vertices used for the traversals are vi+, vi-, vo-, and vo+, where the\\n  // superscript o means outside and i means inside, the subscript - means left\\n  // subtree and + means right subtree. For summing up the modifiers along the\\n  // contour, we use respective variables si+, si-, so-, and so+. Whenever two\\n  // nodes of the inside contours conflict, we compute the left one of the\\n  // greatest uncommon ancestors using the function ANCESTOR and call MOVE\\n  // SUBTREE to shift the subtree and prepare the shifts of smaller subtrees.\\n  // Finally, we add a new thread (if necessary).\\n  function apportion(v, w, ancestor) {\\n    if (w) {\\n      var vip = v,\\n          vop = v,\\n          vim = w,\\n          vom = vip.parent.children[0],\\n          sip = vip.m,\\n          sop = vop.m,\\n          sim = vim.m,\\n          som = vom.m,\\n          shift;\\n      while (vim = tree_nextRight(vim), vip = tree_nextLeft(vip), vim && vip) {\\n        vom = tree_nextLeft(vom);\\n        vop = tree_nextRight(vop);\\n        vop.a = v;\\n        shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);\\n        if (shift > 0) {\\n          tree_moveSubtree(tree_nextAncestor(vim, v, ancestor), v, shift);\\n          sip += shift;\\n          sop += shift;\\n        }\\n        sim += vim.m;\\n        sip += vip.m;\\n        som += vom.m;\\n        sop += vop.m;\\n      }\\n      if (vim && !tree_nextRight(vop)) {\\n        vop.t = vim;\\n        vop.m += sim - sop;\\n      }\\n      if (vip && !tree_nextLeft(vom)) {\\n        vom.t = vip;\\n        vom.m += sip - som;\\n        ancestor = v;\\n      }\\n    }\\n    return ancestor;\\n  }\\n\\n  function sizeNode(node) {\\n    node.x *= dx;\\n    node.y = node.depth * dy;\\n  }\\n\\n  tree.separation = function(x) {\\n    return arguments.length ? (separation = x, tree) : separation;\\n  };\\n\\n  tree.size = function(x) {\\n    return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], tree) : (nodeSize ? null : [dx, dy]);\\n  };\\n\\n  tree.nodeSize = function(x) {\\n    return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], tree) : (nodeSize ? [dx, dy] : null);\\n  };\\n\\n  return tree;\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-hierarchy/src/treemap/slice.js\\n/* harmony default export */ var treemap_slice = (function(parent, x0, y0, x1, y1) {\\n  var nodes = parent.children,\\n      node,\\n      i = -1,\\n      n = nodes.length,\\n      k = parent.value && (y1 - y0) / parent.value;\\n\\n  while (++i < n) {\\n    node = nodes[i], node.x0 = x0, node.x1 = x1;\\n    node.y0 = y0, node.y1 = y0 += node.value * k;\\n  }\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-hierarchy/src/treemap/squarify.js\\n\\n\\n\\nvar squarify_phi = (1 + Math.sqrt(5)) / 2;\\n\\nfunction squarify_squarifyRatio(ratio, parent, x0, y0, x1, y1) {\\n  var rows = [],\\n      nodes = parent.children,\\n      row,\\n      nodeValue,\\n      i0 = 0,\\n      i1 = 0,\\n      n = nodes.length,\\n      dx, dy,\\n      value = parent.value,\\n      sumValue,\\n      minValue,\\n      maxValue,\\n      newRatio,\\n      minRatio,\\n      alpha,\\n      beta;\\n\\n  while (i0 < n) {\\n    dx = x1 - x0, dy = y1 - y0;\\n\\n    // Find the next non-empty node.\\n    do sumValue = nodes[i1++].value; while (!sumValue && i1 < n);\\n    minValue = maxValue = sumValue;\\n    alpha = Math.max(dy / dx, dx / dy) / (value * ratio);\\n    beta = sumValue * sumValue * alpha;\\n    minRatio = Math.max(maxValue / beta, beta / minValue);\\n\\n    // Keep adding nodes while the aspect ratio maintains or improves.\\n    for (; i1 < n; ++i1) {\\n      sumValue += nodeValue = nodes[i1].value;\\n      if (nodeValue < minValue) minValue = nodeValue;\\n      if (nodeValue > maxValue) maxValue = nodeValue;\\n      beta = sumValue * sumValue * alpha;\\n      newRatio = Math.max(maxValue / beta, beta / minValue);\\n      if (newRatio > minRatio) { sumValue -= nodeValue; break; }\\n      minRatio = newRatio;\\n    }\\n\\n    // Position and record the row orientation.\\n    rows.push(row = {value: sumValue, dice: dx < dy, children: nodes.slice(i0, i1)});\\n    if (row.dice) dice(row, x0, y0, x1, value ? y0 += dy * sumValue / value : y1);\\n    else treemap_slice(row, x0, y0, value ? x0 += dx * sumValue / value : x1, y1);\\n    value -= sumValue, i0 = i1;\\n  }\\n\\n  return rows;\\n}\\n\\n/* harmony default export */ var squarify = ((function custom(ratio) {\\n\\n  function squarify(parent, x0, y0, x1, y1) {\\n    squarify_squarifyRatio(ratio, parent, x0, y0, x1, y1);\\n  }\\n\\n  squarify.ratio = function(x) {\\n    return custom((x = +x) > 1 ? x : 1);\\n  };\\n\\n  return squarify;\\n})(squarify_phi));\\n\\n// CONCATENATED MODULE: ./node_modules/d3-hierarchy/src/treemap/index.js\\n\\n\\n\\n\\n\\n/* harmony default export */ var src_treemap = (function() {\\n  var tile = squarify,\\n      round = false,\\n      dx = 1,\\n      dy = 1,\\n      paddingStack = [0],\\n      paddingInner = constantZero,\\n      paddingTop = constantZero,\\n      paddingRight = constantZero,\\n      paddingBottom = constantZero,\\n      paddingLeft = constantZero;\\n\\n  function treemap(root) {\\n    root.x0 =\\n    root.y0 = 0;\\n    root.x1 = dx;\\n    root.y1 = dy;\\n    root.eachBefore(positionNode);\\n    paddingStack = [0];\\n    if (round) root.eachBefore(treemap_round);\\n    return root;\\n  }\\n\\n  function positionNode(node) {\\n    var p = paddingStack[node.depth],\\n        x0 = node.x0 + p,\\n        y0 = node.y0 + p,\\n        x1 = node.x1 - p,\\n        y1 = node.y1 - p;\\n    if (x1 < x0) x0 = x1 = (x0 + x1) / 2;\\n    if (y1 < y0) y0 = y1 = (y0 + y1) / 2;\\n    node.x0 = x0;\\n    node.y0 = y0;\\n    node.x1 = x1;\\n    node.y1 = y1;\\n    if (node.children) {\\n      p = paddingStack[node.depth + 1] = paddingInner(node) / 2;\\n      x0 += paddingLeft(node) - p;\\n      y0 += paddingTop(node) - p;\\n      x1 -= paddingRight(node) - p;\\n      y1 -= paddingBottom(node) - p;\\n      if (x1 < x0) x0 = x1 = (x0 + x1) / 2;\\n      if (y1 < y0) y0 = y1 = (y0 + y1) / 2;\\n      tile(node, x0, y0, x1, y1);\\n    }\\n  }\\n\\n  treemap.round = function(x) {\\n    return arguments.length ? (round = !!x, treemap) : round;\\n  };\\n\\n  treemap.size = function(x) {\\n    return arguments.length ? (dx = +x[0], dy = +x[1], treemap) : [dx, dy];\\n  };\\n\\n  treemap.tile = function(x) {\\n    return arguments.length ? (tile = required(x), treemap) : tile;\\n  };\\n\\n  treemap.padding = function(x) {\\n    return arguments.length ? treemap.paddingInner(x).paddingOuter(x) : treemap.paddingInner();\\n  };\\n\\n  treemap.paddingInner = function(x) {\\n    return arguments.length ? (paddingInner = typeof x === \"function\" ? x : d3_hierarchy_src_constant(+x), treemap) : paddingInner;\\n  };\\n\\n  treemap.paddingOuter = function(x) {\\n    return arguments.length ? treemap.paddingTop(x).paddingRight(x).paddingBottom(x).paddingLeft(x) : treemap.paddingTop();\\n  };\\n\\n  treemap.paddingTop = function(x) {\\n    return arguments.length ? (paddingTop = typeof x === \"function\" ? x : d3_hierarchy_src_constant(+x), treemap) : paddingTop;\\n  };\\n\\n  treemap.paddingRight = function(x) {\\n    return arguments.length ? (paddingRight = typeof x === \"function\" ? x : d3_hierarchy_src_constant(+x), treemap) : paddingRight;\\n  };\\n\\n  treemap.paddingBottom = function(x) {\\n    return arguments.length ? (paddingBottom = typeof x === \"function\" ? x : d3_hierarchy_src_constant(+x), treemap) : paddingBottom;\\n  };\\n\\n  treemap.paddingLeft = function(x) {\\n    return arguments.length ? (paddingLeft = typeof x === \"function\" ? x : d3_hierarchy_src_constant(+x), treemap) : paddingLeft;\\n  };\\n\\n  return treemap;\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-hierarchy/src/treemap/binary.js\\n/* harmony default export */ var binary = (function(parent, x0, y0, x1, y1) {\\n  var nodes = parent.children,\\n      i, n = nodes.length,\\n      sum, sums = new Array(n + 1);\\n\\n  for (sums[0] = sum = i = 0; i < n; ++i) {\\n    sums[i + 1] = sum += nodes[i].value;\\n  }\\n\\n  partition(0, n, parent.value, x0, y0, x1, y1);\\n\\n  function partition(i, j, value, x0, y0, x1, y1) {\\n    if (i >= j - 1) {\\n      var node = nodes[i];\\n      node.x0 = x0, node.y0 = y0;\\n      node.x1 = x1, node.y1 = y1;\\n      return;\\n    }\\n\\n    var valueOffset = sums[i],\\n        valueTarget = (value / 2) + valueOffset,\\n        k = i + 1,\\n        hi = j - 1;\\n\\n    while (k < hi) {\\n      var mid = k + hi >>> 1;\\n      if (sums[mid] < valueTarget) k = mid + 1;\\n      else hi = mid;\\n    }\\n\\n    if ((valueTarget - sums[k - 1]) < (sums[k] - valueTarget) && i + 1 < k) --k;\\n\\n    var valueLeft = sums[k] - valueOffset,\\n        valueRight = value - valueLeft;\\n\\n    if ((x1 - x0) > (y1 - y0)) {\\n      var xk = (x0 * valueRight + x1 * valueLeft) / value;\\n      partition(i, k, valueLeft, x0, y0, xk, y1);\\n      partition(k, j, valueRight, xk, y0, x1, y1);\\n    } else {\\n      var yk = (y0 * valueRight + y1 * valueLeft) / value;\\n      partition(i, k, valueLeft, x0, y0, x1, yk);\\n      partition(k, j, valueRight, x0, yk, x1, y1);\\n    }\\n  }\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-hierarchy/src/treemap/sliceDice.js\\n\\n\\n\\n/* harmony default export */ var sliceDice = (function(parent, x0, y0, x1, y1) {\\n  (parent.depth & 1 ? treemap_slice : dice)(parent, x0, y0, x1, y1);\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-hierarchy/src/treemap/resquarify.js\\n\\n\\n\\n\\n/* harmony default export */ var treemap_resquarify = ((function custom(ratio) {\\n\\n  function resquarify(parent, x0, y0, x1, y1) {\\n    if ((rows = parent._squarify) && (rows.ratio === ratio)) {\\n      var rows,\\n          row,\\n          nodes,\\n          i,\\n          j = -1,\\n          n,\\n          m = rows.length,\\n          value = parent.value;\\n\\n      while (++j < m) {\\n        row = rows[j], nodes = row.children;\\n        for (i = row.value = 0, n = nodes.length; i < n; ++i) row.value += nodes[i].value;\\n        if (row.dice) dice(row, x0, y0, x1, y0 += (y1 - y0) * row.value / value);\\n        else treemap_slice(row, x0, y0, x0 += (x1 - x0) * row.value / value, y1);\\n        value -= row.value;\\n      }\\n    } else {\\n      parent._squarify = rows = squarify_squarifyRatio(ratio, parent, x0, y0, x1, y1);\\n      rows.ratio = ratio;\\n    }\\n  }\\n\\n  resquarify.ratio = function(x) {\\n    return custom((x = +x) > 1 ? x : 1);\\n  };\\n\\n  return resquarify;\\n})(squarify_phi));\\n\\n// CONCATENATED MODULE: ./node_modules/d3-hierarchy/index.js\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n// CONCATENATED MODULE: ./node_modules/d3-polygon/src/area.js\\n/* harmony default export */ var d3_polygon_src_area = (function(polygon) {\\n  var i = -1,\\n      n = polygon.length,\\n      a,\\n      b = polygon[n - 1],\\n      area = 0;\\n\\n  while (++i < n) {\\n    a = b;\\n    b = polygon[i];\\n    area += a[1] * b[0] - a[0] * b[1];\\n  }\\n\\n  return area / 2;\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-polygon/src/centroid.js\\n/* harmony default export */ var d3_polygon_src_centroid = (function(polygon) {\\n  var i = -1,\\n      n = polygon.length,\\n      x = 0,\\n      y = 0,\\n      a,\\n      b = polygon[n - 1],\\n      c,\\n      k = 0;\\n\\n  while (++i < n) {\\n    a = b;\\n    b = polygon[i];\\n    k += c = a[0] * b[1] - b[0] * a[1];\\n    x += (a[0] + b[0]) * c;\\n    y += (a[1] + b[1]) * c;\\n  }\\n\\n  return k *= 3, [x / k, y / k];\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-polygon/src/cross.js\\n// Returns the 2D cross product of AB and AC vectors, i.e., the z-component of\\n// the 3D cross product in a quadrant I Cartesian coordinate system (+x is\\n// right, +y is up). Returns a positive value if ABC is counter-clockwise,\\n// negative if clockwise, and zero if the points are collinear.\\n/* harmony default export */ var src_cross = (function(a, b, c) {\\n  return (b[0] - a[0]) * (c[1] - a[1]) - (b[1] - a[1]) * (c[0] - a[0]);\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-polygon/src/hull.js\\n\\n\\nfunction hull_lexicographicOrder(a, b) {\\n  return a[0] - b[0] || a[1] - b[1];\\n}\\n\\n// Computes the upper convex hull per the monotone chain algorithm.\\n// Assumes points.length >= 3, is sorted by x, unique in y.\\n// Returns an array of indices into points in left-to-right order.\\nfunction hull_computeUpperHullIndexes(points) {\\n  var n = points.length,\\n      indexes = [0, 1],\\n      size = 2;\\n\\n  for (var i = 2; i < n; ++i) {\\n    while (size > 1 && src_cross(points[indexes[size - 2]], points[indexes[size - 1]], points[i]) <= 0) --size;\\n    indexes[size++] = i;\\n  }\\n\\n  return indexes.slice(0, size); // remove popped points\\n}\\n\\n/* harmony default export */ var hull = (function(points) {\\n  if ((n = points.length) < 3) return null;\\n\\n  var i,\\n      n,\\n      sortedPoints = new Array(n),\\n      flippedPoints = new Array(n);\\n\\n  for (i = 0; i < n; ++i) sortedPoints[i] = [+points[i][0], +points[i][1], i];\\n  sortedPoints.sort(hull_lexicographicOrder);\\n  for (i = 0; i < n; ++i) flippedPoints[i] = [sortedPoints[i][0], -sortedPoints[i][1]];\\n\\n  var upperIndexes = hull_computeUpperHullIndexes(sortedPoints),\\n      lowerIndexes = hull_computeUpperHullIndexes(flippedPoints);\\n\\n  // Construct the hull polygon, removing possible duplicate endpoints.\\n  var skipLeft = lowerIndexes[0] === upperIndexes[0],\\n      skipRight = lowerIndexes[lowerIndexes.length - 1] === upperIndexes[upperIndexes.length - 1],\\n      hull = [];\\n\\n  // Add upper hull in right-to-l order.\\n  // Then add lower hull in left-to-right order.\\n  for (i = upperIndexes.length - 1; i >= 0; --i) hull.push(points[sortedPoints[upperIndexes[i]][2]]);\\n  for (i = +skipLeft; i < lowerIndexes.length - skipRight; ++i) hull.push(points[sortedPoints[lowerIndexes[i]][2]]);\\n\\n  return hull;\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-polygon/src/contains.js\\n/* harmony default export */ var src_contains = (function(polygon, point) {\\n  var n = polygon.length,\\n      p = polygon[n - 1],\\n      x = point[0], y = point[1],\\n      x0 = p[0], y0 = p[1],\\n      x1, y1,\\n      inside = false;\\n\\n  for (var i = 0; i < n; ++i) {\\n    p = polygon[i], x1 = p[0], y1 = p[1];\\n    if (((y1 > y) !== (y0 > y)) && (x < (x0 - x1) * (y - y1) / (y0 - y1) + x1)) inside = !inside;\\n    x0 = x1, y0 = y1;\\n  }\\n\\n  return inside;\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-polygon/src/length.js\\n/* harmony default export */ var d3_polygon_src_length = (function(polygon) {\\n  var i = -1,\\n      n = polygon.length,\\n      b = polygon[n - 1],\\n      xa,\\n      ya,\\n      xb = b[0],\\n      yb = b[1],\\n      perimeter = 0;\\n\\n  while (++i < n) {\\n    xa = xb;\\n    ya = yb;\\n    b = polygon[i];\\n    xb = b[0];\\n    yb = b[1];\\n    xa -= xb;\\n    ya -= yb;\\n    perimeter += Math.sqrt(xa * xa + ya * ya);\\n  }\\n\\n  return perimeter;\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-polygon/index.js\\n\\n\\n\\n\\n\\n\\n// CONCATENATED MODULE: ./node_modules/d3-queue/src/array.js\\nvar d3_queue_src_array_slice = [].slice;\\n\\n// CONCATENATED MODULE: ./node_modules/d3-queue/src/queue.js\\n\\n\\nvar queue_noabort = {};\\n\\nfunction queue_Queue(size) {\\n  this._size = size;\\n  this._call =\\n  this._error = null;\\n  this._tasks = [];\\n  this._data = [];\\n  this._waiting =\\n  this._active =\\n  this._ended =\\n  this._start = 0; // inside a synchronous task callback?\\n}\\n\\nqueue_Queue.prototype = queue_queue.prototype = {\\n  constructor: queue_Queue,\\n  defer: function(callback) {\\n    if (typeof callback !== \"function\") throw new Error(\"invalid callback\");\\n    if (this._call) throw new Error(\"defer after await\");\\n    if (this._error != null) return this;\\n    var t = d3_queue_src_array_slice.call(arguments, 1);\\n    t.push(callback);\\n    ++this._waiting, this._tasks.push(t);\\n    queue_poke(this);\\n    return this;\\n  },\\n  abort: function() {\\n    if (this._error == null) queue_abort(this, new Error(\"abort\"));\\n    return this;\\n  },\\n  await: function(callback) {\\n    if (typeof callback !== \"function\") throw new Error(\"invalid callback\");\\n    if (this._call) throw new Error(\"multiple await\");\\n    this._call = function(error, results) { callback.apply(null, [error].concat(results)); };\\n    queue_maybeNotify(this);\\n    return this;\\n  },\\n  awaitAll: function(callback) {\\n    if (typeof callback !== \"function\") throw new Error(\"invalid callback\");\\n    if (this._call) throw new Error(\"multiple await\");\\n    this._call = callback;\\n    queue_maybeNotify(this);\\n    return this;\\n  }\\n};\\n\\nfunction queue_poke(q) {\\n  if (!q._start) {\\n    try { queue_start(q); } // let the current task complete\\n    catch (e) {\\n      if (q._tasks[q._ended + q._active - 1]) queue_abort(q, e); // task errored synchronously\\n      else if (!q._data) throw e; // await callback errored synchronously\\n    }\\n  }\\n}\\n\\nfunction queue_start(q) {\\n  while (q._start = q._waiting && q._active < q._size) {\\n    var i = q._ended + q._active,\\n        t = q._tasks[i],\\n        j = t.length - 1,\\n        c = t[j];\\n    t[j] = queue_end(q, i);\\n    --q._waiting, ++q._active;\\n    t = c.apply(null, t);\\n    if (!q._tasks[i]) continue; // task finished synchronously\\n    q._tasks[i] = t || queue_noabort;\\n  }\\n}\\n\\nfunction queue_end(q, i) {\\n  return function(e, r) {\\n    if (!q._tasks[i]) return; // ignore multiple callbacks\\n    --q._active, ++q._ended;\\n    q._tasks[i] = null;\\n    if (q._error != null) return; // ignore secondary errors\\n    if (e != null) {\\n      queue_abort(q, e);\\n    } else {\\n      q._data[i] = r;\\n      if (q._waiting) queue_poke(q);\\n      else queue_maybeNotify(q);\\n    }\\n  };\\n}\\n\\nfunction queue_abort(q, e) {\\n  var i = q._tasks.length, t;\\n  q._error = e; // ignore active callbacks\\n  q._data = undefined; // allow gc\\n  q._waiting = NaN; // prevent starting\\n\\n  while (--i >= 0) {\\n    if (t = q._tasks[i]) {\\n      q._tasks[i] = null;\\n      if (t.abort) {\\n        try { t.abort(); }\\n        catch (e) { /* ignore */ }\\n      }\\n    }\\n  }\\n\\n  q._active = NaN; // allow notification\\n  queue_maybeNotify(q);\\n}\\n\\nfunction queue_maybeNotify(q) {\\n  if (!q._active && q._call) {\\n    var d = q._data;\\n    q._data = undefined; // allow gc\\n    q._call(q._error, d);\\n  }\\n}\\n\\nfunction queue_queue(concurrency) {\\n  if (concurrency == null) concurrency = Infinity;\\n  else if (!((concurrency = +concurrency) >= 1)) throw new Error(\"invalid concurrency\");\\n  return new queue_Queue(concurrency);\\n}\\n\\n// CONCATENATED MODULE: ./node_modules/d3-queue/index.js\\n\\n\\n// CONCATENATED MODULE: ./node_modules/d3-random/src/defaultSource.js\\n/* harmony default export */ var src_defaultSource = (function() {\\n  return Math.random();\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-random/src/uniform.js\\n\\n\\n/* harmony default export */ var uniform = ((function sourceRandomUniform(source) {\\n  function randomUniform(min, max) {\\n    min = min == null ? 0 : +min;\\n    max = max == null ? 1 : +max;\\n    if (arguments.length === 1) max = min, min = 0;\\n    else max -= min;\\n    return function() {\\n      return source() * max + min;\\n    };\\n  }\\n\\n  randomUniform.source = sourceRandomUniform;\\n\\n  return randomUniform;\\n})(src_defaultSource));\\n\\n// CONCATENATED MODULE: ./node_modules/d3-random/src/normal.js\\n\\n\\n/* harmony default export */ var src_normal = ((function sourceRandomNormal(source) {\\n  function randomNormal(mu, sigma) {\\n    var x, r;\\n    mu = mu == null ? 0 : +mu;\\n    sigma = sigma == null ? 1 : +sigma;\\n    return function() {\\n      var y;\\n\\n      // If available, use the second previously-generated uniform random.\\n      if (x != null) y = x, x = null;\\n\\n      // Otherwise, generate a new x and y.\\n      else do {\\n        x = source() * 2 - 1;\\n        y = source() * 2 - 1;\\n        r = x * x + y * y;\\n      } while (!r || r > 1);\\n\\n      return mu + sigma * y * Math.sqrt(-2 * Math.log(r) / r);\\n    };\\n  }\\n\\n  randomNormal.source = sourceRandomNormal;\\n\\n  return randomNormal;\\n})(src_defaultSource));\\n\\n// CONCATENATED MODULE: ./node_modules/d3-random/src/logNormal.js\\n\\n\\n\\n/* harmony default export */ var logNormal = ((function sourceRandomLogNormal(source) {\\n  function randomLogNormal() {\\n    var randomNormal = src_normal.source(source).apply(this, arguments);\\n    return function() {\\n      return Math.exp(randomNormal());\\n    };\\n  }\\n\\n  randomLogNormal.source = sourceRandomLogNormal;\\n\\n  return randomLogNormal;\\n})(src_defaultSource));\\n\\n// CONCATENATED MODULE: ./node_modules/d3-random/src/irwinHall.js\\n\\n\\n/* harmony default export */ var irwinHall = ((function sourceRandomIrwinHall(source) {\\n  function randomIrwinHall(n) {\\n    return function() {\\n      for (var sum = 0, i = 0; i < n; ++i) sum += source();\\n      return sum;\\n    };\\n  }\\n\\n  randomIrwinHall.source = sourceRandomIrwinHall;\\n\\n  return randomIrwinHall;\\n})(src_defaultSource));\\n\\n// CONCATENATED MODULE: ./node_modules/d3-random/src/bates.js\\n\\n\\n\\n/* harmony default export */ var bates = ((function sourceRandomBates(source) {\\n  function randomBates(n) {\\n    var randomIrwinHall = irwinHall.source(source)(n);\\n    return function() {\\n      return randomIrwinHall() / n;\\n    };\\n  }\\n\\n  randomBates.source = sourceRandomBates;\\n\\n  return randomBates;\\n})(src_defaultSource));\\n\\n// CONCATENATED MODULE: ./node_modules/d3-random/src/exponential.js\\n\\n\\n/* harmony default export */ var src_exponential = ((function sourceRandomExponential(source) {\\n  function randomExponential(lambda) {\\n    return function() {\\n      return -Math.log(1 - source()) / lambda;\\n    };\\n  }\\n\\n  randomExponential.source = sourceRandomExponential;\\n\\n  return randomExponential;\\n})(src_defaultSource));\\n\\n// CONCATENATED MODULE: ./node_modules/d3-random/index.js\\n\\n\\n\\n\\n\\n\\n\\n// CONCATENATED MODULE: ./node_modules/d3-request/src/request.js\\n\\n\\n\\n/* harmony default export */ var src_request = (function(url, callback) {\\n  var request,\\n      event = src_dispatch(\"beforesend\", \"progress\", \"load\", \"error\"),\\n      mimeType,\\n      headers = src_map(),\\n      xhr = new XMLHttpRequest,\\n      user = null,\\n      password = null,\\n      response,\\n      responseType,\\n      timeout = 0;\\n\\n  // If IE does not support CORS, use XDomainRequest.\\n  if (typeof XDomainRequest !== \"undefined\"\\n      && !(\"withCredentials\" in xhr)\\n      && /^(http(s)?:)?\\\\/\\\\//.test(url)) xhr = new XDomainRequest;\\n\\n  \"onload\" in xhr\\n      ? xhr.onload = xhr.onerror = xhr.ontimeout = respond\\n      : xhr.onreadystatechange = function(o) { xhr.readyState > 3 && respond(o); };\\n\\n  function respond(o) {\\n    var status = xhr.status, result;\\n    if (!status && request_hasResponse(xhr)\\n        || status >= 200 && status < 300\\n        || status === 304) {\\n      if (response) {\\n        try {\\n          result = response.call(request, xhr);\\n        } catch (e) {\\n          event.call(\"error\", request, e);\\n          return;\\n        }\\n      } else {\\n        result = xhr;\\n      }\\n      event.call(\"load\", request, result);\\n    } else {\\n      event.call(\"error\", request, o);\\n    }\\n  }\\n\\n  xhr.onprogress = function(e) {\\n    event.call(\"progress\", request, e);\\n  };\\n\\n  request = {\\n    header: function(name, value) {\\n      name = (name + \"\").toLowerCase();\\n      if (arguments.length < 2) return headers.get(name);\\n      if (value == null) headers.remove(name);\\n      else headers.set(name, value + \"\");\\n      return request;\\n    },\\n\\n    // If mimeType is non-null and no Accept header is set, a default is used.\\n    mimeType: function(value) {\\n      if (!arguments.length) return mimeType;\\n      mimeType = value == null ? null : value + \"\";\\n      return request;\\n    },\\n\\n    // Specifies what type the response value should take;\\n    // for instance, arraybuffer, blob, document, or text.\\n    responseType: function(value) {\\n      if (!arguments.length) return responseType;\\n      responseType = value;\\n      return request;\\n    },\\n\\n    timeout: function(value) {\\n      if (!arguments.length) return timeout;\\n      timeout = +value;\\n      return request;\\n    },\\n\\n    user: function(value) {\\n      return arguments.length < 1 ? user : (user = value == null ? null : value + \"\", request);\\n    },\\n\\n    password: function(value) {\\n      return arguments.length < 1 ? password : (password = value == null ? null : value + \"\", request);\\n    },\\n\\n    // Specify how to convert the response content to a specific type;\\n    // changes the callback value on \"load\" events.\\n    response: function(value) {\\n      response = value;\\n      return request;\\n    },\\n\\n    // Alias for send(\"GET\", …).\\n    get: function(data, callback) {\\n      return request.send(\"GET\", data, callback);\\n    },\\n\\n    // Alias for send(\"POST\", …).\\n    post: function(data, callback) {\\n      return request.send(\"POST\", data, callback);\\n    },\\n\\n    // If callback is non-null, it will be used for error and load events.\\n    send: function(method, data, callback) {\\n      xhr.open(method, url, true, user, password);\\n      if (mimeType != null && !headers.has(\"accept\")) headers.set(\"accept\", mimeType + \",*/*\");\\n      if (xhr.setRequestHeader) headers.each(function(value, name) { xhr.setRequestHeader(name, value); });\\n      if (mimeType != null && xhr.overrideMimeType) xhr.overrideMimeType(mimeType);\\n      if (responseType != null) xhr.responseType = responseType;\\n      if (timeout > 0) xhr.timeout = timeout;\\n      if (callback == null && typeof data === \"function\") callback = data, data = null;\\n      if (callback != null && callback.length === 1) callback = request_fixCallback(callback);\\n      if (callback != null) request.on(\"error\", callback).on(\"load\", function(xhr) { callback(null, xhr); });\\n      event.call(\"beforesend\", request, xhr);\\n      xhr.send(data == null ? null : data);\\n      return request;\\n    },\\n\\n    abort: function() {\\n      xhr.abort();\\n      return request;\\n    },\\n\\n    on: function() {\\n      var value = event.on.apply(event, arguments);\\n      return value === event ? request : value;\\n    }\\n  };\\n\\n  if (callback != null) {\\n    if (typeof callback !== \"function\") throw new Error(\"invalid callback: \" + callback);\\n    return request.get(callback);\\n  }\\n\\n  return request;\\n});\\n\\nfunction request_fixCallback(callback) {\\n  return function(error, xhr) {\\n    callback(error == null ? xhr : null);\\n  };\\n}\\n\\nfunction request_hasResponse(xhr) {\\n  var type = xhr.responseType;\\n  return type && type !== \"text\"\\n      ? xhr.response // null on error\\n      : xhr.responseText; // \"\" on error\\n}\\n\\n// CONCATENATED MODULE: ./node_modules/d3-request/src/type.js\\n\\n\\n/* harmony default export */ var src_type = (function(defaultMimeType, response) {\\n  return function(url, callback) {\\n    var r = src_request(url).mimeType(defaultMimeType).response(response);\\n    if (callback != null) {\\n      if (typeof callback !== \"function\") throw new Error(\"invalid callback: \" + callback);\\n      return r.get(callback);\\n    }\\n    return r;\\n  };\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-request/src/html.js\\n\\n\\n/* harmony default export */ var src_html = (src_type(\"text/html\", function(xhr) {\\n  return document.createRange().createContextualFragment(xhr.responseText);\\n}));\\n\\n// CONCATENATED MODULE: ./node_modules/d3-request/src/json.js\\n\\n\\n/* harmony default export */ var json = (src_type(\"application/json\", function(xhr) {\\n  return JSON.parse(xhr.responseText);\\n}));\\n\\n// CONCATENATED MODULE: ./node_modules/d3-request/src/text.js\\n\\n\\n/* harmony default export */ var src_text = (src_type(\"text/plain\", function(xhr) {\\n  return xhr.responseText;\\n}));\\n\\n// CONCATENATED MODULE: ./node_modules/d3-request/src/xml.js\\n\\n\\n/* harmony default export */ var xml = (src_type(\"application/xml\", function(xhr) {\\n  var xml = xhr.responseXML;\\n  if (!xml) throw new Error(\"parse error\");\\n  return xml;\\n}));\\n\\n// CONCATENATED MODULE: ./node_modules/d3-request/src/dsv.js\\n\\n\\n/* harmony default export */ var src_dsv = (function(defaultMimeType, parse) {\\n  return function(url, row, callback) {\\n    if (arguments.length < 3) callback = row, row = null;\\n    var r = src_request(url).mimeType(defaultMimeType);\\n    r.row = function(_) { return arguments.length ? r.response(dsv_responseOf(parse, row = _)) : row; };\\n    r.row(row);\\n    return callback ? r.get(callback) : r;\\n  };\\n});\\n\\nfunction dsv_responseOf(parse, row) {\\n  return function(request) {\\n    return parse(request.responseText, row);\\n  };\\n}\\n\\n// CONCATENATED MODULE: ./node_modules/d3-request/src/csv.js\\n\\n\\n\\n/* harmony default export */ var src_csv = (src_dsv(\"text/csv\", csv_csvParse));\\n\\n// CONCATENATED MODULE: ./node_modules/d3-request/src/tsv.js\\n\\n\\n\\n/* harmony default export */ var src_tsv = (src_dsv(\"text/tab-separated-values\", tsv_tsvParse));\\n\\n// CONCATENATED MODULE: ./node_modules/d3-request/index.js\\n\\n\\n\\n\\n\\n\\n\\n\\n// CONCATENATED MODULE: ./node_modules/d3-scale/src/array.js\\nvar src_array_array = Array.prototype;\\n\\nvar array_map = src_array_array.map;\\nvar d3_scale_src_array_slice = src_array_array.slice;\\n\\n// CONCATENATED MODULE: ./node_modules/d3-scale/src/ordinal.js\\n\\n\\n\\nvar ordinal_implicit = {name: \"implicit\"};\\n\\nfunction ordinal_ordinal(range) {\\n  var index = src_map(),\\n      domain = [],\\n      unknown = ordinal_implicit;\\n\\n  range = range == null ? [] : d3_scale_src_array_slice.call(range);\\n\\n  function scale(d) {\\n    var key = d + \"\", i = index.get(key);\\n    if (!i) {\\n      if (unknown !== ordinal_implicit) return unknown;\\n      index.set(key, i = domain.push(d));\\n    }\\n    return range[(i - 1) % range.length];\\n  }\\n\\n  scale.domain = function(_) {\\n    if (!arguments.length) return domain.slice();\\n    domain = [], index = src_map();\\n    var i = -1, n = _.length, d, key;\\n    while (++i < n) if (!index.has(key = (d = _[i]) + \"\")) index.set(key, domain.push(d));\\n    return scale;\\n  };\\n\\n  scale.range = function(_) {\\n    return arguments.length ? (range = d3_scale_src_array_slice.call(_), scale) : range.slice();\\n  };\\n\\n  scale.unknown = function(_) {\\n    return arguments.length ? (unknown = _, scale) : unknown;\\n  };\\n\\n  scale.copy = function() {\\n    return ordinal_ordinal()\\n        .domain(domain)\\n        .range(range)\\n        .unknown(unknown);\\n  };\\n\\n  return scale;\\n}\\n\\n// CONCATENATED MODULE: ./node_modules/d3-scale/src/band.js\\n\\n\\n\\nfunction band_band() {\\n  var scale = ordinal_ordinal().unknown(undefined),\\n      domain = scale.domain,\\n      ordinalRange = scale.range,\\n      range = [0, 1],\\n      step,\\n      bandwidth,\\n      round = false,\\n      paddingInner = 0,\\n      paddingOuter = 0,\\n      align = 0.5;\\n\\n  delete scale.unknown;\\n\\n  function rescale() {\\n    var n = domain().length,\\n        reverse = range[1] < range[0],\\n        start = range[reverse - 0],\\n        stop = range[1 - reverse];\\n    step = (stop - start) / Math.max(1, n - paddingInner + paddingOuter * 2);\\n    if (round) step = Math.floor(step);\\n    start += (stop - start - step * (n - paddingInner)) * align;\\n    bandwidth = step * (1 - paddingInner);\\n    if (round) start = Math.round(start), bandwidth = Math.round(bandwidth);\\n    var values = src_range(n).map(function(i) { return start + step * i; });\\n    return ordinalRange(reverse ? values.reverse() : values);\\n  }\\n\\n  scale.domain = function(_) {\\n    return arguments.length ? (domain(_), rescale()) : domain();\\n  };\\n\\n  scale.range = function(_) {\\n    return arguments.length ? (range = [+_[0], +_[1]], rescale()) : range.slice();\\n  };\\n\\n  scale.rangeRound = function(_) {\\n    return range = [+_[0], +_[1]], round = true, rescale();\\n  };\\n\\n  scale.bandwidth = function() {\\n    return bandwidth;\\n  };\\n\\n  scale.step = function() {\\n    return step;\\n  };\\n\\n  scale.round = function(_) {\\n    return arguments.length ? (round = !!_, rescale()) : round;\\n  };\\n\\n  scale.padding = function(_) {\\n    return arguments.length ? (paddingInner = paddingOuter = Math.max(0, Math.min(1, _)), rescale()) : paddingInner;\\n  };\\n\\n  scale.paddingInner = function(_) {\\n    return arguments.length ? (paddingInner = Math.max(0, Math.min(1, _)), rescale()) : paddingInner;\\n  };\\n\\n  scale.paddingOuter = function(_) {\\n    return arguments.length ? (paddingOuter = Math.max(0, Math.min(1, _)), rescale()) : paddingOuter;\\n  };\\n\\n  scale.align = function(_) {\\n    return arguments.length ? (align = Math.max(0, Math.min(1, _)), rescale()) : align;\\n  };\\n\\n  scale.copy = function() {\\n    return band_band()\\n        .domain(domain())\\n        .range(range)\\n        .round(round)\\n        .paddingInner(paddingInner)\\n        .paddingOuter(paddingOuter)\\n        .align(align);\\n  };\\n\\n  return rescale();\\n}\\n\\nfunction band_pointish(scale) {\\n  var copy = scale.copy;\\n\\n  scale.padding = scale.paddingOuter;\\n  delete scale.paddingInner;\\n  delete scale.paddingOuter;\\n\\n  scale.copy = function() {\\n    return band_pointish(copy());\\n  };\\n\\n  return scale;\\n}\\n\\nfunction band_point() {\\n  return band_pointish(band_band().paddingInner(1));\\n}\\n\\n// CONCATENATED MODULE: ./node_modules/d3-scale/src/constant.js\\n/* harmony default export */ var d3_scale_src_constant = (function(x) {\\n  return function() {\\n    return x;\\n  };\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-scale/src/number.js\\n/* harmony default export */ var d3_scale_src_number = (function(x) {\\n  return +x;\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-scale/src/continuous.js\\n\\n\\n\\n\\n\\n\\nvar continuous_unit = [0, 1];\\n\\nfunction continuous_deinterpolateLinear(a, b) {\\n  return (b -= (a = +a))\\n      ? function(x) { return (x - a) / b; }\\n      : d3_scale_src_constant(b);\\n}\\n\\nfunction continuous_deinterpolateClamp(deinterpolate) {\\n  return function(a, b) {\\n    var d = deinterpolate(a = +a, b = +b);\\n    return function(x) { return x <= a ? 0 : x >= b ? 1 : d(x); };\\n  };\\n}\\n\\nfunction continuous_reinterpolateClamp(reinterpolate) {\\n  return function(a, b) {\\n    var r = reinterpolate(a = +a, b = +b);\\n    return function(t) { return t <= 0 ? a : t >= 1 ? b : r(t); };\\n  };\\n}\\n\\nfunction continuous_bimap(domain, range, deinterpolate, reinterpolate) {\\n  var d0 = domain[0], d1 = domain[1], r0 = range[0], r1 = range[1];\\n  if (d1 < d0) d0 = deinterpolate(d1, d0), r0 = reinterpolate(r1, r0);\\n  else d0 = deinterpolate(d0, d1), r0 = reinterpolate(r0, r1);\\n  return function(x) { return r0(d0(x)); };\\n}\\n\\nfunction continuous_polymap(domain, range, deinterpolate, reinterpolate) {\\n  var j = Math.min(domain.length, range.length) - 1,\\n      d = new Array(j),\\n      r = new Array(j),\\n      i = -1;\\n\\n  // Reverse descending domains.\\n  if (domain[j] < domain[0]) {\\n    domain = domain.slice().reverse();\\n    range = range.slice().reverse();\\n  }\\n\\n  while (++i < j) {\\n    d[i] = deinterpolate(domain[i], domain[i + 1]);\\n    r[i] = reinterpolate(range[i], range[i + 1]);\\n  }\\n\\n  return function(x) {\\n    var i = bisect(domain, x, 1, j) - 1;\\n    return r[i](d[i](x));\\n  };\\n}\\n\\nfunction continuous_copy(source, target) {\\n  return target\\n      .domain(source.domain())\\n      .range(source.range())\\n      .interpolate(source.interpolate())\\n      .clamp(source.clamp());\\n}\\n\\n// deinterpolate(a, b)(x) takes a domain value x in [a,b] and returns the corresponding parameter t in [0,1].\\n// reinterpolate(a, b)(t) takes a parameter t in [0,1] and returns the corresponding domain value x in [a,b].\\nfunction continuous_continuous(deinterpolate, reinterpolate) {\\n  var domain = continuous_unit,\\n      range = continuous_unit,\\n      interpolate = src_value,\\n      clamp = false,\\n      piecewise,\\n      output,\\n      input;\\n\\n  function rescale() {\\n    piecewise = Math.min(domain.length, range.length) > 2 ? continuous_polymap : continuous_bimap;\\n    output = input = null;\\n    return scale;\\n  }\\n\\n  function scale(x) {\\n    return (output || (output = piecewise(domain, range, clamp ? continuous_deinterpolateClamp(deinterpolate) : deinterpolate, interpolate)))(+x);\\n  }\\n\\n  scale.invert = function(y) {\\n    return (input || (input = piecewise(range, domain, continuous_deinterpolateLinear, clamp ? continuous_reinterpolateClamp(reinterpolate) : reinterpolate)))(+y);\\n  };\\n\\n  scale.domain = function(_) {\\n    return arguments.length ? (domain = array_map.call(_, d3_scale_src_number), rescale()) : domain.slice();\\n  };\\n\\n  scale.range = function(_) {\\n    return arguments.length ? (range = d3_scale_src_array_slice.call(_), rescale()) : range.slice();\\n  };\\n\\n  scale.rangeRound = function(_) {\\n    return range = d3_scale_src_array_slice.call(_), interpolate = src_round, rescale();\\n  };\\n\\n  scale.clamp = function(_) {\\n    return arguments.length ? (clamp = !!_, rescale()) : clamp;\\n  };\\n\\n  scale.interpolate = function(_) {\\n    return arguments.length ? (interpolate = _, rescale()) : interpolate;\\n  };\\n\\n  return rescale();\\n}\\n\\n// CONCATENATED MODULE: ./node_modules/d3-scale/src/tickFormat.js\\n\\n\\n\\n/* harmony default export */ var src_tickFormat = (function(domain, count, specifier) {\\n  var start = domain[0],\\n      stop = domain[domain.length - 1],\\n      step = tickStep(start, stop, count == null ? 10 : count),\\n      precision;\\n  specifier = formatSpecifier_formatSpecifier(specifier == null ? \",f\" : specifier);\\n  switch (specifier.type) {\\n    case \"s\": {\\n      var value = Math.max(Math.abs(start), Math.abs(stop));\\n      if (specifier.precision == null && !isNaN(precision = precisionPrefix(step, value))) specifier.precision = precision;\\n      return defaultLocale_formatPrefix(specifier, value);\\n    }\\n    case \"\":\\n    case \"e\":\\n    case \"g\":\\n    case \"p\":\\n    case \"r\": {\\n      if (specifier.precision == null && !isNaN(precision = precisionRound(step, Math.max(Math.abs(start), Math.abs(stop))))) specifier.precision = precision - (specifier.type === \"e\");\\n      break;\\n    }\\n    case \"f\":\\n    case \"%\": {\\n      if (specifier.precision == null && !isNaN(precision = precisionFixed(step))) specifier.precision = precision - (specifier.type === \"%\") * 2;\\n      break;\\n    }\\n  }\\n  return defaultLocale_format(specifier);\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-scale/src/linear.js\\n\\n\\n\\n\\n\\nfunction linear_linearish(scale) {\\n  var domain = scale.domain;\\n\\n  scale.ticks = function(count) {\\n    var d = domain();\\n    return ticks(d[0], d[d.length - 1], count == null ? 10 : count);\\n  };\\n\\n  scale.tickFormat = function(count, specifier) {\\n    return src_tickFormat(domain(), count, specifier);\\n  };\\n\\n  scale.nice = function(count) {\\n    if (count == null) count = 10;\\n\\n    var d = domain(),\\n        i0 = 0,\\n        i1 = d.length - 1,\\n        start = d[i0],\\n        stop = d[i1],\\n        step;\\n\\n    if (stop < start) {\\n      step = start, start = stop, stop = step;\\n      step = i0, i0 = i1, i1 = step;\\n    }\\n\\n    step = tickIncrement(start, stop, count);\\n\\n    if (step > 0) {\\n      start = Math.floor(start / step) * step;\\n      stop = Math.ceil(stop / step) * step;\\n      step = tickIncrement(start, stop, count);\\n    } else if (step < 0) {\\n      start = Math.ceil(start * step) / step;\\n      stop = Math.floor(stop * step) / step;\\n      step = tickIncrement(start, stop, count);\\n    }\\n\\n    if (step > 0) {\\n      d[i0] = Math.floor(start / step) * step;\\n      d[i1] = Math.ceil(stop / step) * step;\\n      domain(d);\\n    } else if (step < 0) {\\n      d[i0] = Math.ceil(start * step) / step;\\n      d[i1] = Math.floor(stop * step) / step;\\n      domain(d);\\n    }\\n\\n    return scale;\\n  };\\n\\n  return scale;\\n}\\n\\nfunction src_linear_linear() {\\n  var scale = continuous_continuous(continuous_deinterpolateLinear, d3_interpolate_src_number);\\n\\n  scale.copy = function() {\\n    return continuous_copy(scale, src_linear_linear());\\n  };\\n\\n  return linear_linearish(scale);\\n}\\n\\n// CONCATENATED MODULE: ./node_modules/d3-scale/src/identity.js\\n\\n\\n\\n\\nfunction identity_identity() {\\n  var domain = [0, 1];\\n\\n  function scale(x) {\\n    return +x;\\n  }\\n\\n  scale.invert = scale;\\n\\n  scale.domain = scale.range = function(_) {\\n    return arguments.length ? (domain = array_map.call(_, d3_scale_src_number), scale) : domain.slice();\\n  };\\n\\n  scale.copy = function() {\\n    return identity_identity().domain(domain);\\n  };\\n\\n  return linear_linearish(scale);\\n}\\n\\n// CONCATENATED MODULE: ./node_modules/d3-scale/src/nice.js\\n/* harmony default export */ var nice = (function(domain, interval) {\\n  domain = domain.slice();\\n\\n  var i0 = 0,\\n      i1 = domain.length - 1,\\n      x0 = domain[i0],\\n      x1 = domain[i1],\\n      t;\\n\\n  if (x1 < x0) {\\n    t = i0, i0 = i1, i1 = t;\\n    t = x0, x0 = x1, x1 = t;\\n  }\\n\\n  domain[i0] = interval.floor(x0);\\n  domain[i1] = interval.ceil(x1);\\n  return domain;\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-scale/src/log.js\\n\\n\\n\\n\\n\\n\\nfunction log_deinterpolate(a, b) {\\n  return (b = Math.log(b / a))\\n      ? function(x) { return Math.log(x / a) / b; }\\n      : d3_scale_src_constant(b);\\n}\\n\\nfunction log_reinterpolate(a, b) {\\n  return a < 0\\n      ? function(t) { return -Math.pow(-b, t) * Math.pow(-a, 1 - t); }\\n      : function(t) { return Math.pow(b, t) * Math.pow(a, 1 - t); };\\n}\\n\\nfunction log_pow10(x) {\\n  return isFinite(x) ? +(\"1e\" + x) : x < 0 ? 0 : x;\\n}\\n\\nfunction log_powp(base) {\\n  return base === 10 ? log_pow10\\n      : base === Math.E ? Math.exp\\n      : function(x) { return Math.pow(base, x); };\\n}\\n\\nfunction log_logp(base) {\\n  return base === Math.E ? Math.log\\n      : base === 10 && Math.log10\\n      || base === 2 && Math.log2\\n      || (base = Math.log(base), function(x) { return Math.log(x) / base; });\\n}\\n\\nfunction log_reflect(f) {\\n  return function(x) {\\n    return -f(-x);\\n  };\\n}\\n\\nfunction log_log() {\\n  var scale = continuous_continuous(log_deinterpolate, log_reinterpolate).domain([1, 10]),\\n      domain = scale.domain,\\n      base = 10,\\n      logs = log_logp(10),\\n      pows = log_powp(10);\\n\\n  function rescale() {\\n    logs = log_logp(base), pows = log_powp(base);\\n    if (domain()[0] < 0) logs = log_reflect(logs), pows = log_reflect(pows);\\n    return scale;\\n  }\\n\\n  scale.base = function(_) {\\n    return arguments.length ? (base = +_, rescale()) : base;\\n  };\\n\\n  scale.domain = function(_) {\\n    return arguments.length ? (domain(_), rescale()) : domain();\\n  };\\n\\n  scale.ticks = function(count) {\\n    var d = domain(),\\n        u = d[0],\\n        v = d[d.length - 1],\\n        r;\\n\\n    if (r = v < u) i = u, u = v, v = i;\\n\\n    var i = logs(u),\\n        j = logs(v),\\n        p,\\n        k,\\n        t,\\n        n = count == null ? 10 : +count,\\n        z = [];\\n\\n    if (!(base % 1) && j - i < n) {\\n      i = Math.round(i) - 1, j = Math.round(j) + 1;\\n      if (u > 0) for (; i < j; ++i) {\\n        for (k = 1, p = pows(i); k < base; ++k) {\\n          t = p * k;\\n          if (t < u) continue;\\n          if (t > v) break;\\n          z.push(t);\\n        }\\n      } else for (; i < j; ++i) {\\n        for (k = base - 1, p = pows(i); k >= 1; --k) {\\n          t = p * k;\\n          if (t < u) continue;\\n          if (t > v) break;\\n          z.push(t);\\n        }\\n      }\\n    } else {\\n      z = ticks(i, j, Math.min(j - i, n)).map(pows);\\n    }\\n\\n    return r ? z.reverse() : z;\\n  };\\n\\n  scale.tickFormat = function(count, specifier) {\\n    if (specifier == null) specifier = base === 10 ? \".0e\" : \",\";\\n    if (typeof specifier !== \"function\") specifier = defaultLocale_format(specifier);\\n    if (count === Infinity) return specifier;\\n    if (count == null) count = 10;\\n    var k = Math.max(1, base * count / scale.ticks().length); // TODO fast estimate?\\n    return function(d) {\\n      var i = d / pows(Math.round(logs(d)));\\n      if (i * base < base - 0.5) i *= base;\\n      return i <= k ? specifier(d) : \"\";\\n    };\\n  };\\n\\n  scale.nice = function() {\\n    return domain(nice(domain(), {\\n      floor: function(x) { return pows(Math.floor(logs(x))); },\\n      ceil: function(x) { return pows(Math.ceil(logs(x))); }\\n    }));\\n  };\\n\\n  scale.copy = function() {\\n    return continuous_copy(scale, log_log().base(base));\\n  };\\n\\n  return scale;\\n}\\n\\n// CONCATENATED MODULE: ./node_modules/d3-scale/src/pow.js\\n\\n\\n\\n\\nfunction pow_raise(x, exponent) {\\n  return x < 0 ? -Math.pow(-x, exponent) : Math.pow(x, exponent);\\n}\\n\\nfunction pow_pow() {\\n  var exponent = 1,\\n      scale = continuous_continuous(deinterpolate, reinterpolate),\\n      domain = scale.domain;\\n\\n  function deinterpolate(a, b) {\\n    return (b = pow_raise(b, exponent) - (a = pow_raise(a, exponent)))\\n        ? function(x) { return (pow_raise(x, exponent) - a) / b; }\\n        : d3_scale_src_constant(b);\\n  }\\n\\n  function reinterpolate(a, b) {\\n    b = pow_raise(b, exponent) - (a = pow_raise(a, exponent));\\n    return function(t) { return pow_raise(a + b * t, 1 / exponent); };\\n  }\\n\\n  scale.exponent = function(_) {\\n    return arguments.length ? (exponent = +_, domain(domain())) : exponent;\\n  };\\n\\n  scale.copy = function() {\\n    return continuous_copy(scale, pow_pow().exponent(exponent));\\n  };\\n\\n  return linear_linearish(scale);\\n}\\n\\nfunction pow_sqrt() {\\n  return pow_pow().exponent(0.5);\\n}\\n\\n// CONCATENATED MODULE: ./node_modules/d3-scale/src/quantile.js\\n\\n\\n\\nfunction quantile_quantile() {\\n  var domain = [],\\n      range = [],\\n      thresholds = [];\\n\\n  function rescale() {\\n    var i = 0, n = Math.max(1, range.length);\\n    thresholds = new Array(n - 1);\\n    while (++i < n) thresholds[i - 1] = src_quantile(domain, i / n);\\n    return scale;\\n  }\\n\\n  function scale(x) {\\n    if (!isNaN(x = +x)) return range[bisect(thresholds, x)];\\n  }\\n\\n  scale.invertExtent = function(y) {\\n    var i = range.indexOf(y);\\n    return i < 0 ? [NaN, NaN] : [\\n      i > 0 ? thresholds[i - 1] : domain[0],\\n      i < thresholds.length ? thresholds[i] : domain[domain.length - 1]\\n    ];\\n  };\\n\\n  scale.domain = function(_) {\\n    if (!arguments.length) return domain.slice();\\n    domain = [];\\n    for (var i = 0, n = _.length, d; i < n; ++i) if (d = _[i], d != null && !isNaN(d = +d)) domain.push(d);\\n    domain.sort(src_ascending);\\n    return rescale();\\n  };\\n\\n  scale.range = function(_) {\\n    return arguments.length ? (range = d3_scale_src_array_slice.call(_), rescale()) : range.slice();\\n  };\\n\\n  scale.quantiles = function() {\\n    return thresholds.slice();\\n  };\\n\\n  scale.copy = function() {\\n    return quantile_quantile()\\n        .domain(domain)\\n        .range(range);\\n  };\\n\\n  return scale;\\n}\\n\\n// CONCATENATED MODULE: ./node_modules/d3-scale/src/quantize.js\\n\\n\\n\\n\\nfunction quantize_quantize() {\\n  var x0 = 0,\\n      x1 = 1,\\n      n = 1,\\n      domain = [0.5],\\n      range = [0, 1];\\n\\n  function scale(x) {\\n    if (x <= x) return range[bisect(domain, x, 0, n)];\\n  }\\n\\n  function rescale() {\\n    var i = -1;\\n    domain = new Array(n);\\n    while (++i < n) domain[i] = ((i + 1) * x1 - (i - n) * x0) / (n + 1);\\n    return scale;\\n  }\\n\\n  scale.domain = function(_) {\\n    return arguments.length ? (x0 = +_[0], x1 = +_[1], rescale()) : [x0, x1];\\n  };\\n\\n  scale.range = function(_) {\\n    return arguments.length ? (n = (range = d3_scale_src_array_slice.call(_)).length - 1, rescale()) : range.slice();\\n  };\\n\\n  scale.invertExtent = function(y) {\\n    var i = range.indexOf(y);\\n    return i < 0 ? [NaN, NaN]\\n        : i < 1 ? [x0, domain[0]]\\n        : i >= n ? [domain[n - 1], x1]\\n        : [domain[i - 1], domain[i]];\\n  };\\n\\n  scale.copy = function() {\\n    return quantize_quantize()\\n        .domain([x0, x1])\\n        .range(range);\\n  };\\n\\n  return linear_linearish(scale);\\n}\\n\\n// CONCATENATED MODULE: ./node_modules/d3-scale/src/threshold.js\\n\\n\\n\\nfunction threshold_threshold() {\\n  var domain = [0.5],\\n      range = [0, 1],\\n      n = 1;\\n\\n  function scale(x) {\\n    if (x <= x) return range[bisect(domain, x, 0, n)];\\n  }\\n\\n  scale.domain = function(_) {\\n    return arguments.length ? (domain = d3_scale_src_array_slice.call(_), n = Math.min(domain.length, range.length - 1), scale) : domain.slice();\\n  };\\n\\n  scale.range = function(_) {\\n    return arguments.length ? (range = d3_scale_src_array_slice.call(_), n = Math.min(domain.length, range.length - 1), scale) : range.slice();\\n  };\\n\\n  scale.invertExtent = function(y) {\\n    var i = range.indexOf(y);\\n    return [domain[i - 1], domain[i]];\\n  };\\n\\n  scale.copy = function() {\\n    return threshold_threshold()\\n        .domain(domain)\\n        .range(range);\\n  };\\n\\n  return scale;\\n}\\n\\n// CONCATENATED MODULE: ./node_modules/d3-time/src/interval.js\\nvar interval_t0 = new Date,\\n    interval_t1 = new Date;\\n\\nfunction newInterval(floori, offseti, count, field) {\\n\\n  function interval(date) {\\n    return floori(date = new Date(+date)), date;\\n  }\\n\\n  interval.floor = interval;\\n\\n  interval.ceil = function(date) {\\n    return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;\\n  };\\n\\n  interval.round = function(date) {\\n    var d0 = interval(date),\\n        d1 = interval.ceil(date);\\n    return date - d0 < d1 - date ? d0 : d1;\\n  };\\n\\n  interval.offset = function(date, step) {\\n    return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;\\n  };\\n\\n  interval.range = function(start, stop, step) {\\n    var range = [], previous;\\n    start = interval.ceil(start);\\n    step = step == null ? 1 : Math.floor(step);\\n    if (!(start < stop) || !(step > 0)) return range; // also handles Invalid Date\\n    do range.push(previous = new Date(+start)), offseti(start, step), floori(start);\\n    while (previous < start && start < stop);\\n    return range;\\n  };\\n\\n  interval.filter = function(test) {\\n    return newInterval(function(date) {\\n      if (date >= date) while (floori(date), !test(date)) date.setTime(date - 1);\\n    }, function(date, step) {\\n      if (date >= date) {\\n        if (step < 0) while (++step <= 0) {\\n          while (offseti(date, -1), !test(date)) {} // eslint-disable-line no-empty\\n        } else while (--step >= 0) {\\n          while (offseti(date, +1), !test(date)) {} // eslint-disable-line no-empty\\n        }\\n      }\\n    });\\n  };\\n\\n  if (count) {\\n    interval.count = function(start, end) {\\n      interval_t0.setTime(+start), interval_t1.setTime(+end);\\n      floori(interval_t0), floori(interval_t1);\\n      return Math.floor(count(interval_t0, interval_t1));\\n    };\\n\\n    interval.every = function(step) {\\n      step = Math.floor(step);\\n      return !isFinite(step) || !(step > 0) ? null\\n          : !(step > 1) ? interval\\n          : interval.filter(field\\n              ? function(d) { return field(d) % step === 0; }\\n              : function(d) { return interval.count(0, d) % step === 0; });\\n    };\\n  }\\n\\n  return interval;\\n}\\n\\n// CONCATENATED MODULE: ./node_modules/d3-time/src/millisecond.js\\n\\n\\nvar millisecond_millisecond = newInterval(function() {\\n  // noop\\n}, function(date, step) {\\n  date.setTime(+date + step);\\n}, function(start, end) {\\n  return end - start;\\n});\\n\\n// An optimized implementation for this simple case.\\nmillisecond_millisecond.every = function(k) {\\n  k = Math.floor(k);\\n  if (!isFinite(k) || !(k > 0)) return null;\\n  if (!(k > 1)) return millisecond_millisecond;\\n  return newInterval(function(date) {\\n    date.setTime(Math.floor(date / k) * k);\\n  }, function(date, step) {\\n    date.setTime(+date + step * k);\\n  }, function(start, end) {\\n    return (end - start) / k;\\n  });\\n};\\n\\n/* harmony default export */ var src_millisecond = (millisecond_millisecond);\\nvar millisecond_milliseconds = millisecond_millisecond.range;\\n\\n// CONCATENATED MODULE: ./node_modules/d3-time/src/duration.js\\nvar duration_durationSecond = 1e3;\\nvar duration_durationMinute = 6e4;\\nvar duration_durationHour = 36e5;\\nvar duration_durationDay = 864e5;\\nvar duration_durationWeek = 6048e5;\\n\\n// CONCATENATED MODULE: ./node_modules/d3-time/src/second.js\\n\\n\\n\\nvar second_second = newInterval(function(date) {\\n  date.setTime(Math.floor(date / duration_durationSecond) * duration_durationSecond);\\n}, function(date, step) {\\n  date.setTime(+date + step * duration_durationSecond);\\n}, function(start, end) {\\n  return (end - start) / duration_durationSecond;\\n}, function(date) {\\n  return date.getUTCSeconds();\\n});\\n\\n/* harmony default export */ var src_second = (second_second);\\nvar second_seconds = second_second.range;\\n\\n// CONCATENATED MODULE: ./node_modules/d3-time/src/minute.js\\n\\n\\n\\nvar minute_minute = newInterval(function(date) {\\n  date.setTime(Math.floor(date / duration_durationMinute) * duration_durationMinute);\\n}, function(date, step) {\\n  date.setTime(+date + step * duration_durationMinute);\\n}, function(start, end) {\\n  return (end - start) / duration_durationMinute;\\n}, function(date) {\\n  return date.getMinutes();\\n});\\n\\n/* harmony default export */ var src_minute = (minute_minute);\\nvar minute_minutes = minute_minute.range;\\n\\n// CONCATENATED MODULE: ./node_modules/d3-time/src/hour.js\\n\\n\\n\\nvar hour_hour = newInterval(function(date) {\\n  var offset = date.getTimezoneOffset() * duration_durationMinute % duration_durationHour;\\n  if (offset < 0) offset += duration_durationHour;\\n  date.setTime(Math.floor((+date - offset) / duration_durationHour) * duration_durationHour + offset);\\n}, function(date, step) {\\n  date.setTime(+date + step * duration_durationHour);\\n}, function(start, end) {\\n  return (end - start) / duration_durationHour;\\n}, function(date) {\\n  return date.getHours();\\n});\\n\\n/* harmony default export */ var src_hour = (hour_hour);\\nvar hour_hours = hour_hour.range;\\n\\n// CONCATENATED MODULE: ./node_modules/d3-time/src/day.js\\n\\n\\n\\nvar day_day = newInterval(function(date) {\\n  date.setHours(0, 0, 0, 0);\\n}, function(date, step) {\\n  date.setDate(date.getDate() + step);\\n}, function(start, end) {\\n  return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * duration_durationMinute) / duration_durationDay;\\n}, function(date) {\\n  return date.getDate() - 1;\\n});\\n\\n/* harmony default export */ var src_day = (day_day);\\nvar day_days = day_day.range;\\n\\n// CONCATENATED MODULE: ./node_modules/d3-time/src/week.js\\n\\n\\n\\nfunction week_weekday(i) {\\n  return newInterval(function(date) {\\n    date.setDate(date.getDate() - (date.getDay() + 7 - i) % 7);\\n    date.setHours(0, 0, 0, 0);\\n  }, function(date, step) {\\n    date.setDate(date.getDate() + step * 7);\\n  }, function(start, end) {\\n    return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * duration_durationMinute) / duration_durationWeek;\\n  });\\n}\\n\\nvar week_sunday = week_weekday(0);\\nvar week_monday = week_weekday(1);\\nvar week_tuesday = week_weekday(2);\\nvar week_wednesday = week_weekday(3);\\nvar week_thursday = week_weekday(4);\\nvar week_friday = week_weekday(5);\\nvar week_saturday = week_weekday(6);\\n\\nvar week_sundays = week_sunday.range;\\nvar week_mondays = week_monday.range;\\nvar week_tuesdays = week_tuesday.range;\\nvar week_wednesdays = week_wednesday.range;\\nvar week_thursdays = week_thursday.range;\\nvar week_fridays = week_friday.range;\\nvar week_saturdays = week_saturday.range;\\n\\n// CONCATENATED MODULE: ./node_modules/d3-time/src/month.js\\n\\n\\nvar month_month = newInterval(function(date) {\\n  date.setDate(1);\\n  date.setHours(0, 0, 0, 0);\\n}, function(date, step) {\\n  date.setMonth(date.getMonth() + step);\\n}, function(start, end) {\\n  return end.getMonth() - start.getMonth() + (end.getFullYear() - start.getFullYear()) * 12;\\n}, function(date) {\\n  return date.getMonth();\\n});\\n\\n/* harmony default export */ var src_month = (month_month);\\nvar month_months = month_month.range;\\n\\n// CONCATENATED MODULE: ./node_modules/d3-time/src/year.js\\n\\n\\nvar year_year = newInterval(function(date) {\\n  date.setMonth(0, 1);\\n  date.setHours(0, 0, 0, 0);\\n}, function(date, step) {\\n  date.setFullYear(date.getFullYear() + step);\\n}, function(start, end) {\\n  return end.getFullYear() - start.getFullYear();\\n}, function(date) {\\n  return date.getFullYear();\\n});\\n\\n// An optimized implementation for this simple case.\\nyear_year.every = function(k) {\\n  return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval(function(date) {\\n    date.setFullYear(Math.floor(date.getFullYear() / k) * k);\\n    date.setMonth(0, 1);\\n    date.setHours(0, 0, 0, 0);\\n  }, function(date, step) {\\n    date.setFullYear(date.getFullYear() + step * k);\\n  });\\n};\\n\\n/* harmony default export */ var src_year = (year_year);\\nvar year_years = year_year.range;\\n\\n// CONCATENATED MODULE: ./node_modules/d3-time/src/utcMinute.js\\n\\n\\n\\nvar utcMinute_utcMinute = newInterval(function(date) {\\n  date.setUTCSeconds(0, 0);\\n}, function(date, step) {\\n  date.setTime(+date + step * duration_durationMinute);\\n}, function(start, end) {\\n  return (end - start) / duration_durationMinute;\\n}, function(date) {\\n  return date.getUTCMinutes();\\n});\\n\\n/* harmony default export */ var src_utcMinute = (utcMinute_utcMinute);\\nvar utcMinute_utcMinutes = utcMinute_utcMinute.range;\\n\\n// CONCATENATED MODULE: ./node_modules/d3-time/src/utcHour.js\\n\\n\\n\\nvar utcHour_utcHour = newInterval(function(date) {\\n  date.setUTCMinutes(0, 0, 0);\\n}, function(date, step) {\\n  date.setTime(+date + step * duration_durationHour);\\n}, function(start, end) {\\n  return (end - start) / duration_durationHour;\\n}, function(date) {\\n  return date.getUTCHours();\\n});\\n\\n/* harmony default export */ var src_utcHour = (utcHour_utcHour);\\nvar utcHour_utcHours = utcHour_utcHour.range;\\n\\n// CONCATENATED MODULE: ./node_modules/d3-time/src/utcDay.js\\n\\n\\n\\nvar utcDay_utcDay = newInterval(function(date) {\\n  date.setUTCHours(0, 0, 0, 0);\\n}, function(date, step) {\\n  date.setUTCDate(date.getUTCDate() + step);\\n}, function(start, end) {\\n  return (end - start) / duration_durationDay;\\n}, function(date) {\\n  return date.getUTCDate() - 1;\\n});\\n\\n/* harmony default export */ var src_utcDay = (utcDay_utcDay);\\nvar utcDay_utcDays = utcDay_utcDay.range;\\n\\n// CONCATENATED MODULE: ./node_modules/d3-time/src/utcWeek.js\\n\\n\\n\\nfunction utcWeek_utcWeekday(i) {\\n  return newInterval(function(date) {\\n    date.setUTCDate(date.getUTCDate() - (date.getUTCDay() + 7 - i) % 7);\\n    date.setUTCHours(0, 0, 0, 0);\\n  }, function(date, step) {\\n    date.setUTCDate(date.getUTCDate() + step * 7);\\n  }, function(start, end) {\\n    return (end - start) / duration_durationWeek;\\n  });\\n}\\n\\nvar utcWeek_utcSunday = utcWeek_utcWeekday(0);\\nvar utcWeek_utcMonday = utcWeek_utcWeekday(1);\\nvar utcWeek_utcTuesday = utcWeek_utcWeekday(2);\\nvar utcWeek_utcWednesday = utcWeek_utcWeekday(3);\\nvar utcWeek_utcThursday = utcWeek_utcWeekday(4);\\nvar utcWeek_utcFriday = utcWeek_utcWeekday(5);\\nvar utcWeek_utcSaturday = utcWeek_utcWeekday(6);\\n\\nvar utcWeek_utcSundays = utcWeek_utcSunday.range;\\nvar utcWeek_utcMondays = utcWeek_utcMonday.range;\\nvar utcWeek_utcTuesdays = utcWeek_utcTuesday.range;\\nvar utcWeek_utcWednesdays = utcWeek_utcWednesday.range;\\nvar utcWeek_utcThursdays = utcWeek_utcThursday.range;\\nvar utcWeek_utcFridays = utcWeek_utcFriday.range;\\nvar utcWeek_utcSaturdays = utcWeek_utcSaturday.range;\\n\\n// CONCATENATED MODULE: ./node_modules/d3-time/src/utcMonth.js\\n\\n\\nvar utcMonth_utcMonth = newInterval(function(date) {\\n  date.setUTCDate(1);\\n  date.setUTCHours(0, 0, 0, 0);\\n}, function(date, step) {\\n  date.setUTCMonth(date.getUTCMonth() + step);\\n}, function(start, end) {\\n  return end.getUTCMonth() - start.getUTCMonth() + (end.getUTCFullYear() - start.getUTCFullYear()) * 12;\\n}, function(date) {\\n  return date.getUTCMonth();\\n});\\n\\n/* harmony default export */ var src_utcMonth = (utcMonth_utcMonth);\\nvar utcMonth_utcMonths = utcMonth_utcMonth.range;\\n\\n// CONCATENATED MODULE: ./node_modules/d3-time/src/utcYear.js\\n\\n\\nvar utcYear_utcYear = newInterval(function(date) {\\n  date.setUTCMonth(0, 1);\\n  date.setUTCHours(0, 0, 0, 0);\\n}, function(date, step) {\\n  date.setUTCFullYear(date.getUTCFullYear() + step);\\n}, function(start, end) {\\n  return end.getUTCFullYear() - start.getUTCFullYear();\\n}, function(date) {\\n  return date.getUTCFullYear();\\n});\\n\\n// An optimized implementation for this simple case.\\nutcYear_utcYear.every = function(k) {\\n  return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval(function(date) {\\n    date.setUTCFullYear(Math.floor(date.getUTCFullYear() / k) * k);\\n    date.setUTCMonth(0, 1);\\n    date.setUTCHours(0, 0, 0, 0);\\n  }, function(date, step) {\\n    date.setUTCFullYear(date.getUTCFullYear() + step * k);\\n  });\\n};\\n\\n/* harmony default export */ var src_utcYear = (utcYear_utcYear);\\nvar utcYear_utcYears = utcYear_utcYear.range;\\n\\n// CONCATENATED MODULE: ./node_modules/d3-time/index.js\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n// CONCATENATED MODULE: ./node_modules/d3-time-format/src/locale.js\\n\\n\\nfunction locale_localDate(d) {\\n  if (0 <= d.y && d.y < 100) {\\n    var date = new Date(-1, d.m, d.d, d.H, d.M, d.S, d.L);\\n    date.setFullYear(d.y);\\n    return date;\\n  }\\n  return new Date(d.y, d.m, d.d, d.H, d.M, d.S, d.L);\\n}\\n\\nfunction locale_utcDate(d) {\\n  if (0 <= d.y && d.y < 100) {\\n    var date = new Date(Date.UTC(-1, d.m, d.d, d.H, d.M, d.S, d.L));\\n    date.setUTCFullYear(d.y);\\n    return date;\\n  }\\n  return new Date(Date.UTC(d.y, d.m, d.d, d.H, d.M, d.S, d.L));\\n}\\n\\nfunction locale_newYear(y) {\\n  return {y: y, m: 0, d: 1, H: 0, M: 0, S: 0, L: 0};\\n}\\n\\nfunction locale_formatLocale(locale) {\\n  var locale_dateTime = locale.dateTime,\\n      locale_date = locale.date,\\n      locale_time = locale.time,\\n      locale_periods = locale.periods,\\n      locale_weekdays = locale.days,\\n      locale_shortWeekdays = locale.shortDays,\\n      locale_months = locale.months,\\n      locale_shortMonths = locale.shortMonths;\\n\\n  var periodRe = locale_formatRe(locale_periods),\\n      periodLookup = locale_formatLookup(locale_periods),\\n      weekdayRe = locale_formatRe(locale_weekdays),\\n      weekdayLookup = locale_formatLookup(locale_weekdays),\\n      shortWeekdayRe = locale_formatRe(locale_shortWeekdays),\\n      shortWeekdayLookup = locale_formatLookup(locale_shortWeekdays),\\n      monthRe = locale_formatRe(locale_months),\\n      monthLookup = locale_formatLookup(locale_months),\\n      shortMonthRe = locale_formatRe(locale_shortMonths),\\n      shortMonthLookup = locale_formatLookup(locale_shortMonths);\\n\\n  var formats = {\\n    \"a\": formatShortWeekday,\\n    \"A\": formatWeekday,\\n    \"b\": formatShortMonth,\\n    \"B\": formatMonth,\\n    \"c\": null,\\n    \"d\": locale_formatDayOfMonth,\\n    \"e\": locale_formatDayOfMonth,\\n    \"f\": locale_formatMicroseconds,\\n    \"H\": locale_formatHour24,\\n    \"I\": locale_formatHour12,\\n    \"j\": locale_formatDayOfYear,\\n    \"L\": locale_formatMilliseconds,\\n    \"m\": locale_formatMonthNumber,\\n    \"M\": locale_formatMinutes,\\n    \"p\": formatPeriod,\\n    \"Q\": locale_formatUnixTimestamp,\\n    \"s\": locale_formatUnixTimestampSeconds,\\n    \"S\": locale_formatSeconds,\\n    \"u\": locale_formatWeekdayNumberMonday,\\n    \"U\": locale_formatWeekNumberSunday,\\n    \"V\": locale_formatWeekNumberISO,\\n    \"w\": locale_formatWeekdayNumberSunday,\\n    \"W\": locale_formatWeekNumberMonday,\\n    \"x\": null,\\n    \"X\": null,\\n    \"y\": locale_formatYear,\\n    \"Y\": locale_formatFullYear,\\n    \"Z\": locale_formatZone,\\n    \"%\": locale_formatLiteralPercent\\n  };\\n\\n  var utcFormats = {\\n    \"a\": formatUTCShortWeekday,\\n    \"A\": formatUTCWeekday,\\n    \"b\": formatUTCShortMonth,\\n    \"B\": formatUTCMonth,\\n    \"c\": null,\\n    \"d\": locale_formatUTCDayOfMonth,\\n    \"e\": locale_formatUTCDayOfMonth,\\n    \"f\": locale_formatUTCMicroseconds,\\n    \"H\": locale_formatUTCHour24,\\n    \"I\": locale_formatUTCHour12,\\n    \"j\": locale_formatUTCDayOfYear,\\n    \"L\": locale_formatUTCMilliseconds,\\n    \"m\": locale_formatUTCMonthNumber,\\n    \"M\": locale_formatUTCMinutes,\\n    \"p\": formatUTCPeriod,\\n    \"Q\": locale_formatUnixTimestamp,\\n    \"s\": locale_formatUnixTimestampSeconds,\\n    \"S\": locale_formatUTCSeconds,\\n    \"u\": locale_formatUTCWeekdayNumberMonday,\\n    \"U\": locale_formatUTCWeekNumberSunday,\\n    \"V\": locale_formatUTCWeekNumberISO,\\n    \"w\": locale_formatUTCWeekdayNumberSunday,\\n    \"W\": locale_formatUTCWeekNumberMonday,\\n    \"x\": null,\\n    \"X\": null,\\n    \"y\": locale_formatUTCYear,\\n    \"Y\": locale_formatUTCFullYear,\\n    \"Z\": locale_formatUTCZone,\\n    \"%\": locale_formatLiteralPercent\\n  };\\n\\n  var parses = {\\n    \"a\": parseShortWeekday,\\n    \"A\": parseWeekday,\\n    \"b\": parseShortMonth,\\n    \"B\": parseMonth,\\n    \"c\": parseLocaleDateTime,\\n    \"d\": locale_parseDayOfMonth,\\n    \"e\": locale_parseDayOfMonth,\\n    \"f\": locale_parseMicroseconds,\\n    \"H\": locale_parseHour24,\\n    \"I\": locale_parseHour24,\\n    \"j\": locale_parseDayOfYear,\\n    \"L\": locale_parseMilliseconds,\\n    \"m\": locale_parseMonthNumber,\\n    \"M\": locale_parseMinutes,\\n    \"p\": parsePeriod,\\n    \"Q\": locale_parseUnixTimestamp,\\n    \"s\": locale_parseUnixTimestampSeconds,\\n    \"S\": locale_parseSeconds,\\n    \"u\": locale_parseWeekdayNumberMonday,\\n    \"U\": locale_parseWeekNumberSunday,\\n    \"V\": locale_parseWeekNumberISO,\\n    \"w\": locale_parseWeekdayNumberSunday,\\n    \"W\": locale_parseWeekNumberMonday,\\n    \"x\": parseLocaleDate,\\n    \"X\": parseLocaleTime,\\n    \"y\": locale_parseYear,\\n    \"Y\": locale_parseFullYear,\\n    \"Z\": locale_parseZone,\\n    \"%\": locale_parseLiteralPercent\\n  };\\n\\n  // These recursive directive definitions must be deferred.\\n  formats.x = newFormat(locale_date, formats);\\n  formats.X = newFormat(locale_time, formats);\\n  formats.c = newFormat(locale_dateTime, formats);\\n  utcFormats.x = newFormat(locale_date, utcFormats);\\n  utcFormats.X = newFormat(locale_time, utcFormats);\\n  utcFormats.c = newFormat(locale_dateTime, utcFormats);\\n\\n  function newFormat(specifier, formats) {\\n    return function(date) {\\n      var string = [],\\n          i = -1,\\n          j = 0,\\n          n = specifier.length,\\n          c,\\n          pad,\\n          format;\\n\\n      if (!(date instanceof Date)) date = new Date(+date);\\n\\n      while (++i < n) {\\n        if (specifier.charCodeAt(i) === 37) {\\n          string.push(specifier.slice(j, i));\\n          if ((pad = locale_pads[c = specifier.charAt(++i)]) != null) c = specifier.charAt(++i);\\n          else pad = c === \"e\" ? \" \" : \"0\";\\n          if (format = formats[c]) c = format(date, pad);\\n          string.push(c);\\n          j = i + 1;\\n        }\\n      }\\n\\n      string.push(specifier.slice(j, i));\\n      return string.join(\"\");\\n    };\\n  }\\n\\n  function newParse(specifier, newDate) {\\n    return function(string) {\\n      var d = locale_newYear(1900),\\n          i = parseSpecifier(d, specifier, string += \"\", 0),\\n          week, day;\\n      if (i != string.length) return null;\\n\\n      // If a UNIX timestamp is specified, return it.\\n      if (\"Q\" in d) return new Date(d.Q);\\n\\n      // The am-pm flag is 0 for AM, and 1 for PM.\\n      if (\"p\" in d) d.H = d.H % 12 + d.p * 12;\\n\\n      // Convert day-of-week and week-of-year to day-of-year.\\n      if (\"V\" in d) {\\n        if (d.V < 1 || d.V > 53) return null;\\n        if (!(\"w\" in d)) d.w = 1;\\n        if (\"Z\" in d) {\\n          week = locale_utcDate(locale_newYear(d.y)), day = week.getUTCDay();\\n          week = day > 4 || day === 0 ? utcWeek_utcMonday.ceil(week) : utcWeek_utcMonday(week);\\n          week = src_utcDay.offset(week, (d.V - 1) * 7);\\n          d.y = week.getUTCFullYear();\\n          d.m = week.getUTCMonth();\\n          d.d = week.getUTCDate() + (d.w + 6) % 7;\\n        } else {\\n          week = newDate(locale_newYear(d.y)), day = week.getDay();\\n          week = day > 4 || day === 0 ? week_monday.ceil(week) : week_monday(week);\\n          week = src_day.offset(week, (d.V - 1) * 7);\\n          d.y = week.getFullYear();\\n          d.m = week.getMonth();\\n          d.d = week.getDate() + (d.w + 6) % 7;\\n        }\\n      } else if (\"W\" in d || \"U\" in d) {\\n        if (!(\"w\" in d)) d.w = \"u\" in d ? d.u % 7 : \"W\" in d ? 1 : 0;\\n        day = \"Z\" in d ? locale_utcDate(locale_newYear(d.y)).getUTCDay() : newDate(locale_newYear(d.y)).getDay();\\n        d.m = 0;\\n        d.d = \"W\" in d ? (d.w + 6) % 7 + d.W * 7 - (day + 5) % 7 : d.w + d.U * 7 - (day + 6) % 7;\\n      }\\n\\n      // If a time zone is specified, all fields are interpreted as UTC and then\\n      // offset according to the specified time zone.\\n      if (\"Z\" in d) {\\n        d.H += d.Z / 100 | 0;\\n        d.M += d.Z % 100;\\n        return locale_utcDate(d);\\n      }\\n\\n      // Otherwise, all fields are in local time.\\n      return newDate(d);\\n    };\\n  }\\n\\n  function parseSpecifier(d, specifier, string, j) {\\n    var i = 0,\\n        n = specifier.length,\\n        m = string.length,\\n        c,\\n        parse;\\n\\n    while (i < n) {\\n      if (j >= m) return -1;\\n      c = specifier.charCodeAt(i++);\\n      if (c === 37) {\\n        c = specifier.charAt(i++);\\n        parse = parses[c in locale_pads ? specifier.charAt(i++) : c];\\n        if (!parse || ((j = parse(d, string, j)) < 0)) return -1;\\n      } else if (c != string.charCodeAt(j++)) {\\n        return -1;\\n      }\\n    }\\n\\n    return j;\\n  }\\n\\n  function parsePeriod(d, string, i) {\\n    var n = periodRe.exec(string.slice(i));\\n    return n ? (d.p = periodLookup[n[0].toLowerCase()], i + n[0].length) : -1;\\n  }\\n\\n  function parseShortWeekday(d, string, i) {\\n    var n = shortWeekdayRe.exec(string.slice(i));\\n    return n ? (d.w = shortWeekdayLookup[n[0].toLowerCase()], i + n[0].length) : -1;\\n  }\\n\\n  function parseWeekday(d, string, i) {\\n    var n = weekdayRe.exec(string.slice(i));\\n    return n ? (d.w = weekdayLookup[n[0].toLowerCase()], i + n[0].length) : -1;\\n  }\\n\\n  function parseShortMonth(d, string, i) {\\n    var n = shortMonthRe.exec(string.slice(i));\\n    return n ? (d.m = shortMonthLookup[n[0].toLowerCase()], i + n[0].length) : -1;\\n  }\\n\\n  function parseMonth(d, string, i) {\\n    var n = monthRe.exec(string.slice(i));\\n    return n ? (d.m = monthLookup[n[0].toLowerCase()], i + n[0].length) : -1;\\n  }\\n\\n  function parseLocaleDateTime(d, string, i) {\\n    return parseSpecifier(d, locale_dateTime, string, i);\\n  }\\n\\n  function parseLocaleDate(d, string, i) {\\n    return parseSpecifier(d, locale_date, string, i);\\n  }\\n\\n  function parseLocaleTime(d, string, i) {\\n    return parseSpecifier(d, locale_time, string, i);\\n  }\\n\\n  function formatShortWeekday(d) {\\n    return locale_shortWeekdays[d.getDay()];\\n  }\\n\\n  function formatWeekday(d) {\\n    return locale_weekdays[d.getDay()];\\n  }\\n\\n  function formatShortMonth(d) {\\n    return locale_shortMonths[d.getMonth()];\\n  }\\n\\n  function formatMonth(d) {\\n    return locale_months[d.getMonth()];\\n  }\\n\\n  function formatPeriod(d) {\\n    return locale_periods[+(d.getHours() >= 12)];\\n  }\\n\\n  function formatUTCShortWeekday(d) {\\n    return locale_shortWeekdays[d.getUTCDay()];\\n  }\\n\\n  function formatUTCWeekday(d) {\\n    return locale_weekdays[d.getUTCDay()];\\n  }\\n\\n  function formatUTCShortMonth(d) {\\n    return locale_shortMonths[d.getUTCMonth()];\\n  }\\n\\n  function formatUTCMonth(d) {\\n    return locale_months[d.getUTCMonth()];\\n  }\\n\\n  function formatUTCPeriod(d) {\\n    return locale_periods[+(d.getUTCHours() >= 12)];\\n  }\\n\\n  return {\\n    format: function(specifier) {\\n      var f = newFormat(specifier += \"\", formats);\\n      f.toString = function() { return specifier; };\\n      return f;\\n    },\\n    parse: function(specifier) {\\n      var p = newParse(specifier += \"\", locale_localDate);\\n      p.toString = function() { return specifier; };\\n      return p;\\n    },\\n    utcFormat: function(specifier) {\\n      var f = newFormat(specifier += \"\", utcFormats);\\n      f.toString = function() { return specifier; };\\n      return f;\\n    },\\n    utcParse: function(specifier) {\\n      var p = newParse(specifier, locale_utcDate);\\n      p.toString = function() { return specifier; };\\n      return p;\\n    }\\n  };\\n}\\n\\nvar locale_pads = {\"-\": \"\", \"_\": \" \", \"0\": \"0\"},\\n    locale_numberRe = /^\\\\s*\\\\d+/, // note: ignores next directive\\n    locale_percentRe = /^%/,\\n    locale_requoteRe = /[\\\\\\\\^$*+?|[\\\\]().{}]/g;\\n\\nfunction locale_pad(value, fill, width) {\\n  var sign = value < 0 ? \"-\" : \"\",\\n      string = (sign ? -value : value) + \"\",\\n      length = string.length;\\n  return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);\\n}\\n\\nfunction locale_requote(s) {\\n  return s.replace(locale_requoteRe, \"\\\\\\\\$&\");\\n}\\n\\nfunction locale_formatRe(names) {\\n  return new RegExp(\"^(?:\" + names.map(locale_requote).join(\"|\") + \")\", \"i\");\\n}\\n\\nfunction locale_formatLookup(names) {\\n  var map = {}, i = -1, n = names.length;\\n  while (++i < n) map[names[i].toLowerCase()] = i;\\n  return map;\\n}\\n\\nfunction locale_parseWeekdayNumberSunday(d, string, i) {\\n  var n = locale_numberRe.exec(string.slice(i, i + 1));\\n  return n ? (d.w = +n[0], i + n[0].length) : -1;\\n}\\n\\nfunction locale_parseWeekdayNumberMonday(d, string, i) {\\n  var n = locale_numberRe.exec(string.slice(i, i + 1));\\n  return n ? (d.u = +n[0], i + n[0].length) : -1;\\n}\\n\\nfunction locale_parseWeekNumberSunday(d, string, i) {\\n  var n = locale_numberRe.exec(string.slice(i, i + 2));\\n  return n ? (d.U = +n[0], i + n[0].length) : -1;\\n}\\n\\nfunction locale_parseWeekNumberISO(d, string, i) {\\n  var n = locale_numberRe.exec(string.slice(i, i + 2));\\n  return n ? (d.V = +n[0], i + n[0].length) : -1;\\n}\\n\\nfunction locale_parseWeekNumberMonday(d, string, i) {\\n  var n = locale_numberRe.exec(string.slice(i, i + 2));\\n  return n ? (d.W = +n[0], i + n[0].length) : -1;\\n}\\n\\nfunction locale_parseFullYear(d, string, i) {\\n  var n = locale_numberRe.exec(string.slice(i, i + 4));\\n  return n ? (d.y = +n[0], i + n[0].length) : -1;\\n}\\n\\nfunction locale_parseYear(d, string, i) {\\n  var n = locale_numberRe.exec(string.slice(i, i + 2));\\n  return n ? (d.y = +n[0] + (+n[0] > 68 ? 1900 : 2000), i + n[0].length) : -1;\\n}\\n\\nfunction locale_parseZone(d, string, i) {\\n  var n = /^(Z)|([+-]\\\\d\\\\d)(?::?(\\\\d\\\\d))?/.exec(string.slice(i, i + 6));\\n  return n ? (d.Z = n[1] ? 0 : -(n[2] + (n[3] || \"00\")), i + n[0].length) : -1;\\n}\\n\\nfunction locale_parseMonthNumber(d, string, i) {\\n  var n = locale_numberRe.exec(string.slice(i, i + 2));\\n  return n ? (d.m = n[0] - 1, i + n[0].length) : -1;\\n}\\n\\nfunction locale_parseDayOfMonth(d, string, i) {\\n  var n = locale_numberRe.exec(string.slice(i, i + 2));\\n  return n ? (d.d = +n[0], i + n[0].length) : -1;\\n}\\n\\nfunction locale_parseDayOfYear(d, string, i) {\\n  var n = locale_numberRe.exec(string.slice(i, i + 3));\\n  return n ? (d.m = 0, d.d = +n[0], i + n[0].length) : -1;\\n}\\n\\nfunction locale_parseHour24(d, string, i) {\\n  var n = locale_numberRe.exec(string.slice(i, i + 2));\\n  return n ? (d.H = +n[0], i + n[0].length) : -1;\\n}\\n\\nfunction locale_parseMinutes(d, string, i) {\\n  var n = locale_numberRe.exec(string.slice(i, i + 2));\\n  return n ? (d.M = +n[0], i + n[0].length) : -1;\\n}\\n\\nfunction locale_parseSeconds(d, string, i) {\\n  var n = locale_numberRe.exec(string.slice(i, i + 2));\\n  return n ? (d.S = +n[0], i + n[0].length) : -1;\\n}\\n\\nfunction locale_parseMilliseconds(d, string, i) {\\n  var n = locale_numberRe.exec(string.slice(i, i + 3));\\n  return n ? (d.L = +n[0], i + n[0].length) : -1;\\n}\\n\\nfunction locale_parseMicroseconds(d, string, i) {\\n  var n = locale_numberRe.exec(string.slice(i, i + 6));\\n  return n ? (d.L = Math.floor(n[0] / 1000), i + n[0].length) : -1;\\n}\\n\\nfunction locale_parseLiteralPercent(d, string, i) {\\n  var n = locale_percentRe.exec(string.slice(i, i + 1));\\n  return n ? i + n[0].length : -1;\\n}\\n\\nfunction locale_parseUnixTimestamp(d, string, i) {\\n  var n = locale_numberRe.exec(string.slice(i));\\n  return n ? (d.Q = +n[0], i + n[0].length) : -1;\\n}\\n\\nfunction locale_parseUnixTimestampSeconds(d, string, i) {\\n  var n = locale_numberRe.exec(string.slice(i));\\n  return n ? (d.Q = (+n[0]) * 1000, i + n[0].length) : -1;\\n}\\n\\nfunction locale_formatDayOfMonth(d, p) {\\n  return locale_pad(d.getDate(), p, 2);\\n}\\n\\nfunction locale_formatHour24(d, p) {\\n  return locale_pad(d.getHours(), p, 2);\\n}\\n\\nfunction locale_formatHour12(d, p) {\\n  return locale_pad(d.getHours() % 12 || 12, p, 2);\\n}\\n\\nfunction locale_formatDayOfYear(d, p) {\\n  return locale_pad(1 + src_day.count(src_year(d), d), p, 3);\\n}\\n\\nfunction locale_formatMilliseconds(d, p) {\\n  return locale_pad(d.getMilliseconds(), p, 3);\\n}\\n\\nfunction locale_formatMicroseconds(d, p) {\\n  return locale_formatMilliseconds(d, p) + \"000\";\\n}\\n\\nfunction locale_formatMonthNumber(d, p) {\\n  return locale_pad(d.getMonth() + 1, p, 2);\\n}\\n\\nfunction locale_formatMinutes(d, p) {\\n  return locale_pad(d.getMinutes(), p, 2);\\n}\\n\\nfunction locale_formatSeconds(d, p) {\\n  return locale_pad(d.getSeconds(), p, 2);\\n}\\n\\nfunction locale_formatWeekdayNumberMonday(d) {\\n  var day = d.getDay();\\n  return day === 0 ? 7 : day;\\n}\\n\\nfunction locale_formatWeekNumberSunday(d, p) {\\n  return locale_pad(week_sunday.count(src_year(d), d), p, 2);\\n}\\n\\nfunction locale_formatWeekNumberISO(d, p) {\\n  var day = d.getDay();\\n  d = (day >= 4 || day === 0) ? week_thursday(d) : week_thursday.ceil(d);\\n  return locale_pad(week_thursday.count(src_year(d), d) + (src_year(d).getDay() === 4), p, 2);\\n}\\n\\nfunction locale_formatWeekdayNumberSunday(d) {\\n  return d.getDay();\\n}\\n\\nfunction locale_formatWeekNumberMonday(d, p) {\\n  return locale_pad(week_monday.count(src_year(d), d), p, 2);\\n}\\n\\nfunction locale_formatYear(d, p) {\\n  return locale_pad(d.getFullYear() % 100, p, 2);\\n}\\n\\nfunction locale_formatFullYear(d, p) {\\n  return locale_pad(d.getFullYear() % 10000, p, 4);\\n}\\n\\nfunction locale_formatZone(d) {\\n  var z = d.getTimezoneOffset();\\n  return (z > 0 ? \"-\" : (z *= -1, \"+\"))\\n      + locale_pad(z / 60 | 0, \"0\", 2)\\n      + locale_pad(z % 60, \"0\", 2);\\n}\\n\\nfunction locale_formatUTCDayOfMonth(d, p) {\\n  return locale_pad(d.getUTCDate(), p, 2);\\n}\\n\\nfunction locale_formatUTCHour24(d, p) {\\n  return locale_pad(d.getUTCHours(), p, 2);\\n}\\n\\nfunction locale_formatUTCHour12(d, p) {\\n  return locale_pad(d.getUTCHours() % 12 || 12, p, 2);\\n}\\n\\nfunction locale_formatUTCDayOfYear(d, p) {\\n  return locale_pad(1 + src_utcDay.count(src_utcYear(d), d), p, 3);\\n}\\n\\nfunction locale_formatUTCMilliseconds(d, p) {\\n  return locale_pad(d.getUTCMilliseconds(), p, 3);\\n}\\n\\nfunction locale_formatUTCMicroseconds(d, p) {\\n  return locale_formatUTCMilliseconds(d, p) + \"000\";\\n}\\n\\nfunction locale_formatUTCMonthNumber(d, p) {\\n  return locale_pad(d.getUTCMonth() + 1, p, 2);\\n}\\n\\nfunction locale_formatUTCMinutes(d, p) {\\n  return locale_pad(d.getUTCMinutes(), p, 2);\\n}\\n\\nfunction locale_formatUTCSeconds(d, p) {\\n  return locale_pad(d.getUTCSeconds(), p, 2);\\n}\\n\\nfunction locale_formatUTCWeekdayNumberMonday(d) {\\n  var dow = d.getUTCDay();\\n  return dow === 0 ? 7 : dow;\\n}\\n\\nfunction locale_formatUTCWeekNumberSunday(d, p) {\\n  return locale_pad(utcWeek_utcSunday.count(src_utcYear(d), d), p, 2);\\n}\\n\\nfunction locale_formatUTCWeekNumberISO(d, p) {\\n  var day = d.getUTCDay();\\n  d = (day >= 4 || day === 0) ? utcWeek_utcThursday(d) : utcWeek_utcThursday.ceil(d);\\n  return locale_pad(utcWeek_utcThursday.count(src_utcYear(d), d) + (src_utcYear(d).getUTCDay() === 4), p, 2);\\n}\\n\\nfunction locale_formatUTCWeekdayNumberSunday(d) {\\n  return d.getUTCDay();\\n}\\n\\nfunction locale_formatUTCWeekNumberMonday(d, p) {\\n  return locale_pad(utcWeek_utcMonday.count(src_utcYear(d), d), p, 2);\\n}\\n\\nfunction locale_formatUTCYear(d, p) {\\n  return locale_pad(d.getUTCFullYear() % 100, p, 2);\\n}\\n\\nfunction locale_formatUTCFullYear(d, p) {\\n  return locale_pad(d.getUTCFullYear() % 10000, p, 4);\\n}\\n\\nfunction locale_formatUTCZone() {\\n  return \"+0000\";\\n}\\n\\nfunction locale_formatLiteralPercent() {\\n  return \"%\";\\n}\\n\\nfunction locale_formatUnixTimestamp(d) {\\n  return +d;\\n}\\n\\nfunction locale_formatUnixTimestampSeconds(d) {\\n  return Math.floor(+d / 1000);\\n}\\n\\n// CONCATENATED MODULE: ./node_modules/d3-time-format/src/defaultLocale.js\\n\\n\\nvar src_defaultLocale_locale;\\nvar defaultLocale_timeFormat;\\nvar defaultLocale_timeParse;\\nvar defaultLocale_utcFormat;\\nvar defaultLocale_utcParse;\\n\\nsrc_defaultLocale_defaultLocale({\\n  dateTime: \"%x, %X\",\\n  date: \"%-m/%-d/%Y\",\\n  time: \"%-I:%M:%S %p\",\\n  periods: [\"AM\", \"PM\"],\\n  days: [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"],\\n  shortDays: [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"],\\n  months: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"],\\n  shortMonths: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]\\n});\\n\\nfunction src_defaultLocale_defaultLocale(definition) {\\n  src_defaultLocale_locale = locale_formatLocale(definition);\\n  defaultLocale_timeFormat = src_defaultLocale_locale.format;\\n  defaultLocale_timeParse = src_defaultLocale_locale.parse;\\n  defaultLocale_utcFormat = src_defaultLocale_locale.utcFormat;\\n  defaultLocale_utcParse = src_defaultLocale_locale.utcParse;\\n  return src_defaultLocale_locale;\\n}\\n\\n// CONCATENATED MODULE: ./node_modules/d3-time-format/src/isoFormat.js\\n\\n\\nvar isoFormat_isoSpecifier = \"%Y-%m-%dT%H:%M:%S.%LZ\";\\n\\nfunction isoFormat_formatIsoNative(date) {\\n  return date.toISOString();\\n}\\n\\nvar isoFormat_formatIso = Date.prototype.toISOString\\n    ? isoFormat_formatIsoNative\\n    : defaultLocale_utcFormat(isoFormat_isoSpecifier);\\n\\n/* harmony default export */ var isoFormat = (isoFormat_formatIso);\\n\\n// CONCATENATED MODULE: ./node_modules/d3-time-format/src/isoParse.js\\n\\n\\n\\nfunction isoParse_parseIsoNative(string) {\\n  var date = new Date(string);\\n  return isNaN(date) ? null : date;\\n}\\n\\nvar isoParse_parseIso = +new Date(\"2000-01-01T00:00:00.000Z\")\\n    ? isoParse_parseIsoNative\\n    : defaultLocale_utcParse(isoFormat_isoSpecifier);\\n\\n/* harmony default export */ var isoParse = (isoParse_parseIso);\\n\\n// CONCATENATED MODULE: ./node_modules/d3-time-format/index.js\\n\\n\\n\\n\\n\\n// CONCATENATED MODULE: ./node_modules/d3-scale/src/time.js\\n\\n\\n\\n\\n\\n\\n\\n\\nvar time_durationSecond = 1000,\\n    time_durationMinute = time_durationSecond * 60,\\n    time_durationHour = time_durationMinute * 60,\\n    time_durationDay = time_durationHour * 24,\\n    time_durationWeek = time_durationDay * 7,\\n    time_durationMonth = time_durationDay * 30,\\n    time_durationYear = time_durationDay * 365;\\n\\nfunction time_date(t) {\\n  return new Date(t);\\n}\\n\\nfunction time_number(t) {\\n  return t instanceof Date ? +t : +new Date(+t);\\n}\\n\\nfunction time_calendar(year, month, week, day, hour, minute, second, millisecond, format) {\\n  var scale = continuous_continuous(continuous_deinterpolateLinear, d3_interpolate_src_number),\\n      invert = scale.invert,\\n      domain = scale.domain;\\n\\n  var formatMillisecond = format(\".%L\"),\\n      formatSecond = format(\":%S\"),\\n      formatMinute = format(\"%I:%M\"),\\n      formatHour = format(\"%I %p\"),\\n      formatDay = format(\"%a %d\"),\\n      formatWeek = format(\"%b %d\"),\\n      formatMonth = format(\"%B\"),\\n      formatYear = format(\"%Y\");\\n\\n  var tickIntervals = [\\n    [second,  1,      time_durationSecond],\\n    [second,  5,  5 * time_durationSecond],\\n    [second, 15, 15 * time_durationSecond],\\n    [second, 30, 30 * time_durationSecond],\\n    [minute,  1,      time_durationMinute],\\n    [minute,  5,  5 * time_durationMinute],\\n    [minute, 15, 15 * time_durationMinute],\\n    [minute, 30, 30 * time_durationMinute],\\n    [  hour,  1,      time_durationHour  ],\\n    [  hour,  3,  3 * time_durationHour  ],\\n    [  hour,  6,  6 * time_durationHour  ],\\n    [  hour, 12, 12 * time_durationHour  ],\\n    [   day,  1,      time_durationDay   ],\\n    [   day,  2,  2 * time_durationDay   ],\\n    [  week,  1,      time_durationWeek  ],\\n    [ month,  1,      time_durationMonth ],\\n    [ month,  3,  3 * time_durationMonth ],\\n    [  year,  1,      time_durationYear  ]\\n  ];\\n\\n  function tickFormat(date) {\\n    return (second(date) < date ? formatMillisecond\\n        : minute(date) < date ? formatSecond\\n        : hour(date) < date ? formatMinute\\n        : day(date) < date ? formatHour\\n        : month(date) < date ? (week(date) < date ? formatDay : formatWeek)\\n        : year(date) < date ? formatMonth\\n        : formatYear)(date);\\n  }\\n\\n  function tickInterval(interval, start, stop, step) {\\n    if (interval == null) interval = 10;\\n\\n    // If a desired tick count is specified, pick a reasonable tick interval\\n    // based on the extent of the domain and a rough estimate of tick size.\\n    // Otherwise, assume interval is already a time interval and use it.\\n    if (typeof interval === \"number\") {\\n      var target = Math.abs(stop - start) / interval,\\n          i = bisector(function(i) { return i[2]; }).right(tickIntervals, target);\\n      if (i === tickIntervals.length) {\\n        step = tickStep(start / time_durationYear, stop / time_durationYear, interval);\\n        interval = year;\\n      } else if (i) {\\n        i = tickIntervals[target / tickIntervals[i - 1][2] < tickIntervals[i][2] / target ? i - 1 : i];\\n        step = i[1];\\n        interval = i[0];\\n      } else {\\n        step = Math.max(tickStep(start, stop, interval), 1);\\n        interval = millisecond;\\n      }\\n    }\\n\\n    return step == null ? interval : interval.every(step);\\n  }\\n\\n  scale.invert = function(y) {\\n    return new Date(invert(y));\\n  };\\n\\n  scale.domain = function(_) {\\n    return arguments.length ? domain(array_map.call(_, time_number)) : domain().map(time_date);\\n  };\\n\\n  scale.ticks = function(interval, step) {\\n    var d = domain(),\\n        t0 = d[0],\\n        t1 = d[d.length - 1],\\n        r = t1 < t0,\\n        t;\\n    if (r) t = t0, t0 = t1, t1 = t;\\n    t = tickInterval(interval, t0, t1, step);\\n    t = t ? t.range(t0, t1 + 1) : []; // inclusive stop\\n    return r ? t.reverse() : t;\\n  };\\n\\n  scale.tickFormat = function(count, specifier) {\\n    return specifier == null ? tickFormat : format(specifier);\\n  };\\n\\n  scale.nice = function(interval, step) {\\n    var d = domain();\\n    return (interval = tickInterval(interval, d[0], d[d.length - 1], step))\\n        ? domain(nice(d, interval))\\n        : scale;\\n  };\\n\\n  scale.copy = function() {\\n    return continuous_copy(scale, time_calendar(year, month, week, day, hour, minute, second, millisecond, format));\\n  };\\n\\n  return scale;\\n}\\n\\n/* harmony default export */ var src_time = (function() {\\n  return time_calendar(src_year, src_month, week_sunday, src_day, src_hour, src_minute, src_second, src_millisecond, defaultLocale_timeFormat).domain([new Date(2000, 0, 1), new Date(2000, 0, 2)]);\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-scale/src/utcTime.js\\n\\n\\n\\n\\n/* harmony default export */ var utcTime = (function() {\\n  return time_calendar(src_utcYear, src_utcMonth, utcWeek_utcSunday, src_utcDay, src_utcHour, src_utcMinute, src_second, src_millisecond, defaultLocale_utcFormat).domain([Date.UTC(2000, 0, 1), Date.UTC(2000, 0, 2)]);\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-scale/src/colors.js\\n/* harmony default export */ var src_colors = (function(s) {\\n  return s.match(/.{6}/g).map(function(x) {\\n    return \"#\" + x;\\n  });\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-scale/src/category10.js\\n\\n\\n/* harmony default export */ var category10 = (src_colors(\"1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf\"));\\n\\n// CONCATENATED MODULE: ./node_modules/d3-scale/src/category20b.js\\n\\n\\n/* harmony default export */ var category20b = (src_colors(\"393b795254a36b6ecf9c9ede6379398ca252b5cf6bcedb9c8c6d31bd9e39e7ba52e7cb94843c39ad494ad6616be7969c7b4173a55194ce6dbdde9ed6\"));\\n\\n// CONCATENATED MODULE: ./node_modules/d3-scale/src/category20c.js\\n\\n\\n/* harmony default export */ var category20c = (src_colors(\"3182bd6baed69ecae1c6dbefe6550dfd8d3cfdae6bfdd0a231a35474c476a1d99bc7e9c0756bb19e9ac8bcbddcdadaeb636363969696bdbdbdd9d9d9\"));\\n\\n// CONCATENATED MODULE: ./node_modules/d3-scale/src/category20.js\\n\\n\\n/* harmony default export */ var category20 = (src_colors(\"1f77b4aec7e8ff7f0effbb782ca02c98df8ad62728ff98969467bdc5b0d58c564bc49c94e377c2f7b6d27f7f7fc7c7c7bcbd22dbdb8d17becf9edae5\"));\\n\\n// CONCATENATED MODULE: ./node_modules/d3-scale/src/cubehelix.js\\n\\n\\n\\n/* harmony default export */ var d3_scale_src_cubehelix = (cubehelix_cubehelixLong(cubehelix_cubehelix(300, 0.5, 0.0), cubehelix_cubehelix(-240, 0.5, 1.0)));\\n\\n// CONCATENATED MODULE: ./node_modules/d3-scale/src/rainbow.js\\n\\n\\n\\nvar rainbow_warm = cubehelix_cubehelixLong(cubehelix_cubehelix(-100, 0.75, 0.35), cubehelix_cubehelix(80, 1.50, 0.8));\\n\\nvar rainbow_cool = cubehelix_cubehelixLong(cubehelix_cubehelix(260, 0.75, 0.35), cubehelix_cubehelix(80, 1.50, 0.8));\\n\\nvar rainbow_rainbow = cubehelix_cubehelix();\\n\\n/* harmony default export */ var src_rainbow = (function(t) {\\n  if (t < 0 || t > 1) t -= Math.floor(t);\\n  var ts = Math.abs(t - 0.5);\\n  rainbow_rainbow.h = 360 * t - 100;\\n  rainbow_rainbow.s = 1.5 - 1.5 * ts;\\n  rainbow_rainbow.l = 0.8 - 0.9 * ts;\\n  return rainbow_rainbow + \"\";\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-scale/src/viridis.js\\n\\n\\nfunction viridis_ramp(range) {\\n  var n = range.length;\\n  return function(t) {\\n    return range[Math.max(0, Math.min(n - 1, Math.floor(t * n)))];\\n  };\\n}\\n\\n/* harmony default export */ var viridis = (viridis_ramp(src_colors(\"44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725\")));\\n\\nvar viridis_magma = viridis_ramp(src_colors(\"00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf\"));\\n\\nvar viridis_inferno = viridis_ramp(src_colors(\"00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4\"));\\n\\nvar viridis_plasma = viridis_ramp(src_colors(\"0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921\"));\\n\\n// CONCATENATED MODULE: ./node_modules/d3-scale/src/sequential.js\\n\\n\\nfunction sequential_sequential(interpolator) {\\n  var x0 = 0,\\n      x1 = 1,\\n      clamp = false;\\n\\n  function scale(x) {\\n    var t = (x - x0) / (x1 - x0);\\n    return interpolator(clamp ? Math.max(0, Math.min(1, t)) : t);\\n  }\\n\\n  scale.domain = function(_) {\\n    return arguments.length ? (x0 = +_[0], x1 = +_[1], scale) : [x0, x1];\\n  };\\n\\n  scale.clamp = function(_) {\\n    return arguments.length ? (clamp = !!_, scale) : clamp;\\n  };\\n\\n  scale.interpolator = function(_) {\\n    return arguments.length ? (interpolator = _, scale) : interpolator;\\n  };\\n\\n  scale.copy = function() {\\n    return sequential_sequential(interpolator).domain([x0, x1]).clamp(clamp);\\n  };\\n\\n  return linear_linearish(scale);\\n}\\n\\n// CONCATENATED MODULE: ./node_modules/d3-scale/index.js\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n// CONCATENATED MODULE: ./node_modules/d3-shape/src/constant.js\\n/* harmony default export */ var d3_shape_src_constant = (function(x) {\\n  return function constant() {\\n    return x;\\n  };\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-shape/src/math.js\\nvar math_abs = Math.abs;\\nvar math_atan2 = Math.atan2;\\nvar src_math_cos = Math.cos;\\nvar src_math_max = Math.max;\\nvar math_min = Math.min;\\nvar src_math_sin = Math.sin;\\nvar src_math_sqrt = Math.sqrt;\\n\\nvar src_math_epsilon = 1e-12;\\nvar d3_shape_src_math_pi = Math.PI;\\nvar d3_shape_src_math_halfPi = d3_shape_src_math_pi / 2;\\nvar d3_shape_src_math_tau = 2 * d3_shape_src_math_pi;\\n\\nfunction math_acos(x) {\\n  return x > 1 ? 0 : x < -1 ? d3_shape_src_math_pi : Math.acos(x);\\n}\\n\\nfunction math_asin(x) {\\n  return x >= 1 ? d3_shape_src_math_halfPi : x <= -1 ? -d3_shape_src_math_halfPi : Math.asin(x);\\n}\\n\\n// CONCATENATED MODULE: ./node_modules/d3-shape/src/arc.js\\n\\n\\n\\n\\nfunction arc_arcInnerRadius(d) {\\n  return d.innerRadius;\\n}\\n\\nfunction arc_arcOuterRadius(d) {\\n  return d.outerRadius;\\n}\\n\\nfunction arc_arcStartAngle(d) {\\n  return d.startAngle;\\n}\\n\\nfunction arc_arcEndAngle(d) {\\n  return d.endAngle;\\n}\\n\\nfunction arc_arcPadAngle(d) {\\n  return d && d.padAngle; // Note: optional!\\n}\\n\\nfunction arc_intersect(x0, y0, x1, y1, x2, y2, x3, y3) {\\n  var x10 = x1 - x0, y10 = y1 - y0,\\n      x32 = x3 - x2, y32 = y3 - y2,\\n      t = (x32 * (y0 - y2) - y32 * (x0 - x2)) / (y32 * x10 - x32 * y10);\\n  return [x0 + t * x10, y0 + t * y10];\\n}\\n\\n// Compute perpendicular offset line of length rc.\\n// http://mathworld.wolfram.com/Circle-LineIntersection.html\\nfunction arc_cornerTangents(x0, y0, x1, y1, r1, rc, cw) {\\n  var x01 = x0 - x1,\\n      y01 = y0 - y1,\\n      lo = (cw ? rc : -rc) / src_math_sqrt(x01 * x01 + y01 * y01),\\n      ox = lo * y01,\\n      oy = -lo * x01,\\n      x11 = x0 + ox,\\n      y11 = y0 + oy,\\n      x10 = x1 + ox,\\n      y10 = y1 + oy,\\n      x00 = (x11 + x10) / 2,\\n      y00 = (y11 + y10) / 2,\\n      dx = x10 - x11,\\n      dy = y10 - y11,\\n      d2 = dx * dx + dy * dy,\\n      r = r1 - rc,\\n      D = x11 * y10 - x10 * y11,\\n      d = (dy < 0 ? -1 : 1) * src_math_sqrt(src_math_max(0, r * r * d2 - D * D)),\\n      cx0 = (D * dy - dx * d) / d2,\\n      cy0 = (-D * dx - dy * d) / d2,\\n      cx1 = (D * dy + dx * d) / d2,\\n      cy1 = (-D * dx + dy * d) / d2,\\n      dx0 = cx0 - x00,\\n      dy0 = cy0 - y00,\\n      dx1 = cx1 - x00,\\n      dy1 = cy1 - y00;\\n\\n  // Pick the closer of the two intersection points.\\n  // TODO Is there a faster way to determine which intersection to use?\\n  if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) cx0 = cx1, cy0 = cy1;\\n\\n  return {\\n    cx: cx0,\\n    cy: cy0,\\n    x01: -ox,\\n    y01: -oy,\\n    x11: cx0 * (r1 / r - 1),\\n    y11: cy0 * (r1 / r - 1)\\n  };\\n}\\n\\n/* harmony default export */ var src_arc = (function() {\\n  var innerRadius = arc_arcInnerRadius,\\n      outerRadius = arc_arcOuterRadius,\\n      cornerRadius = d3_shape_src_constant(0),\\n      padRadius = null,\\n      startAngle = arc_arcStartAngle,\\n      endAngle = arc_arcEndAngle,\\n      padAngle = arc_arcPadAngle,\\n      context = null;\\n\\n  function arc() {\\n    var buffer,\\n        r,\\n        r0 = +innerRadius.apply(this, arguments),\\n        r1 = +outerRadius.apply(this, arguments),\\n        a0 = startAngle.apply(this, arguments) - d3_shape_src_math_halfPi,\\n        a1 = endAngle.apply(this, arguments) - d3_shape_src_math_halfPi,\\n        da = math_abs(a1 - a0),\\n        cw = a1 > a0;\\n\\n    if (!context) context = buffer = src_path();\\n\\n    // Ensure that the outer radius is always larger than the inner radius.\\n    if (r1 < r0) r = r1, r1 = r0, r0 = r;\\n\\n    // Is it a point?\\n    if (!(r1 > src_math_epsilon)) context.moveTo(0, 0);\\n\\n    // Or is it a circle or annulus?\\n    else if (da > d3_shape_src_math_tau - src_math_epsilon) {\\n      context.moveTo(r1 * src_math_cos(a0), r1 * src_math_sin(a0));\\n      context.arc(0, 0, r1, a0, a1, !cw);\\n      if (r0 > src_math_epsilon) {\\n        context.moveTo(r0 * src_math_cos(a1), r0 * src_math_sin(a1));\\n        context.arc(0, 0, r0, a1, a0, cw);\\n      }\\n    }\\n\\n    // Or is it a circular or annular sector?\\n    else {\\n      var a01 = a0,\\n          a11 = a1,\\n          a00 = a0,\\n          a10 = a1,\\n          da0 = da,\\n          da1 = da,\\n          ap = padAngle.apply(this, arguments) / 2,\\n          rp = (ap > src_math_epsilon) && (padRadius ? +padRadius.apply(this, arguments) : src_math_sqrt(r0 * r0 + r1 * r1)),\\n          rc = math_min(math_abs(r1 - r0) / 2, +cornerRadius.apply(this, arguments)),\\n          rc0 = rc,\\n          rc1 = rc,\\n          t0,\\n          t1;\\n\\n      // Apply padding? Note that since r1 ≥ r0, da1 ≥ da0.\\n      if (rp > src_math_epsilon) {\\n        var p0 = math_asin(rp / r0 * src_math_sin(ap)),\\n            p1 = math_asin(rp / r1 * src_math_sin(ap));\\n        if ((da0 -= p0 * 2) > src_math_epsilon) p0 *= (cw ? 1 : -1), a00 += p0, a10 -= p0;\\n        else da0 = 0, a00 = a10 = (a0 + a1) / 2;\\n        if ((da1 -= p1 * 2) > src_math_epsilon) p1 *= (cw ? 1 : -1), a01 += p1, a11 -= p1;\\n        else da1 = 0, a01 = a11 = (a0 + a1) / 2;\\n      }\\n\\n      var x01 = r1 * src_math_cos(a01),\\n          y01 = r1 * src_math_sin(a01),\\n          x10 = r0 * src_math_cos(a10),\\n          y10 = r0 * src_math_sin(a10);\\n\\n      // Apply rounded corners?\\n      if (rc > src_math_epsilon) {\\n        var x11 = r1 * src_math_cos(a11),\\n            y11 = r1 * src_math_sin(a11),\\n            x00 = r0 * src_math_cos(a00),\\n            y00 = r0 * src_math_sin(a00);\\n\\n        // Restrict the corner radius according to the sector angle.\\n        if (da < d3_shape_src_math_pi) {\\n          var oc = da0 > src_math_epsilon ? arc_intersect(x01, y01, x00, y00, x11, y11, x10, y10) : [x10, y10],\\n              ax = x01 - oc[0],\\n              ay = y01 - oc[1],\\n              bx = x11 - oc[0],\\n              by = y11 - oc[1],\\n              kc = 1 / src_math_sin(math_acos((ax * bx + ay * by) / (src_math_sqrt(ax * ax + ay * ay) * src_math_sqrt(bx * bx + by * by))) / 2),\\n              lc = src_math_sqrt(oc[0] * oc[0] + oc[1] * oc[1]);\\n          rc0 = math_min(rc, (r0 - lc) / (kc - 1));\\n          rc1 = math_min(rc, (r1 - lc) / (kc + 1));\\n        }\\n      }\\n\\n      // Is the sector collapsed to a line?\\n      if (!(da1 > src_math_epsilon)) context.moveTo(x01, y01);\\n\\n      // Does the sector’s outer ring have rounded corners?\\n      else if (rc1 > src_math_epsilon) {\\n        t0 = arc_cornerTangents(x00, y00, x01, y01, r1, rc1, cw);\\n        t1 = arc_cornerTangents(x11, y11, x10, y10, r1, rc1, cw);\\n\\n        context.moveTo(t0.cx + t0.x01, t0.cy + t0.y01);\\n\\n        // Have the corners merged?\\n        if (rc1 < rc) context.arc(t0.cx, t0.cy, rc1, math_atan2(t0.y01, t0.x01), math_atan2(t1.y01, t1.x01), !cw);\\n\\n        // Otherwise, draw the two corners and the ring.\\n        else {\\n          context.arc(t0.cx, t0.cy, rc1, math_atan2(t0.y01, t0.x01), math_atan2(t0.y11, t0.x11), !cw);\\n          context.arc(0, 0, r1, math_atan2(t0.cy + t0.y11, t0.cx + t0.x11), math_atan2(t1.cy + t1.y11, t1.cx + t1.x11), !cw);\\n          context.arc(t1.cx, t1.cy, rc1, math_atan2(t1.y11, t1.x11), math_atan2(t1.y01, t1.x01), !cw);\\n        }\\n      }\\n\\n      // Or is the outer ring just a circular arc?\\n      else context.moveTo(x01, y01), context.arc(0, 0, r1, a01, a11, !cw);\\n\\n      // Is there no inner ring, and it’s a circular sector?\\n      // Or perhaps it’s an annular sector collapsed due to padding?\\n      if (!(r0 > src_math_epsilon) || !(da0 > src_math_epsilon)) context.lineTo(x10, y10);\\n\\n      // Does the sector’s inner ring (or point) have rounded corners?\\n      else if (rc0 > src_math_epsilon) {\\n        t0 = arc_cornerTangents(x10, y10, x11, y11, r0, -rc0, cw);\\n        t1 = arc_cornerTangents(x01, y01, x00, y00, r0, -rc0, cw);\\n\\n        context.lineTo(t0.cx + t0.x01, t0.cy + t0.y01);\\n\\n        // Have the corners merged?\\n        if (rc0 < rc) context.arc(t0.cx, t0.cy, rc0, math_atan2(t0.y01, t0.x01), math_atan2(t1.y01, t1.x01), !cw);\\n\\n        // Otherwise, draw the two corners and the ring.\\n        else {\\n          context.arc(t0.cx, t0.cy, rc0, math_atan2(t0.y01, t0.x01), math_atan2(t0.y11, t0.x11), !cw);\\n          context.arc(0, 0, r0, math_atan2(t0.cy + t0.y11, t0.cx + t0.x11), math_atan2(t1.cy + t1.y11, t1.cx + t1.x11), cw);\\n          context.arc(t1.cx, t1.cy, rc0, math_atan2(t1.y11, t1.x11), math_atan2(t1.y01, t1.x01), !cw);\\n        }\\n      }\\n\\n      // Or is the inner ring just a circular arc?\\n      else context.arc(0, 0, r0, a10, a00, cw);\\n    }\\n\\n    context.closePath();\\n\\n    if (buffer) return context = null, buffer + \"\" || null;\\n  }\\n\\n  arc.centroid = function() {\\n    var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2,\\n        a = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - d3_shape_src_math_pi / 2;\\n    return [src_math_cos(a) * r, src_math_sin(a) * r];\\n  };\\n\\n  arc.innerRadius = function(_) {\\n    return arguments.length ? (innerRadius = typeof _ === \"function\" ? _ : d3_shape_src_constant(+_), arc) : innerRadius;\\n  };\\n\\n  arc.outerRadius = function(_) {\\n    return arguments.length ? (outerRadius = typeof _ === \"function\" ? _ : d3_shape_src_constant(+_), arc) : outerRadius;\\n  };\\n\\n  arc.cornerRadius = function(_) {\\n    return arguments.length ? (cornerRadius = typeof _ === \"function\" ? _ : d3_shape_src_constant(+_), arc) : cornerRadius;\\n  };\\n\\n  arc.padRadius = function(_) {\\n    return arguments.length ? (padRadius = _ == null ? null : typeof _ === \"function\" ? _ : d3_shape_src_constant(+_), arc) : padRadius;\\n  };\\n\\n  arc.startAngle = function(_) {\\n    return arguments.length ? (startAngle = typeof _ === \"function\" ? _ : d3_shape_src_constant(+_), arc) : startAngle;\\n  };\\n\\n  arc.endAngle = function(_) {\\n    return arguments.length ? (endAngle = typeof _ === \"function\" ? _ : d3_shape_src_constant(+_), arc) : endAngle;\\n  };\\n\\n  arc.padAngle = function(_) {\\n    return arguments.length ? (padAngle = typeof _ === \"function\" ? _ : d3_shape_src_constant(+_), arc) : padAngle;\\n  };\\n\\n  arc.context = function(_) {\\n    return arguments.length ? ((context = _ == null ? null : _), arc) : context;\\n  };\\n\\n  return arc;\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-shape/src/curve/linear.js\\nfunction Linear(context) {\\n  this._context = context;\\n}\\n\\nLinear.prototype = {\\n  areaStart: function() {\\n    this._line = 0;\\n  },\\n  areaEnd: function() {\\n    this._line = NaN;\\n  },\\n  lineStart: function() {\\n    this._point = 0;\\n  },\\n  lineEnd: function() {\\n    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();\\n    this._line = 1 - this._line;\\n  },\\n  point: function(x, y) {\\n    x = +x, y = +y;\\n    switch (this._point) {\\n      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;\\n      case 1: this._point = 2; // proceed\\n      default: this._context.lineTo(x, y); break;\\n    }\\n  }\\n};\\n\\n/* harmony default export */ var curve_linear = (function(context) {\\n  return new Linear(context);\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-shape/src/point.js\\nfunction point_x(p) {\\n  return p[0];\\n}\\n\\nfunction point_y(p) {\\n  return p[1];\\n}\\n\\n// CONCATENATED MODULE: ./node_modules/d3-shape/src/line.js\\n\\n\\n\\n\\n\\n/* harmony default export */ var src_line = (function() {\\n  var x = point_x,\\n      y = point_y,\\n      defined = d3_shape_src_constant(true),\\n      context = null,\\n      curve = curve_linear,\\n      output = null;\\n\\n  function line(data) {\\n    var i,\\n        n = data.length,\\n        d,\\n        defined0 = false,\\n        buffer;\\n\\n    if (context == null) output = curve(buffer = src_path());\\n\\n    for (i = 0; i <= n; ++i) {\\n      if (!(i < n && defined(d = data[i], i, data)) === defined0) {\\n        if (defined0 = !defined0) output.lineStart();\\n        else output.lineEnd();\\n      }\\n      if (defined0) output.point(+x(d, i, data), +y(d, i, data));\\n    }\\n\\n    if (buffer) return output = null, buffer + \"\" || null;\\n  }\\n\\n  line.x = function(_) {\\n    return arguments.length ? (x = typeof _ === \"function\" ? _ : d3_shape_src_constant(+_), line) : x;\\n  };\\n\\n  line.y = function(_) {\\n    return arguments.length ? (y = typeof _ === \"function\" ? _ : d3_shape_src_constant(+_), line) : y;\\n  };\\n\\n  line.defined = function(_) {\\n    return arguments.length ? (defined = typeof _ === \"function\" ? _ : d3_shape_src_constant(!!_), line) : defined;\\n  };\\n\\n  line.curve = function(_) {\\n    return arguments.length ? (curve = _, context != null && (output = curve(context)), line) : curve;\\n  };\\n\\n  line.context = function(_) {\\n    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), line) : context;\\n  };\\n\\n  return line;\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-shape/src/area.js\\n\\n\\n\\n\\n\\n\\n/* harmony default export */ var d3_shape_src_area = (function() {\\n  var x0 = point_x,\\n      x1 = null,\\n      y0 = d3_shape_src_constant(0),\\n      y1 = point_y,\\n      defined = d3_shape_src_constant(true),\\n      context = null,\\n      curve = curve_linear,\\n      output = null;\\n\\n  function area(data) {\\n    var i,\\n        j,\\n        k,\\n        n = data.length,\\n        d,\\n        defined0 = false,\\n        buffer,\\n        x0z = new Array(n),\\n        y0z = new Array(n);\\n\\n    if (context == null) output = curve(buffer = src_path());\\n\\n    for (i = 0; i <= n; ++i) {\\n      if (!(i < n && defined(d = data[i], i, data)) === defined0) {\\n        if (defined0 = !defined0) {\\n          j = i;\\n          output.areaStart();\\n          output.lineStart();\\n        } else {\\n          output.lineEnd();\\n          output.lineStart();\\n          for (k = i - 1; k >= j; --k) {\\n            output.point(x0z[k], y0z[k]);\\n          }\\n          output.lineEnd();\\n          output.areaEnd();\\n        }\\n      }\\n      if (defined0) {\\n        x0z[i] = +x0(d, i, data), y0z[i] = +y0(d, i, data);\\n        output.point(x1 ? +x1(d, i, data) : x0z[i], y1 ? +y1(d, i, data) : y0z[i]);\\n      }\\n    }\\n\\n    if (buffer) return output = null, buffer + \"\" || null;\\n  }\\n\\n  function arealine() {\\n    return src_line().defined(defined).curve(curve).context(context);\\n  }\\n\\n  area.x = function(_) {\\n    return arguments.length ? (x0 = typeof _ === \"function\" ? _ : d3_shape_src_constant(+_), x1 = null, area) : x0;\\n  };\\n\\n  area.x0 = function(_) {\\n    return arguments.length ? (x0 = typeof _ === \"function\" ? _ : d3_shape_src_constant(+_), area) : x0;\\n  };\\n\\n  area.x1 = function(_) {\\n    return arguments.length ? (x1 = _ == null ? null : typeof _ === \"function\" ? _ : d3_shape_src_constant(+_), area) : x1;\\n  };\\n\\n  area.y = function(_) {\\n    return arguments.length ? (y0 = typeof _ === \"function\" ? _ : d3_shape_src_constant(+_), y1 = null, area) : y0;\\n  };\\n\\n  area.y0 = function(_) {\\n    return arguments.length ? (y0 = typeof _ === \"function\" ? _ : d3_shape_src_constant(+_), area) : y0;\\n  };\\n\\n  area.y1 = function(_) {\\n    return arguments.length ? (y1 = _ == null ? null : typeof _ === \"function\" ? _ : d3_shape_src_constant(+_), area) : y1;\\n  };\\n\\n  area.lineX0 =\\n  area.lineY0 = function() {\\n    return arealine().x(x0).y(y0);\\n  };\\n\\n  area.lineY1 = function() {\\n    return arealine().x(x0).y(y1);\\n  };\\n\\n  area.lineX1 = function() {\\n    return arealine().x(x1).y(y0);\\n  };\\n\\n  area.defined = function(_) {\\n    return arguments.length ? (defined = typeof _ === \"function\" ? _ : d3_shape_src_constant(!!_), area) : defined;\\n  };\\n\\n  area.curve = function(_) {\\n    return arguments.length ? (curve = _, context != null && (output = curve(context)), area) : curve;\\n  };\\n\\n  area.context = function(_) {\\n    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), area) : context;\\n  };\\n\\n  return area;\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-shape/src/descending.js\\n/* harmony default export */ var src_descending = (function(a, b) {\\n  return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-shape/src/identity.js\\n/* harmony default export */ var d3_shape_src_identity = (function(d) {\\n  return d;\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-shape/src/pie.js\\n\\n\\n\\n\\n\\n/* harmony default export */ var src_pie = (function() {\\n  var value = d3_shape_src_identity,\\n      sortValues = src_descending,\\n      sort = null,\\n      startAngle = d3_shape_src_constant(0),\\n      endAngle = d3_shape_src_constant(d3_shape_src_math_tau),\\n      padAngle = d3_shape_src_constant(0);\\n\\n  function pie(data) {\\n    var i,\\n        n = data.length,\\n        j,\\n        k,\\n        sum = 0,\\n        index = new Array(n),\\n        arcs = new Array(n),\\n        a0 = +startAngle.apply(this, arguments),\\n        da = Math.min(d3_shape_src_math_tau, Math.max(-d3_shape_src_math_tau, endAngle.apply(this, arguments) - a0)),\\n        a1,\\n        p = Math.min(Math.abs(da) / n, padAngle.apply(this, arguments)),\\n        pa = p * (da < 0 ? -1 : 1),\\n        v;\\n\\n    for (i = 0; i < n; ++i) {\\n      if ((v = arcs[index[i] = i] = +value(data[i], i, data)) > 0) {\\n        sum += v;\\n      }\\n    }\\n\\n    // Optionally sort the arcs by previously-computed values or by data.\\n    if (sortValues != null) index.sort(function(i, j) { return sortValues(arcs[i], arcs[j]); });\\n    else if (sort != null) index.sort(function(i, j) { return sort(data[i], data[j]); });\\n\\n    // Compute the arcs! They are stored in the original data\\'s order.\\n    for (i = 0, k = sum ? (da - n * pa) / sum : 0; i < n; ++i, a0 = a1) {\\n      j = index[i], v = arcs[j], a1 = a0 + (v > 0 ? v * k : 0) + pa, arcs[j] = {\\n        data: data[j],\\n        index: i,\\n        value: v,\\n        startAngle: a0,\\n        endAngle: a1,\\n        padAngle: p\\n      };\\n    }\\n\\n    return arcs;\\n  }\\n\\n  pie.value = function(_) {\\n    return arguments.length ? (value = typeof _ === \"function\" ? _ : d3_shape_src_constant(+_), pie) : value;\\n  };\\n\\n  pie.sortValues = function(_) {\\n    return arguments.length ? (sortValues = _, sort = null, pie) : sortValues;\\n  };\\n\\n  pie.sort = function(_) {\\n    return arguments.length ? (sort = _, sortValues = null, pie) : sort;\\n  };\\n\\n  pie.startAngle = function(_) {\\n    return arguments.length ? (startAngle = typeof _ === \"function\" ? _ : d3_shape_src_constant(+_), pie) : startAngle;\\n  };\\n\\n  pie.endAngle = function(_) {\\n    return arguments.length ? (endAngle = typeof _ === \"function\" ? _ : d3_shape_src_constant(+_), pie) : endAngle;\\n  };\\n\\n  pie.padAngle = function(_) {\\n    return arguments.length ? (padAngle = typeof _ === \"function\" ? _ : d3_shape_src_constant(+_), pie) : padAngle;\\n  };\\n\\n  return pie;\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-shape/src/curve/radial.js\\n\\n\\nvar radial_curveRadialLinear = radial_curveRadial(curve_linear);\\n\\nfunction radial_Radial(curve) {\\n  this._curve = curve;\\n}\\n\\nradial_Radial.prototype = {\\n  areaStart: function() {\\n    this._curve.areaStart();\\n  },\\n  areaEnd: function() {\\n    this._curve.areaEnd();\\n  },\\n  lineStart: function() {\\n    this._curve.lineStart();\\n  },\\n  lineEnd: function() {\\n    this._curve.lineEnd();\\n  },\\n  point: function(a, r) {\\n    this._curve.point(r * Math.sin(a), r * -Math.cos(a));\\n  }\\n};\\n\\nfunction radial_curveRadial(curve) {\\n\\n  function radial(context) {\\n    return new radial_Radial(curve(context));\\n  }\\n\\n  radial._curve = curve;\\n\\n  return radial;\\n}\\n\\n// CONCATENATED MODULE: ./node_modules/d3-shape/src/lineRadial.js\\n\\n\\n\\nfunction lineRadial_lineRadial(l) {\\n  var c = l.curve;\\n\\n  l.angle = l.x, delete l.x;\\n  l.radius = l.y, delete l.y;\\n\\n  l.curve = function(_) {\\n    return arguments.length ? c(radial_curveRadial(_)) : c()._curve;\\n  };\\n\\n  return l;\\n}\\n\\n/* harmony default export */ var src_lineRadial = (function() {\\n  return lineRadial_lineRadial(src_line().curve(radial_curveRadialLinear));\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-shape/src/areaRadial.js\\n\\n\\n\\n\\n/* harmony default export */ var areaRadial = (function() {\\n  var a = d3_shape_src_area().curve(radial_curveRadialLinear),\\n      c = a.curve,\\n      x0 = a.lineX0,\\n      x1 = a.lineX1,\\n      y0 = a.lineY0,\\n      y1 = a.lineY1;\\n\\n  a.angle = a.x, delete a.x;\\n  a.startAngle = a.x0, delete a.x0;\\n  a.endAngle = a.x1, delete a.x1;\\n  a.radius = a.y, delete a.y;\\n  a.innerRadius = a.y0, delete a.y0;\\n  a.outerRadius = a.y1, delete a.y1;\\n  a.lineStartAngle = function() { return lineRadial_lineRadial(x0()); }, delete a.lineX0;\\n  a.lineEndAngle = function() { return lineRadial_lineRadial(x1()); }, delete a.lineX1;\\n  a.lineInnerRadius = function() { return lineRadial_lineRadial(y0()); }, delete a.lineY0;\\n  a.lineOuterRadius = function() { return lineRadial_lineRadial(y1()); }, delete a.lineY1;\\n\\n  a.curve = function(_) {\\n    return arguments.length ? c(radial_curveRadial(_)) : c()._curve;\\n  };\\n\\n  return a;\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-shape/src/pointRadial.js\\n/* harmony default export */ var pointRadial = (function(x, y) {\\n  return [(y = +y) * Math.cos(x -= Math.PI / 2), y * Math.sin(x)];\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-shape/src/array.js\\nvar d3_shape_src_array_slice = Array.prototype.slice;\\n\\n// CONCATENATED MODULE: ./node_modules/d3-shape/src/link/index.js\\n\\n\\n\\n\\n\\n\\nfunction link_linkSource(d) {\\n  return d.source;\\n}\\n\\nfunction link_linkTarget(d) {\\n  return d.target;\\n}\\n\\nfunction link_link(curve) {\\n  var source = link_linkSource,\\n      target = link_linkTarget,\\n      x = point_x,\\n      y = point_y,\\n      context = null;\\n\\n  function link() {\\n    var buffer, argv = d3_shape_src_array_slice.call(arguments), s = source.apply(this, argv), t = target.apply(this, argv);\\n    if (!context) context = buffer = src_path();\\n    curve(context, +x.apply(this, (argv[0] = s, argv)), +y.apply(this, argv), +x.apply(this, (argv[0] = t, argv)), +y.apply(this, argv));\\n    if (buffer) return context = null, buffer + \"\" || null;\\n  }\\n\\n  link.source = function(_) {\\n    return arguments.length ? (source = _, link) : source;\\n  };\\n\\n  link.target = function(_) {\\n    return arguments.length ? (target = _, link) : target;\\n  };\\n\\n  link.x = function(_) {\\n    return arguments.length ? (x = typeof _ === \"function\" ? _ : d3_shape_src_constant(+_), link) : x;\\n  };\\n\\n  link.y = function(_) {\\n    return arguments.length ? (y = typeof _ === \"function\" ? _ : d3_shape_src_constant(+_), link) : y;\\n  };\\n\\n  link.context = function(_) {\\n    return arguments.length ? ((context = _ == null ? null : _), link) : context;\\n  };\\n\\n  return link;\\n}\\n\\nfunction link_curveHorizontal(context, x0, y0, x1, y1) {\\n  context.moveTo(x0, y0);\\n  context.bezierCurveTo(x0 = (x0 + x1) / 2, y0, x0, y1, x1, y1);\\n}\\n\\nfunction link_curveVertical(context, x0, y0, x1, y1) {\\n  context.moveTo(x0, y0);\\n  context.bezierCurveTo(x0, y0 = (y0 + y1) / 2, x1, y0, x1, y1);\\n}\\n\\nfunction link_curveRadial(context, x0, y0, x1, y1) {\\n  var p0 = pointRadial(x0, y0),\\n      p1 = pointRadial(x0, y0 = (y0 + y1) / 2),\\n      p2 = pointRadial(x1, y0),\\n      p3 = pointRadial(x1, y1);\\n  context.moveTo(p0[0], p0[1]);\\n  context.bezierCurveTo(p1[0], p1[1], p2[0], p2[1], p3[0], p3[1]);\\n}\\n\\nfunction link_linkHorizontal() {\\n  return link_link(link_curveHorizontal);\\n}\\n\\nfunction link_linkVertical() {\\n  return link_link(link_curveVertical);\\n}\\n\\nfunction link_linkRadial() {\\n  var l = link_link(link_curveRadial);\\n  l.angle = l.x, delete l.x;\\n  l.radius = l.y, delete l.y;\\n  return l;\\n}\\n\\n// CONCATENATED MODULE: ./node_modules/d3-shape/src/symbol/circle.js\\n\\n\\n/* harmony default export */ var symbol_circle = ({\\n  draw: function(context, size) {\\n    var r = Math.sqrt(size / d3_shape_src_math_pi);\\n    context.moveTo(r, 0);\\n    context.arc(0, 0, r, 0, d3_shape_src_math_tau);\\n  }\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-shape/src/symbol/cross.js\\n/* harmony default export */ var symbol_cross = ({\\n  draw: function(context, size) {\\n    var r = Math.sqrt(size / 5) / 2;\\n    context.moveTo(-3 * r, -r);\\n    context.lineTo(-r, -r);\\n    context.lineTo(-r, -3 * r);\\n    context.lineTo(r, -3 * r);\\n    context.lineTo(r, -r);\\n    context.lineTo(3 * r, -r);\\n    context.lineTo(3 * r, r);\\n    context.lineTo(r, r);\\n    context.lineTo(r, 3 * r);\\n    context.lineTo(-r, 3 * r);\\n    context.lineTo(-r, r);\\n    context.lineTo(-3 * r, r);\\n    context.closePath();\\n  }\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-shape/src/symbol/diamond.js\\nvar tan30 = Math.sqrt(1 / 3),\\n    tan30_2 = tan30 * 2;\\n\\n/* harmony default export */ var diamond = ({\\n  draw: function(context, size) {\\n    var y = Math.sqrt(size / tan30_2),\\n        x = y * tan30;\\n    context.moveTo(0, -y);\\n    context.lineTo(x, 0);\\n    context.lineTo(0, y);\\n    context.lineTo(-x, 0);\\n    context.closePath();\\n  }\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-shape/src/symbol/star.js\\n\\n\\nvar star_ka = 0.89081309152928522810,\\n    star_kr = Math.sin(d3_shape_src_math_pi / 10) / Math.sin(7 * d3_shape_src_math_pi / 10),\\n    star_kx = Math.sin(d3_shape_src_math_tau / 10) * star_kr,\\n    star_ky = -Math.cos(d3_shape_src_math_tau / 10) * star_kr;\\n\\n/* harmony default export */ var star = ({\\n  draw: function(context, size) {\\n    var r = Math.sqrt(size * star_ka),\\n        x = star_kx * r,\\n        y = star_ky * r;\\n    context.moveTo(0, -r);\\n    context.lineTo(x, y);\\n    for (var i = 1; i < 5; ++i) {\\n      var a = d3_shape_src_math_tau * i / 5,\\n          c = Math.cos(a),\\n          s = Math.sin(a);\\n      context.lineTo(s * r, -c * r);\\n      context.lineTo(c * x - s * y, s * x + c * y);\\n    }\\n    context.closePath();\\n  }\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-shape/src/symbol/square.js\\n/* harmony default export */ var square = ({\\n  draw: function(context, size) {\\n    var w = Math.sqrt(size),\\n        x = -w / 2;\\n    context.rect(x, x, w, w);\\n  }\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-shape/src/symbol/triangle.js\\nvar sqrt3 = Math.sqrt(3);\\n\\n/* harmony default export */ var triangle = ({\\n  draw: function(context, size) {\\n    var y = -Math.sqrt(size / (sqrt3 * 3));\\n    context.moveTo(0, y * 2);\\n    context.lineTo(-sqrt3 * y, -y);\\n    context.lineTo(sqrt3 * y, -y);\\n    context.closePath();\\n  }\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-shape/src/symbol/wye.js\\nvar wye_c = -0.5,\\n    wye_s = Math.sqrt(3) / 2,\\n    wye_k = 1 / Math.sqrt(12),\\n    wye_a = (wye_k / 2 + 1) * 3;\\n\\n/* harmony default export */ var wye = ({\\n  draw: function(context, size) {\\n    var r = Math.sqrt(size / wye_a),\\n        x0 = r / 2,\\n        y0 = r * wye_k,\\n        x1 = x0,\\n        y1 = r * wye_k + r,\\n        x2 = -x1,\\n        y2 = y1;\\n    context.moveTo(x0, y0);\\n    context.lineTo(x1, y1);\\n    context.lineTo(x2, y2);\\n    context.lineTo(wye_c * x0 - wye_s * y0, wye_s * x0 + wye_c * y0);\\n    context.lineTo(wye_c * x1 - wye_s * y1, wye_s * x1 + wye_c * y1);\\n    context.lineTo(wye_c * x2 - wye_s * y2, wye_s * x2 + wye_c * y2);\\n    context.lineTo(wye_c * x0 + wye_s * y0, wye_c * y0 - wye_s * x0);\\n    context.lineTo(wye_c * x1 + wye_s * y1, wye_c * y1 - wye_s * x1);\\n    context.lineTo(wye_c * x2 + wye_s * y2, wye_c * y2 - wye_s * x2);\\n    context.closePath();\\n  }\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-shape/src/symbol.js\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nvar symbol_symbols = [\\n  symbol_circle,\\n  symbol_cross,\\n  diamond,\\n  square,\\n  star,\\n  triangle,\\n  wye\\n];\\n\\n/* harmony default export */ var src_symbol = (function() {\\n  var type = d3_shape_src_constant(symbol_circle),\\n      size = d3_shape_src_constant(64),\\n      context = null;\\n\\n  function symbol() {\\n    var buffer;\\n    if (!context) context = buffer = src_path();\\n    type.apply(this, arguments).draw(context, +size.apply(this, arguments));\\n    if (buffer) return context = null, buffer + \"\" || null;\\n  }\\n\\n  symbol.type = function(_) {\\n    return arguments.length ? (type = typeof _ === \"function\" ? _ : d3_shape_src_constant(_), symbol) : type;\\n  };\\n\\n  symbol.size = function(_) {\\n    return arguments.length ? (size = typeof _ === \"function\" ? _ : d3_shape_src_constant(+_), symbol) : size;\\n  };\\n\\n  symbol.context = function(_) {\\n    return arguments.length ? (context = _ == null ? null : _, symbol) : context;\\n  };\\n\\n  return symbol;\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-shape/src/noop.js\\n/* harmony default export */ var src_noop = (function() {});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-shape/src/curve/basis.js\\nfunction basis_point(that, x, y) {\\n  that._context.bezierCurveTo(\\n    (2 * that._x0 + that._x1) / 3,\\n    (2 * that._y0 + that._y1) / 3,\\n    (that._x0 + 2 * that._x1) / 3,\\n    (that._y0 + 2 * that._y1) / 3,\\n    (that._x0 + 4 * that._x1 + x) / 6,\\n    (that._y0 + 4 * that._y1 + y) / 6\\n  );\\n}\\n\\nfunction Basis(context) {\\n  this._context = context;\\n}\\n\\nBasis.prototype = {\\n  areaStart: function() {\\n    this._line = 0;\\n  },\\n  areaEnd: function() {\\n    this._line = NaN;\\n  },\\n  lineStart: function() {\\n    this._x0 = this._x1 =\\n    this._y0 = this._y1 = NaN;\\n    this._point = 0;\\n  },\\n  lineEnd: function() {\\n    switch (this._point) {\\n      case 3: basis_point(this, this._x1, this._y1); // proceed\\n      case 2: this._context.lineTo(this._x1, this._y1); break;\\n    }\\n    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();\\n    this._line = 1 - this._line;\\n  },\\n  point: function(x, y) {\\n    x = +x, y = +y;\\n    switch (this._point) {\\n      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;\\n      case 1: this._point = 2; break;\\n      case 2: this._point = 3; this._context.lineTo((5 * this._x0 + this._x1) / 6, (5 * this._y0 + this._y1) / 6); // proceed\\n      default: basis_point(this, x, y); break;\\n    }\\n    this._x0 = this._x1, this._x1 = x;\\n    this._y0 = this._y1, this._y1 = y;\\n  }\\n};\\n\\n/* harmony default export */ var curve_basis = (function(context) {\\n  return new Basis(context);\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-shape/src/curve/basisClosed.js\\n\\n\\n\\nfunction basisClosed_BasisClosed(context) {\\n  this._context = context;\\n}\\n\\nbasisClosed_BasisClosed.prototype = {\\n  areaStart: src_noop,\\n  areaEnd: src_noop,\\n  lineStart: function() {\\n    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 =\\n    this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = NaN;\\n    this._point = 0;\\n  },\\n  lineEnd: function() {\\n    switch (this._point) {\\n      case 1: {\\n        this._context.moveTo(this._x2, this._y2);\\n        this._context.closePath();\\n        break;\\n      }\\n      case 2: {\\n        this._context.moveTo((this._x2 + 2 * this._x3) / 3, (this._y2 + 2 * this._y3) / 3);\\n        this._context.lineTo((this._x3 + 2 * this._x2) / 3, (this._y3 + 2 * this._y2) / 3);\\n        this._context.closePath();\\n        break;\\n      }\\n      case 3: {\\n        this.point(this._x2, this._y2);\\n        this.point(this._x3, this._y3);\\n        this.point(this._x4, this._y4);\\n        break;\\n      }\\n    }\\n  },\\n  point: function(x, y) {\\n    x = +x, y = +y;\\n    switch (this._point) {\\n      case 0: this._point = 1; this._x2 = x, this._y2 = y; break;\\n      case 1: this._point = 2; this._x3 = x, this._y3 = y; break;\\n      case 2: this._point = 3; this._x4 = x, this._y4 = y; this._context.moveTo((this._x0 + 4 * this._x1 + x) / 6, (this._y0 + 4 * this._y1 + y) / 6); break;\\n      default: basis_point(this, x, y); break;\\n    }\\n    this._x0 = this._x1, this._x1 = x;\\n    this._y0 = this._y1, this._y1 = y;\\n  }\\n};\\n\\n/* harmony default export */ var curve_basisClosed = (function(context) {\\n  return new basisClosed_BasisClosed(context);\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-shape/src/curve/basisOpen.js\\n\\n\\nfunction basisOpen_BasisOpen(context) {\\n  this._context = context;\\n}\\n\\nbasisOpen_BasisOpen.prototype = {\\n  areaStart: function() {\\n    this._line = 0;\\n  },\\n  areaEnd: function() {\\n    this._line = NaN;\\n  },\\n  lineStart: function() {\\n    this._x0 = this._x1 =\\n    this._y0 = this._y1 = NaN;\\n    this._point = 0;\\n  },\\n  lineEnd: function() {\\n    if (this._line || (this._line !== 0 && this._point === 3)) this._context.closePath();\\n    this._line = 1 - this._line;\\n  },\\n  point: function(x, y) {\\n    x = +x, y = +y;\\n    switch (this._point) {\\n      case 0: this._point = 1; break;\\n      case 1: this._point = 2; break;\\n      case 2: this._point = 3; var x0 = (this._x0 + 4 * this._x1 + x) / 6, y0 = (this._y0 + 4 * this._y1 + y) / 6; this._line ? this._context.lineTo(x0, y0) : this._context.moveTo(x0, y0); break;\\n      case 3: this._point = 4; // proceed\\n      default: basis_point(this, x, y); break;\\n    }\\n    this._x0 = this._x1, this._x1 = x;\\n    this._y0 = this._y1, this._y1 = y;\\n  }\\n};\\n\\n/* harmony default export */ var basisOpen = (function(context) {\\n  return new basisOpen_BasisOpen(context);\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-shape/src/curve/bundle.js\\n\\n\\nfunction bundle_Bundle(context, beta) {\\n  this._basis = new Basis(context);\\n  this._beta = beta;\\n}\\n\\nbundle_Bundle.prototype = {\\n  lineStart: function() {\\n    this._x = [];\\n    this._y = [];\\n    this._basis.lineStart();\\n  },\\n  lineEnd: function() {\\n    var x = this._x,\\n        y = this._y,\\n        j = x.length - 1;\\n\\n    if (j > 0) {\\n      var x0 = x[0],\\n          y0 = y[0],\\n          dx = x[j] - x0,\\n          dy = y[j] - y0,\\n          i = -1,\\n          t;\\n\\n      while (++i <= j) {\\n        t = i / j;\\n        this._basis.point(\\n          this._beta * x[i] + (1 - this._beta) * (x0 + t * dx),\\n          this._beta * y[i] + (1 - this._beta) * (y0 + t * dy)\\n        );\\n      }\\n    }\\n\\n    this._x = this._y = null;\\n    this._basis.lineEnd();\\n  },\\n  point: function(x, y) {\\n    this._x.push(+x);\\n    this._y.push(+y);\\n  }\\n};\\n\\n/* harmony default export */ var curve_bundle = ((function custom(beta) {\\n\\n  function bundle(context) {\\n    return beta === 1 ? new Basis(context) : new bundle_Bundle(context, beta);\\n  }\\n\\n  bundle.beta = function(beta) {\\n    return custom(+beta);\\n  };\\n\\n  return bundle;\\n})(0.85));\\n\\n// CONCATENATED MODULE: ./node_modules/d3-shape/src/curve/cardinal.js\\nfunction cardinal_point(that, x, y) {\\n  that._context.bezierCurveTo(\\n    that._x1 + that._k * (that._x2 - that._x0),\\n    that._y1 + that._k * (that._y2 - that._y0),\\n    that._x2 + that._k * (that._x1 - x),\\n    that._y2 + that._k * (that._y1 - y),\\n    that._x2,\\n    that._y2\\n  );\\n}\\n\\nfunction Cardinal(context, tension) {\\n  this._context = context;\\n  this._k = (1 - tension) / 6;\\n}\\n\\nCardinal.prototype = {\\n  areaStart: function() {\\n    this._line = 0;\\n  },\\n  areaEnd: function() {\\n    this._line = NaN;\\n  },\\n  lineStart: function() {\\n    this._x0 = this._x1 = this._x2 =\\n    this._y0 = this._y1 = this._y2 = NaN;\\n    this._point = 0;\\n  },\\n  lineEnd: function() {\\n    switch (this._point) {\\n      case 2: this._context.lineTo(this._x2, this._y2); break;\\n      case 3: cardinal_point(this, this._x1, this._y1); break;\\n    }\\n    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();\\n    this._line = 1 - this._line;\\n  },\\n  point: function(x, y) {\\n    x = +x, y = +y;\\n    switch (this._point) {\\n      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;\\n      case 1: this._point = 2; this._x1 = x, this._y1 = y; break;\\n      case 2: this._point = 3; // proceed\\n      default: cardinal_point(this, x, y); break;\\n    }\\n    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;\\n    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;\\n  }\\n};\\n\\n/* harmony default export */ var cardinal = ((function custom(tension) {\\n\\n  function cardinal(context) {\\n    return new Cardinal(context, tension);\\n  }\\n\\n  cardinal.tension = function(tension) {\\n    return custom(+tension);\\n  };\\n\\n  return cardinal;\\n})(0));\\n\\n// CONCATENATED MODULE: ./node_modules/d3-shape/src/curve/cardinalClosed.js\\n\\n\\n\\nfunction cardinalClosed_CardinalClosed(context, tension) {\\n  this._context = context;\\n  this._k = (1 - tension) / 6;\\n}\\n\\ncardinalClosed_CardinalClosed.prototype = {\\n  areaStart: src_noop,\\n  areaEnd: src_noop,\\n  lineStart: function() {\\n    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 =\\n    this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;\\n    this._point = 0;\\n  },\\n  lineEnd: function() {\\n    switch (this._point) {\\n      case 1: {\\n        this._context.moveTo(this._x3, this._y3);\\n        this._context.closePath();\\n        break;\\n      }\\n      case 2: {\\n        this._context.lineTo(this._x3, this._y3);\\n        this._context.closePath();\\n        break;\\n      }\\n      case 3: {\\n        this.point(this._x3, this._y3);\\n        this.point(this._x4, this._y4);\\n        this.point(this._x5, this._y5);\\n        break;\\n      }\\n    }\\n  },\\n  point: function(x, y) {\\n    x = +x, y = +y;\\n    switch (this._point) {\\n      case 0: this._point = 1; this._x3 = x, this._y3 = y; break;\\n      case 1: this._point = 2; this._context.moveTo(this._x4 = x, this._y4 = y); break;\\n      case 2: this._point = 3; this._x5 = x, this._y5 = y; break;\\n      default: cardinal_point(this, x, y); break;\\n    }\\n    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;\\n    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;\\n  }\\n};\\n\\n/* harmony default export */ var cardinalClosed = ((function custom(tension) {\\n\\n  function cardinal(context) {\\n    return new cardinalClosed_CardinalClosed(context, tension);\\n  }\\n\\n  cardinal.tension = function(tension) {\\n    return custom(+tension);\\n  };\\n\\n  return cardinal;\\n})(0));\\n\\n// CONCATENATED MODULE: ./node_modules/d3-shape/src/curve/cardinalOpen.js\\n\\n\\nfunction cardinalOpen_CardinalOpen(context, tension) {\\n  this._context = context;\\n  this._k = (1 - tension) / 6;\\n}\\n\\ncardinalOpen_CardinalOpen.prototype = {\\n  areaStart: function() {\\n    this._line = 0;\\n  },\\n  areaEnd: function() {\\n    this._line = NaN;\\n  },\\n  lineStart: function() {\\n    this._x0 = this._x1 = this._x2 =\\n    this._y0 = this._y1 = this._y2 = NaN;\\n    this._point = 0;\\n  },\\n  lineEnd: function() {\\n    if (this._line || (this._line !== 0 && this._point === 3)) this._context.closePath();\\n    this._line = 1 - this._line;\\n  },\\n  point: function(x, y) {\\n    x = +x, y = +y;\\n    switch (this._point) {\\n      case 0: this._point = 1; break;\\n      case 1: this._point = 2; break;\\n      case 2: this._point = 3; this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2); break;\\n      case 3: this._point = 4; // proceed\\n      default: cardinal_point(this, x, y); break;\\n    }\\n    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;\\n    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;\\n  }\\n};\\n\\n/* harmony default export */ var cardinalOpen = ((function custom(tension) {\\n\\n  function cardinal(context) {\\n    return new cardinalOpen_CardinalOpen(context, tension);\\n  }\\n\\n  cardinal.tension = function(tension) {\\n    return custom(+tension);\\n  };\\n\\n  return cardinal;\\n})(0));\\n\\n// CONCATENATED MODULE: ./node_modules/d3-shape/src/curve/catmullRom.js\\n\\n\\n\\nfunction catmullRom_point(that, x, y) {\\n  var x1 = that._x1,\\n      y1 = that._y1,\\n      x2 = that._x2,\\n      y2 = that._y2;\\n\\n  if (that._l01_a > src_math_epsilon) {\\n    var a = 2 * that._l01_2a + 3 * that._l01_a * that._l12_a + that._l12_2a,\\n        n = 3 * that._l01_a * (that._l01_a + that._l12_a);\\n    x1 = (x1 * a - that._x0 * that._l12_2a + that._x2 * that._l01_2a) / n;\\n    y1 = (y1 * a - that._y0 * that._l12_2a + that._y2 * that._l01_2a) / n;\\n  }\\n\\n  if (that._l23_a > src_math_epsilon) {\\n    var b = 2 * that._l23_2a + 3 * that._l23_a * that._l12_a + that._l12_2a,\\n        m = 3 * that._l23_a * (that._l23_a + that._l12_a);\\n    x2 = (x2 * b + that._x1 * that._l23_2a - x * that._l12_2a) / m;\\n    y2 = (y2 * b + that._y1 * that._l23_2a - y * that._l12_2a) / m;\\n  }\\n\\n  that._context.bezierCurveTo(x1, y1, x2, y2, that._x2, that._y2);\\n}\\n\\nfunction catmullRom_CatmullRom(context, alpha) {\\n  this._context = context;\\n  this._alpha = alpha;\\n}\\n\\ncatmullRom_CatmullRom.prototype = {\\n  areaStart: function() {\\n    this._line = 0;\\n  },\\n  areaEnd: function() {\\n    this._line = NaN;\\n  },\\n  lineStart: function() {\\n    this._x0 = this._x1 = this._x2 =\\n    this._y0 = this._y1 = this._y2 = NaN;\\n    this._l01_a = this._l12_a = this._l23_a =\\n    this._l01_2a = this._l12_2a = this._l23_2a =\\n    this._point = 0;\\n  },\\n  lineEnd: function() {\\n    switch (this._point) {\\n      case 2: this._context.lineTo(this._x2, this._y2); break;\\n      case 3: this.point(this._x2, this._y2); break;\\n    }\\n    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();\\n    this._line = 1 - this._line;\\n  },\\n  point: function(x, y) {\\n    x = +x, y = +y;\\n\\n    if (this._point) {\\n      var x23 = this._x2 - x,\\n          y23 = this._y2 - y;\\n      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));\\n    }\\n\\n    switch (this._point) {\\n      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;\\n      case 1: this._point = 2; break;\\n      case 2: this._point = 3; // proceed\\n      default: catmullRom_point(this, x, y); break;\\n    }\\n\\n    this._l01_a = this._l12_a, this._l12_a = this._l23_a;\\n    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;\\n    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;\\n    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;\\n  }\\n};\\n\\n/* harmony default export */ var curve_catmullRom = ((function custom(alpha) {\\n\\n  function catmullRom(context) {\\n    return alpha ? new catmullRom_CatmullRom(context, alpha) : new Cardinal(context, 0);\\n  }\\n\\n  catmullRom.alpha = function(alpha) {\\n    return custom(+alpha);\\n  };\\n\\n  return catmullRom;\\n})(0.5));\\n\\n// CONCATENATED MODULE: ./node_modules/d3-shape/src/curve/catmullRomClosed.js\\n\\n\\n\\n\\nfunction catmullRomClosed_CatmullRomClosed(context, alpha) {\\n  this._context = context;\\n  this._alpha = alpha;\\n}\\n\\ncatmullRomClosed_CatmullRomClosed.prototype = {\\n  areaStart: src_noop,\\n  areaEnd: src_noop,\\n  lineStart: function() {\\n    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 =\\n    this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;\\n    this._l01_a = this._l12_a = this._l23_a =\\n    this._l01_2a = this._l12_2a = this._l23_2a =\\n    this._point = 0;\\n  },\\n  lineEnd: function() {\\n    switch (this._point) {\\n      case 1: {\\n        this._context.moveTo(this._x3, this._y3);\\n        this._context.closePath();\\n        break;\\n      }\\n      case 2: {\\n        this._context.lineTo(this._x3, this._y3);\\n        this._context.closePath();\\n        break;\\n      }\\n      case 3: {\\n        this.point(this._x3, this._y3);\\n        this.point(this._x4, this._y4);\\n        this.point(this._x5, this._y5);\\n        break;\\n      }\\n    }\\n  },\\n  point: function(x, y) {\\n    x = +x, y = +y;\\n\\n    if (this._point) {\\n      var x23 = this._x2 - x,\\n          y23 = this._y2 - y;\\n      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));\\n    }\\n\\n    switch (this._point) {\\n      case 0: this._point = 1; this._x3 = x, this._y3 = y; break;\\n      case 1: this._point = 2; this._context.moveTo(this._x4 = x, this._y4 = y); break;\\n      case 2: this._point = 3; this._x5 = x, this._y5 = y; break;\\n      default: catmullRom_point(this, x, y); break;\\n    }\\n\\n    this._l01_a = this._l12_a, this._l12_a = this._l23_a;\\n    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;\\n    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;\\n    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;\\n  }\\n};\\n\\n/* harmony default export */ var catmullRomClosed = ((function custom(alpha) {\\n\\n  function catmullRom(context) {\\n    return alpha ? new catmullRomClosed_CatmullRomClosed(context, alpha) : new cardinalClosed_CardinalClosed(context, 0);\\n  }\\n\\n  catmullRom.alpha = function(alpha) {\\n    return custom(+alpha);\\n  };\\n\\n  return catmullRom;\\n})(0.5));\\n\\n// CONCATENATED MODULE: ./node_modules/d3-shape/src/curve/catmullRomOpen.js\\n\\n\\n\\nfunction catmullRomOpen_CatmullRomOpen(context, alpha) {\\n  this._context = context;\\n  this._alpha = alpha;\\n}\\n\\ncatmullRomOpen_CatmullRomOpen.prototype = {\\n  areaStart: function() {\\n    this._line = 0;\\n  },\\n  areaEnd: function() {\\n    this._line = NaN;\\n  },\\n  lineStart: function() {\\n    this._x0 = this._x1 = this._x2 =\\n    this._y0 = this._y1 = this._y2 = NaN;\\n    this._l01_a = this._l12_a = this._l23_a =\\n    this._l01_2a = this._l12_2a = this._l23_2a =\\n    this._point = 0;\\n  },\\n  lineEnd: function() {\\n    if (this._line || (this._line !== 0 && this._point === 3)) this._context.closePath();\\n    this._line = 1 - this._line;\\n  },\\n  point: function(x, y) {\\n    x = +x, y = +y;\\n\\n    if (this._point) {\\n      var x23 = this._x2 - x,\\n          y23 = this._y2 - y;\\n      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));\\n    }\\n\\n    switch (this._point) {\\n      case 0: this._point = 1; break;\\n      case 1: this._point = 2; break;\\n      case 2: this._point = 3; this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2); break;\\n      case 3: this._point = 4; // proceed\\n      default: catmullRom_point(this, x, y); break;\\n    }\\n\\n    this._l01_a = this._l12_a, this._l12_a = this._l23_a;\\n    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;\\n    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;\\n    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;\\n  }\\n};\\n\\n/* harmony default export */ var catmullRomOpen = ((function custom(alpha) {\\n\\n  function catmullRom(context) {\\n    return alpha ? new catmullRomOpen_CatmullRomOpen(context, alpha) : new cardinalOpen_CardinalOpen(context, 0);\\n  }\\n\\n  catmullRom.alpha = function(alpha) {\\n    return custom(+alpha);\\n  };\\n\\n  return catmullRom;\\n})(0.5));\\n\\n// CONCATENATED MODULE: ./node_modules/d3-shape/src/curve/linearClosed.js\\n\\n\\nfunction linearClosed_LinearClosed(context) {\\n  this._context = context;\\n}\\n\\nlinearClosed_LinearClosed.prototype = {\\n  areaStart: src_noop,\\n  areaEnd: src_noop,\\n  lineStart: function() {\\n    this._point = 0;\\n  },\\n  lineEnd: function() {\\n    if (this._point) this._context.closePath();\\n  },\\n  point: function(x, y) {\\n    x = +x, y = +y;\\n    if (this._point) this._context.lineTo(x, y);\\n    else this._point = 1, this._context.moveTo(x, y);\\n  }\\n};\\n\\n/* harmony default export */ var linearClosed = (function(context) {\\n  return new linearClosed_LinearClosed(context);\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-shape/src/curve/monotone.js\\nfunction monotone_sign(x) {\\n  return x < 0 ? -1 : 1;\\n}\\n\\n// Calculate the slopes of the tangents (Hermite-type interpolation) based on\\n// the following paper: Steffen, M. 1990. A Simple Method for Monotonic\\n// Interpolation in One Dimension. Astronomy and Astrophysics, Vol. 239, NO.\\n// NOV(II), P. 443, 1990.\\nfunction slope3(that, x2, y2) {\\n  var h0 = that._x1 - that._x0,\\n      h1 = x2 - that._x1,\\n      s0 = (that._y1 - that._y0) / (h0 || h1 < 0 && -0),\\n      s1 = (y2 - that._y1) / (h1 || h0 < 0 && -0),\\n      p = (s0 * h1 + s1 * h0) / (h0 + h1);\\n  return (monotone_sign(s0) + monotone_sign(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p)) || 0;\\n}\\n\\n// Calculate a one-sided slope.\\nfunction slope2(that, t) {\\n  var h = that._x1 - that._x0;\\n  return h ? (3 * (that._y1 - that._y0) / h - t) / 2 : t;\\n}\\n\\n// According to https://en.wikipedia.org/wiki/Cubic_Hermite_spline#Representations\\n// \"you can express cubic Hermite interpolation in terms of cubic Bézier curves\\n// with respect to the four values p0, p0 + m0 / 3, p1 - m1 / 3, p1\".\\nfunction monotone_point(that, t0, t1) {\\n  var x0 = that._x0,\\n      y0 = that._y0,\\n      x1 = that._x1,\\n      y1 = that._y1,\\n      dx = (x1 - x0) / 3;\\n  that._context.bezierCurveTo(x0 + dx, y0 + dx * t0, x1 - dx, y1 - dx * t1, x1, y1);\\n}\\n\\nfunction MonotoneX(context) {\\n  this._context = context;\\n}\\n\\nMonotoneX.prototype = {\\n  areaStart: function() {\\n    this._line = 0;\\n  },\\n  areaEnd: function() {\\n    this._line = NaN;\\n  },\\n  lineStart: function() {\\n    this._x0 = this._x1 =\\n    this._y0 = this._y1 =\\n    this._t0 = NaN;\\n    this._point = 0;\\n  },\\n  lineEnd: function() {\\n    switch (this._point) {\\n      case 2: this._context.lineTo(this._x1, this._y1); break;\\n      case 3: monotone_point(this, this._t0, slope2(this, this._t0)); break;\\n    }\\n    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();\\n    this._line = 1 - this._line;\\n  },\\n  point: function(x, y) {\\n    var t1 = NaN;\\n\\n    x = +x, y = +y;\\n    if (x === this._x1 && y === this._y1) return; // Ignore coincident points.\\n    switch (this._point) {\\n      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;\\n      case 1: this._point = 2; break;\\n      case 2: this._point = 3; monotone_point(this, slope2(this, t1 = slope3(this, x, y)), t1); break;\\n      default: monotone_point(this, this._t0, t1 = slope3(this, x, y)); break;\\n    }\\n\\n    this._x0 = this._x1, this._x1 = x;\\n    this._y0 = this._y1, this._y1 = y;\\n    this._t0 = t1;\\n  }\\n}\\n\\nfunction MonotoneY(context) {\\n  this._context = new ReflectContext(context);\\n}\\n\\n(MonotoneY.prototype = Object.create(MonotoneX.prototype)).point = function(x, y) {\\n  MonotoneX.prototype.point.call(this, y, x);\\n};\\n\\nfunction ReflectContext(context) {\\n  this._context = context;\\n}\\n\\nReflectContext.prototype = {\\n  moveTo: function(x, y) { this._context.moveTo(y, x); },\\n  closePath: function() { this._context.closePath(); },\\n  lineTo: function(x, y) { this._context.lineTo(y, x); },\\n  bezierCurveTo: function(x1, y1, x2, y2, x, y) { this._context.bezierCurveTo(y1, x1, y2, x2, y, x); }\\n};\\n\\nfunction monotoneX(context) {\\n  return new MonotoneX(context);\\n}\\n\\nfunction monotoneY(context) {\\n  return new MonotoneY(context);\\n}\\n\\n// CONCATENATED MODULE: ./node_modules/d3-shape/src/curve/natural.js\\nfunction Natural(context) {\\n  this._context = context;\\n}\\n\\nNatural.prototype = {\\n  areaStart: function() {\\n    this._line = 0;\\n  },\\n  areaEnd: function() {\\n    this._line = NaN;\\n  },\\n  lineStart: function() {\\n    this._x = [];\\n    this._y = [];\\n  },\\n  lineEnd: function() {\\n    var x = this._x,\\n        y = this._y,\\n        n = x.length;\\n\\n    if (n) {\\n      this._line ? this._context.lineTo(x[0], y[0]) : this._context.moveTo(x[0], y[0]);\\n      if (n === 2) {\\n        this._context.lineTo(x[1], y[1]);\\n      } else {\\n        var px = controlPoints(x),\\n            py = controlPoints(y);\\n        for (var i0 = 0, i1 = 1; i1 < n; ++i0, ++i1) {\\n          this._context.bezierCurveTo(px[0][i0], py[0][i0], px[1][i0], py[1][i0], x[i1], y[i1]);\\n        }\\n      }\\n    }\\n\\n    if (this._line || (this._line !== 0 && n === 1)) this._context.closePath();\\n    this._line = 1 - this._line;\\n    this._x = this._y = null;\\n  },\\n  point: function(x, y) {\\n    this._x.push(+x);\\n    this._y.push(+y);\\n  }\\n};\\n\\n// See https://www.particleincell.com/2012/bezier-splines/ for derivation.\\nfunction controlPoints(x) {\\n  var i,\\n      n = x.length - 1,\\n      m,\\n      a = new Array(n),\\n      b = new Array(n),\\n      r = new Array(n);\\n  a[0] = 0, b[0] = 2, r[0] = x[0] + 2 * x[1];\\n  for (i = 1; i < n - 1; ++i) a[i] = 1, b[i] = 4, r[i] = 4 * x[i] + 2 * x[i + 1];\\n  a[n - 1] = 2, b[n - 1] = 7, r[n - 1] = 8 * x[n - 1] + x[n];\\n  for (i = 1; i < n; ++i) m = a[i] / b[i - 1], b[i] -= m, r[i] -= m * r[i - 1];\\n  a[n - 1] = r[n - 1] / b[n - 1];\\n  for (i = n - 2; i >= 0; --i) a[i] = (r[i] - a[i + 1]) / b[i];\\n  b[n - 1] = (x[n] + a[n - 1]) / 2;\\n  for (i = 0; i < n - 1; ++i) b[i] = 2 * x[i + 1] - a[i + 1];\\n  return [a, b];\\n}\\n\\n/* harmony default export */ var natural = (function(context) {\\n  return new Natural(context);\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-shape/src/curve/step.js\\nfunction Step(context, t) {\\n  this._context = context;\\n  this._t = t;\\n}\\n\\nStep.prototype = {\\n  areaStart: function() {\\n    this._line = 0;\\n  },\\n  areaEnd: function() {\\n    this._line = NaN;\\n  },\\n  lineStart: function() {\\n    this._x = this._y = NaN;\\n    this._point = 0;\\n  },\\n  lineEnd: function() {\\n    if (0 < this._t && this._t < 1 && this._point === 2) this._context.lineTo(this._x, this._y);\\n    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();\\n    if (this._line >= 0) this._t = 1 - this._t, this._line = 1 - this._line;\\n  },\\n  point: function(x, y) {\\n    x = +x, y = +y;\\n    switch (this._point) {\\n      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;\\n      case 1: this._point = 2; // proceed\\n      default: {\\n        if (this._t <= 0) {\\n          this._context.lineTo(this._x, y);\\n          this._context.lineTo(x, y);\\n        } else {\\n          var x1 = this._x * (1 - this._t) + x * this._t;\\n          this._context.lineTo(x1, this._y);\\n          this._context.lineTo(x1, y);\\n        }\\n        break;\\n      }\\n    }\\n    this._x = x, this._y = y;\\n  }\\n};\\n\\n/* harmony default export */ var curve_step = (function(context) {\\n  return new Step(context, 0.5);\\n});\\n\\nfunction stepBefore(context) {\\n  return new Step(context, 0);\\n}\\n\\nfunction stepAfter(context) {\\n  return new Step(context, 1);\\n}\\n\\n// CONCATENATED MODULE: ./node_modules/d3-shape/src/offset/none.js\\n/* harmony default export */ var offset_none = (function(series, order) {\\n  if (!((n = series.length) > 1)) return;\\n  for (var i = 1, j, s0, s1 = series[order[0]], n, m = s1.length; i < n; ++i) {\\n    s0 = s1, s1 = series[order[i]];\\n    for (j = 0; j < m; ++j) {\\n      s1[j][1] += s1[j][0] = isNaN(s0[j][1]) ? s0[j][0] : s0[j][1];\\n    }\\n  }\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-shape/src/order/none.js\\n/* harmony default export */ var order_none = (function(series) {\\n  var n = series.length, o = new Array(n);\\n  while (--n >= 0) o[n] = n;\\n  return o;\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-shape/src/stack.js\\n\\n\\n\\n\\n\\nfunction stack_stackValue(d, key) {\\n  return d[key];\\n}\\n\\n/* harmony default export */ var src_stack = (function() {\\n  var keys = d3_shape_src_constant([]),\\n      order = order_none,\\n      offset = offset_none,\\n      value = stack_stackValue;\\n\\n  function stack(data) {\\n    var kz = keys.apply(this, arguments),\\n        i,\\n        m = data.length,\\n        n = kz.length,\\n        sz = new Array(n),\\n        oz;\\n\\n    for (i = 0; i < n; ++i) {\\n      for (var ki = kz[i], si = sz[i] = new Array(m), j = 0, sij; j < m; ++j) {\\n        si[j] = sij = [0, +value(data[j], ki, j, data)];\\n        sij.data = data[j];\\n      }\\n      si.key = ki;\\n    }\\n\\n    for (i = 0, oz = order(sz); i < n; ++i) {\\n      sz[oz[i]].index = i;\\n    }\\n\\n    offset(sz, oz);\\n    return sz;\\n  }\\n\\n  stack.keys = function(_) {\\n    return arguments.length ? (keys = typeof _ === \"function\" ? _ : d3_shape_src_constant(d3_shape_src_array_slice.call(_)), stack) : keys;\\n  };\\n\\n  stack.value = function(_) {\\n    return arguments.length ? (value = typeof _ === \"function\" ? _ : d3_shape_src_constant(+_), stack) : value;\\n  };\\n\\n  stack.order = function(_) {\\n    return arguments.length ? (order = _ == null ? order_none : typeof _ === \"function\" ? _ : d3_shape_src_constant(d3_shape_src_array_slice.call(_)), stack) : order;\\n  };\\n\\n  stack.offset = function(_) {\\n    return arguments.length ? (offset = _ == null ? offset_none : _, stack) : offset;\\n  };\\n\\n  return stack;\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-shape/src/offset/expand.js\\n\\n\\n/* harmony default export */ var expand = (function(series, order) {\\n  if (!((n = series.length) > 0)) return;\\n  for (var i, n, j = 0, m = series[0].length, y; j < m; ++j) {\\n    for (y = i = 0; i < n; ++i) y += series[i][j][1] || 0;\\n    if (y) for (i = 0; i < n; ++i) series[i][j][1] /= y;\\n  }\\n  offset_none(series, order);\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-shape/src/offset/diverging.js\\n/* harmony default export */ var diverging = (function(series, order) {\\n  if (!((n = series.length) > 1)) return;\\n  for (var i, j = 0, d, dy, yp, yn, n, m = series[order[0]].length; j < m; ++j) {\\n    for (yp = yn = 0, i = 0; i < n; ++i) {\\n      if ((dy = (d = series[order[i]][j])[1] - d[0]) >= 0) {\\n        d[0] = yp, d[1] = yp += dy;\\n      } else if (dy < 0) {\\n        d[1] = yn, d[0] = yn += dy;\\n      } else {\\n        d[0] = yp;\\n      }\\n    }\\n  }\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-shape/src/offset/silhouette.js\\n\\n\\n/* harmony default export */ var silhouette = (function(series, order) {\\n  if (!((n = series.length) > 0)) return;\\n  for (var j = 0, s0 = series[order[0]], n, m = s0.length; j < m; ++j) {\\n    for (var i = 0, y = 0; i < n; ++i) y += series[i][j][1] || 0;\\n    s0[j][1] += s0[j][0] = -y / 2;\\n  }\\n  offset_none(series, order);\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-shape/src/offset/wiggle.js\\n\\n\\n/* harmony default export */ var wiggle = (function(series, order) {\\n  if (!((n = series.length) > 0) || !((m = (s0 = series[order[0]]).length) > 0)) return;\\n  for (var y = 0, j = 1, s0, m, n; j < m; ++j) {\\n    for (var i = 0, s1 = 0, s2 = 0; i < n; ++i) {\\n      var si = series[order[i]],\\n          sij0 = si[j][1] || 0,\\n          sij1 = si[j - 1][1] || 0,\\n          s3 = (sij0 - sij1) / 2;\\n      for (var k = 0; k < i; ++k) {\\n        var sk = series[order[k]],\\n            skj0 = sk[j][1] || 0,\\n            skj1 = sk[j - 1][1] || 0;\\n        s3 += skj0 - skj1;\\n      }\\n      s1 += sij0, s2 += s3 * sij0;\\n    }\\n    s0[j - 1][1] += s0[j - 1][0] = y;\\n    if (s1) y -= s2 / s1;\\n  }\\n  s0[j - 1][1] += s0[j - 1][0] = y;\\n  offset_none(series, order);\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-shape/src/order/ascending.js\\n\\n\\n/* harmony default export */ var order_ascending = (function(series) {\\n  var sums = series.map(ascending_sum);\\n  return order_none(series).sort(function(a, b) { return sums[a] - sums[b]; });\\n});\\n\\nfunction ascending_sum(series) {\\n  var s = 0, i = -1, n = series.length, v;\\n  while (++i < n) if (v = +series[i][1]) s += v;\\n  return s;\\n}\\n\\n// CONCATENATED MODULE: ./node_modules/d3-shape/src/order/descending.js\\n\\n\\n/* harmony default export */ var order_descending = (function(series) {\\n  return order_ascending(series).reverse();\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-shape/src/order/insideOut.js\\n\\n\\n\\n/* harmony default export */ var insideOut = (function(series) {\\n  var n = series.length,\\n      i,\\n      j,\\n      sums = series.map(ascending_sum),\\n      order = order_none(series).sort(function(a, b) { return sums[b] - sums[a]; }),\\n      top = 0,\\n      bottom = 0,\\n      tops = [],\\n      bottoms = [];\\n\\n  for (i = 0; i < n; ++i) {\\n    j = order[i];\\n    if (top < bottom) {\\n      top += sums[j];\\n      tops.push(j);\\n    } else {\\n      bottom += sums[j];\\n      bottoms.push(j);\\n    }\\n  }\\n\\n  return bottoms.reverse().concat(tops);\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-shape/src/order/reverse.js\\n\\n\\n/* harmony default export */ var order_reverse = (function(series) {\\n  return order_none(series).reverse();\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-shape/index.js\\n\\n\\n\\n\\n // Note: radialArea is deprecated!\\n // Note: radialLine is deprecated!\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n// CONCATENATED MODULE: ./node_modules/d3-voronoi/src/constant.js\\n/* harmony default export */ var d3_voronoi_src_constant = (function(x) {\\n  return function() {\\n    return x;\\n  };\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-voronoi/src/point.js\\nfunction src_point_x(d) {\\n  return d[0];\\n}\\n\\nfunction src_point_y(d) {\\n  return d[1];\\n}\\n\\n// CONCATENATED MODULE: ./node_modules/d3-voronoi/src/RedBlackTree.js\\nfunction RedBlackTree() {\\n  this._ = null; // root node\\n}\\n\\nfunction RedBlackNode(node) {\\n  node.U = // parent node\\n  node.C = // color - true for red, false for black\\n  node.L = // left node\\n  node.R = // right node\\n  node.P = // previous node\\n  node.N = null; // next node\\n}\\n\\nRedBlackTree.prototype = {\\n  constructor: RedBlackTree,\\n\\n  insert: function(after, node) {\\n    var parent, grandpa, uncle;\\n\\n    if (after) {\\n      node.P = after;\\n      node.N = after.N;\\n      if (after.N) after.N.P = node;\\n      after.N = node;\\n      if (after.R) {\\n        after = after.R;\\n        while (after.L) after = after.L;\\n        after.L = node;\\n      } else {\\n        after.R = node;\\n      }\\n      parent = after;\\n    } else if (this._) {\\n      after = RedBlackFirst(this._);\\n      node.P = null;\\n      node.N = after;\\n      after.P = after.L = node;\\n      parent = after;\\n    } else {\\n      node.P = node.N = null;\\n      this._ = node;\\n      parent = null;\\n    }\\n    node.L = node.R = null;\\n    node.U = parent;\\n    node.C = true;\\n\\n    after = node;\\n    while (parent && parent.C) {\\n      grandpa = parent.U;\\n      if (parent === grandpa.L) {\\n        uncle = grandpa.R;\\n        if (uncle && uncle.C) {\\n          parent.C = uncle.C = false;\\n          grandpa.C = true;\\n          after = grandpa;\\n        } else {\\n          if (after === parent.R) {\\n            RedBlackRotateLeft(this, parent);\\n            after = parent;\\n            parent = after.U;\\n          }\\n          parent.C = false;\\n          grandpa.C = true;\\n          RedBlackRotateRight(this, grandpa);\\n        }\\n      } else {\\n        uncle = grandpa.L;\\n        if (uncle && uncle.C) {\\n          parent.C = uncle.C = false;\\n          grandpa.C = true;\\n          after = grandpa;\\n        } else {\\n          if (after === parent.L) {\\n            RedBlackRotateRight(this, parent);\\n            after = parent;\\n            parent = after.U;\\n          }\\n          parent.C = false;\\n          grandpa.C = true;\\n          RedBlackRotateLeft(this, grandpa);\\n        }\\n      }\\n      parent = after.U;\\n    }\\n    this._.C = false;\\n  },\\n\\n  remove: function(node) {\\n    if (node.N) node.N.P = node.P;\\n    if (node.P) node.P.N = node.N;\\n    node.N = node.P = null;\\n\\n    var parent = node.U,\\n        sibling,\\n        left = node.L,\\n        right = node.R,\\n        next,\\n        red;\\n\\n    if (!left) next = right;\\n    else if (!right) next = left;\\n    else next = RedBlackFirst(right);\\n\\n    if (parent) {\\n      if (parent.L === node) parent.L = next;\\n      else parent.R = next;\\n    } else {\\n      this._ = next;\\n    }\\n\\n    if (left && right) {\\n      red = next.C;\\n      next.C = node.C;\\n      next.L = left;\\n      left.U = next;\\n      if (next !== right) {\\n        parent = next.U;\\n        next.U = node.U;\\n        node = next.R;\\n        parent.L = node;\\n        next.R = right;\\n        right.U = next;\\n      } else {\\n        next.U = parent;\\n        parent = next;\\n        node = next.R;\\n      }\\n    } else {\\n      red = node.C;\\n      node = next;\\n    }\\n\\n    if (node) node.U = parent;\\n    if (red) return;\\n    if (node && node.C) { node.C = false; return; }\\n\\n    do {\\n      if (node === this._) break;\\n      if (node === parent.L) {\\n        sibling = parent.R;\\n        if (sibling.C) {\\n          sibling.C = false;\\n          parent.C = true;\\n          RedBlackRotateLeft(this, parent);\\n          sibling = parent.R;\\n        }\\n        if ((sibling.L && sibling.L.C)\\n            || (sibling.R && sibling.R.C)) {\\n          if (!sibling.R || !sibling.R.C) {\\n            sibling.L.C = false;\\n            sibling.C = true;\\n            RedBlackRotateRight(this, sibling);\\n            sibling = parent.R;\\n          }\\n          sibling.C = parent.C;\\n          parent.C = sibling.R.C = false;\\n          RedBlackRotateLeft(this, parent);\\n          node = this._;\\n          break;\\n        }\\n      } else {\\n        sibling = parent.L;\\n        if (sibling.C) {\\n          sibling.C = false;\\n          parent.C = true;\\n          RedBlackRotateRight(this, parent);\\n          sibling = parent.L;\\n        }\\n        if ((sibling.L && sibling.L.C)\\n          || (sibling.R && sibling.R.C)) {\\n          if (!sibling.L || !sibling.L.C) {\\n            sibling.R.C = false;\\n            sibling.C = true;\\n            RedBlackRotateLeft(this, sibling);\\n            sibling = parent.L;\\n          }\\n          sibling.C = parent.C;\\n          parent.C = sibling.L.C = false;\\n          RedBlackRotateRight(this, parent);\\n          node = this._;\\n          break;\\n        }\\n      }\\n      sibling.C = true;\\n      node = parent;\\n      parent = parent.U;\\n    } while (!node.C);\\n\\n    if (node) node.C = false;\\n  }\\n};\\n\\nfunction RedBlackRotateLeft(tree, node) {\\n  var p = node,\\n      q = node.R,\\n      parent = p.U;\\n\\n  if (parent) {\\n    if (parent.L === p) parent.L = q;\\n    else parent.R = q;\\n  } else {\\n    tree._ = q;\\n  }\\n\\n  q.U = parent;\\n  p.U = q;\\n  p.R = q.L;\\n  if (p.R) p.R.U = p;\\n  q.L = p;\\n}\\n\\nfunction RedBlackRotateRight(tree, node) {\\n  var p = node,\\n      q = node.L,\\n      parent = p.U;\\n\\n  if (parent) {\\n    if (parent.L === p) parent.L = q;\\n    else parent.R = q;\\n  } else {\\n    tree._ = q;\\n  }\\n\\n  q.U = parent;\\n  p.U = q;\\n  p.L = q.R;\\n  if (p.L) p.L.U = p;\\n  q.R = p;\\n}\\n\\nfunction RedBlackFirst(node) {\\n  while (node.L) node = node.L;\\n  return node;\\n}\\n\\n/* harmony default export */ var src_RedBlackTree = (RedBlackTree);\\n\\n// CONCATENATED MODULE: ./node_modules/d3-voronoi/src/Edge.js\\n\\n\\nfunction Edge_createEdge(left, right, v0, v1) {\\n  var edge = [null, null],\\n      index = Diagram_edges.push(edge) - 1;\\n  edge.left = left;\\n  edge.right = right;\\n  if (v0) Edge_setEdgeEnd(edge, left, right, v0);\\n  if (v1) Edge_setEdgeEnd(edge, right, left, v1);\\n  Diagram_cells[left.index].halfedges.push(index);\\n  Diagram_cells[right.index].halfedges.push(index);\\n  return edge;\\n}\\n\\nfunction Edge_createBorderEdge(left, v0, v1) {\\n  var edge = [v0, v1];\\n  edge.left = left;\\n  return edge;\\n}\\n\\nfunction Edge_setEdgeEnd(edge, left, right, vertex) {\\n  if (!edge[0] && !edge[1]) {\\n    edge[0] = vertex;\\n    edge.left = left;\\n    edge.right = right;\\n  } else if (edge.left === right) {\\n    edge[1] = vertex;\\n  } else {\\n    edge[0] = vertex;\\n  }\\n}\\n\\n// Liang–Barsky line clipping.\\nfunction Edge_clipEdge(edge, x0, y0, x1, y1) {\\n  var a = edge[0],\\n      b = edge[1],\\n      ax = a[0],\\n      ay = a[1],\\n      bx = b[0],\\n      by = b[1],\\n      t0 = 0,\\n      t1 = 1,\\n      dx = bx - ax,\\n      dy = by - ay,\\n      r;\\n\\n  r = x0 - ax;\\n  if (!dx && r > 0) return;\\n  r /= dx;\\n  if (dx < 0) {\\n    if (r < t0) return;\\n    if (r < t1) t1 = r;\\n  } else if (dx > 0) {\\n    if (r > t1) return;\\n    if (r > t0) t0 = r;\\n  }\\n\\n  r = x1 - ax;\\n  if (!dx && r < 0) return;\\n  r /= dx;\\n  if (dx < 0) {\\n    if (r > t1) return;\\n    if (r > t0) t0 = r;\\n  } else if (dx > 0) {\\n    if (r < t0) return;\\n    if (r < t1) t1 = r;\\n  }\\n\\n  r = y0 - ay;\\n  if (!dy && r > 0) return;\\n  r /= dy;\\n  if (dy < 0) {\\n    if (r < t0) return;\\n    if (r < t1) t1 = r;\\n  } else if (dy > 0) {\\n    if (r > t1) return;\\n    if (r > t0) t0 = r;\\n  }\\n\\n  r = y1 - ay;\\n  if (!dy && r < 0) return;\\n  r /= dy;\\n  if (dy < 0) {\\n    if (r > t1) return;\\n    if (r > t0) t0 = r;\\n  } else if (dy > 0) {\\n    if (r < t0) return;\\n    if (r < t1) t1 = r;\\n  }\\n\\n  if (!(t0 > 0) && !(t1 < 1)) return true; // TODO Better check?\\n\\n  if (t0 > 0) edge[0] = [ax + t0 * dx, ay + t0 * dy];\\n  if (t1 < 1) edge[1] = [ax + t1 * dx, ay + t1 * dy];\\n  return true;\\n}\\n\\nfunction Edge_connectEdge(edge, x0, y0, x1, y1) {\\n  var v1 = edge[1];\\n  if (v1) return true;\\n\\n  var v0 = edge[0],\\n      left = edge.left,\\n      right = edge.right,\\n      lx = left[0],\\n      ly = left[1],\\n      rx = right[0],\\n      ry = right[1],\\n      fx = (lx + rx) / 2,\\n      fy = (ly + ry) / 2,\\n      fm,\\n      fb;\\n\\n  if (ry === ly) {\\n    if (fx < x0 || fx >= x1) return;\\n    if (lx > rx) {\\n      if (!v0) v0 = [fx, y0];\\n      else if (v0[1] >= y1) return;\\n      v1 = [fx, y1];\\n    } else {\\n      if (!v0) v0 = [fx, y1];\\n      else if (v0[1] < y0) return;\\n      v1 = [fx, y0];\\n    }\\n  } else {\\n    fm = (lx - rx) / (ry - ly);\\n    fb = fy - fm * fx;\\n    if (fm < -1 || fm > 1) {\\n      if (lx > rx) {\\n        if (!v0) v0 = [(y0 - fb) / fm, y0];\\n        else if (v0[1] >= y1) return;\\n        v1 = [(y1 - fb) / fm, y1];\\n      } else {\\n        if (!v0) v0 = [(y1 - fb) / fm, y1];\\n        else if (v0[1] < y0) return;\\n        v1 = [(y0 - fb) / fm, y0];\\n      }\\n    } else {\\n      if (ly < ry) {\\n        if (!v0) v0 = [x0, fm * x0 + fb];\\n        else if (v0[0] >= x1) return;\\n        v1 = [x1, fm * x1 + fb];\\n      } else {\\n        if (!v0) v0 = [x1, fm * x1 + fb];\\n        else if (v0[0] < x0) return;\\n        v1 = [x0, fm * x0 + fb];\\n      }\\n    }\\n  }\\n\\n  edge[0] = v0;\\n  edge[1] = v1;\\n  return true;\\n}\\n\\nfunction Edge_clipEdges(x0, y0, x1, y1) {\\n  var i = Diagram_edges.length,\\n      edge;\\n\\n  while (i--) {\\n    if (!Edge_connectEdge(edge = Diagram_edges[i], x0, y0, x1, y1)\\n        || !Edge_clipEdge(edge, x0, y0, x1, y1)\\n        || !(Math.abs(edge[0][0] - edge[1][0]) > Diagram_epsilon\\n            || Math.abs(edge[0][1] - edge[1][1]) > Diagram_epsilon)) {\\n      delete Diagram_edges[i];\\n    }\\n  }\\n}\\n\\n// CONCATENATED MODULE: ./node_modules/d3-voronoi/src/Cell.js\\n\\n\\n\\nfunction Cell_createCell(site) {\\n  return Diagram_cells[site.index] = {\\n    site: site,\\n    halfedges: []\\n  };\\n}\\n\\nfunction Cell_cellHalfedgeAngle(cell, edge) {\\n  var site = cell.site,\\n      va = edge.left,\\n      vb = edge.right;\\n  if (site === vb) vb = va, va = site;\\n  if (vb) return Math.atan2(vb[1] - va[1], vb[0] - va[0]);\\n  if (site === va) va = edge[1], vb = edge[0];\\n  else va = edge[0], vb = edge[1];\\n  return Math.atan2(va[0] - vb[0], vb[1] - va[1]);\\n}\\n\\nfunction Cell_cellHalfedgeStart(cell, edge) {\\n  return edge[+(edge.left !== cell.site)];\\n}\\n\\nfunction Cell_cellHalfedgeEnd(cell, edge) {\\n  return edge[+(edge.left === cell.site)];\\n}\\n\\nfunction Cell_sortCellHalfedges() {\\n  for (var i = 0, n = Diagram_cells.length, cell, halfedges, j, m; i < n; ++i) {\\n    if ((cell = Diagram_cells[i]) && (m = (halfedges = cell.halfedges).length)) {\\n      var index = new Array(m),\\n          array = new Array(m);\\n      for (j = 0; j < m; ++j) index[j] = j, array[j] = Cell_cellHalfedgeAngle(cell, Diagram_edges[halfedges[j]]);\\n      index.sort(function(i, j) { return array[j] - array[i]; });\\n      for (j = 0; j < m; ++j) array[j] = halfedges[index[j]];\\n      for (j = 0; j < m; ++j) halfedges[j] = array[j];\\n    }\\n  }\\n}\\n\\nfunction Cell_clipCells(x0, y0, x1, y1) {\\n  var nCells = Diagram_cells.length,\\n      iCell,\\n      cell,\\n      site,\\n      iHalfedge,\\n      halfedges,\\n      nHalfedges,\\n      start,\\n      startX,\\n      startY,\\n      end,\\n      endX,\\n      endY,\\n      cover = true;\\n\\n  for (iCell = 0; iCell < nCells; ++iCell) {\\n    if (cell = Diagram_cells[iCell]) {\\n      site = cell.site;\\n      halfedges = cell.halfedges;\\n      iHalfedge = halfedges.length;\\n\\n      // Remove any dangling clipped edges.\\n      while (iHalfedge--) {\\n        if (!Diagram_edges[halfedges[iHalfedge]]) {\\n          halfedges.splice(iHalfedge, 1);\\n        }\\n      }\\n\\n      // Insert any border edges as necessary.\\n      iHalfedge = 0, nHalfedges = halfedges.length;\\n      while (iHalfedge < nHalfedges) {\\n        end = Cell_cellHalfedgeEnd(cell, Diagram_edges[halfedges[iHalfedge]]), endX = end[0], endY = end[1];\\n        start = Cell_cellHalfedgeStart(cell, Diagram_edges[halfedges[++iHalfedge % nHalfedges]]), startX = start[0], startY = start[1];\\n        if (Math.abs(endX - startX) > Diagram_epsilon || Math.abs(endY - startY) > Diagram_epsilon) {\\n          halfedges.splice(iHalfedge, 0, Diagram_edges.push(Edge_createBorderEdge(site, end,\\n              Math.abs(endX - x0) < Diagram_epsilon && y1 - endY > Diagram_epsilon ? [x0, Math.abs(startX - x0) < Diagram_epsilon ? startY : y1]\\n              : Math.abs(endY - y1) < Diagram_epsilon && x1 - endX > Diagram_epsilon ? [Math.abs(startY - y1) < Diagram_epsilon ? startX : x1, y1]\\n              : Math.abs(endX - x1) < Diagram_epsilon && endY - y0 > Diagram_epsilon ? [x1, Math.abs(startX - x1) < Diagram_epsilon ? startY : y0]\\n              : Math.abs(endY - y0) < Diagram_epsilon && endX - x0 > Diagram_epsilon ? [Math.abs(startY - y0) < Diagram_epsilon ? startX : x0, y0]\\n              : null)) - 1);\\n          ++nHalfedges;\\n        }\\n      }\\n\\n      if (nHalfedges) cover = false;\\n    }\\n  }\\n\\n  // If there weren’t any edges, have the closest site cover the extent.\\n  // It doesn’t matter which corner of the extent we measure!\\n  if (cover) {\\n    var dx, dy, d2, dc = Infinity;\\n\\n    for (iCell = 0, cover = null; iCell < nCells; ++iCell) {\\n      if (cell = Diagram_cells[iCell]) {\\n        site = cell.site;\\n        dx = site[0] - x0;\\n        dy = site[1] - y0;\\n        d2 = dx * dx + dy * dy;\\n        if (d2 < dc) dc = d2, cover = cell;\\n      }\\n    }\\n\\n    if (cover) {\\n      var v00 = [x0, y0], v01 = [x0, y1], v11 = [x1, y1], v10 = [x1, y0];\\n      cover.halfedges.push(\\n        Diagram_edges.push(Edge_createBorderEdge(site = cover.site, v00, v01)) - 1,\\n        Diagram_edges.push(Edge_createBorderEdge(site, v01, v11)) - 1,\\n        Diagram_edges.push(Edge_createBorderEdge(site, v11, v10)) - 1,\\n        Diagram_edges.push(Edge_createBorderEdge(site, v10, v00)) - 1\\n      );\\n    }\\n  }\\n\\n  // Lastly delete any cells with no edges; these were entirely clipped.\\n  for (iCell = 0; iCell < nCells; ++iCell) {\\n    if (cell = Diagram_cells[iCell]) {\\n      if (!cell.halfedges.length) {\\n        delete Diagram_cells[iCell];\\n      }\\n    }\\n  }\\n}\\n\\n// CONCATENATED MODULE: ./node_modules/d3-voronoi/src/Circle.js\\n\\n\\n\\nvar Circle_circlePool = [];\\n\\nvar Circle_firstCircle;\\n\\nfunction Circle_Circle() {\\n  RedBlackNode(this);\\n  this.x =\\n  this.y =\\n  this.arc =\\n  this.site =\\n  this.cy = null;\\n}\\n\\nfunction Circle_attachCircle(arc) {\\n  var lArc = arc.P,\\n      rArc = arc.N;\\n\\n  if (!lArc || !rArc) return;\\n\\n  var lSite = lArc.site,\\n      cSite = arc.site,\\n      rSite = rArc.site;\\n\\n  if (lSite === rSite) return;\\n\\n  var bx = cSite[0],\\n      by = cSite[1],\\n      ax = lSite[0] - bx,\\n      ay = lSite[1] - by,\\n      cx = rSite[0] - bx,\\n      cy = rSite[1] - by;\\n\\n  var d = 2 * (ax * cy - ay * cx);\\n  if (d >= -Diagram_epsilon2) return;\\n\\n  var ha = ax * ax + ay * ay,\\n      hc = cx * cx + cy * cy,\\n      x = (cy * ha - ay * hc) / d,\\n      y = (ax * hc - cx * ha) / d;\\n\\n  var circle = Circle_circlePool.pop() || new Circle_Circle;\\n  circle.arc = arc;\\n  circle.site = cSite;\\n  circle.x = x + bx;\\n  circle.y = (circle.cy = y + by) + Math.sqrt(x * x + y * y); // y bottom\\n\\n  arc.circle = circle;\\n\\n  var before = null,\\n      node = Diagram_circles._;\\n\\n  while (node) {\\n    if (circle.y < node.y || (circle.y === node.y && circle.x <= node.x)) {\\n      if (node.L) node = node.L;\\n      else { before = node.P; break; }\\n    } else {\\n      if (node.R) node = node.R;\\n      else { before = node; break; }\\n    }\\n  }\\n\\n  Diagram_circles.insert(before, circle);\\n  if (!before) Circle_firstCircle = circle;\\n}\\n\\nfunction Circle_detachCircle(arc) {\\n  var circle = arc.circle;\\n  if (circle) {\\n    if (!circle.P) Circle_firstCircle = circle.N;\\n    Diagram_circles.remove(circle);\\n    Circle_circlePool.push(circle);\\n    RedBlackNode(circle);\\n    arc.circle = null;\\n  }\\n}\\n\\n// CONCATENATED MODULE: ./node_modules/d3-voronoi/src/Beach.js\\n\\n\\n\\n\\n\\n\\nvar Beach_beachPool = [];\\n\\nfunction Beach_Beach() {\\n  RedBlackNode(this);\\n  this.edge =\\n  this.site =\\n  this.circle = null;\\n}\\n\\nfunction Beach_createBeach(site) {\\n  var beach = Beach_beachPool.pop() || new Beach_Beach;\\n  beach.site = site;\\n  return beach;\\n}\\n\\nfunction Beach_detachBeach(beach) {\\n  Circle_detachCircle(beach);\\n  Diagram_beaches.remove(beach);\\n  Beach_beachPool.push(beach);\\n  RedBlackNode(beach);\\n}\\n\\nfunction Beach_removeBeach(beach) {\\n  var circle = beach.circle,\\n      x = circle.x,\\n      y = circle.cy,\\n      vertex = [x, y],\\n      previous = beach.P,\\n      next = beach.N,\\n      disappearing = [beach];\\n\\n  Beach_detachBeach(beach);\\n\\n  var lArc = previous;\\n  while (lArc.circle\\n      && Math.abs(x - lArc.circle.x) < Diagram_epsilon\\n      && Math.abs(y - lArc.circle.cy) < Diagram_epsilon) {\\n    previous = lArc.P;\\n    disappearing.unshift(lArc);\\n    Beach_detachBeach(lArc);\\n    lArc = previous;\\n  }\\n\\n  disappearing.unshift(lArc);\\n  Circle_detachCircle(lArc);\\n\\n  var rArc = next;\\n  while (rArc.circle\\n      && Math.abs(x - rArc.circle.x) < Diagram_epsilon\\n      && Math.abs(y - rArc.circle.cy) < Diagram_epsilon) {\\n    next = rArc.N;\\n    disappearing.push(rArc);\\n    Beach_detachBeach(rArc);\\n    rArc = next;\\n  }\\n\\n  disappearing.push(rArc);\\n  Circle_detachCircle(rArc);\\n\\n  var nArcs = disappearing.length,\\n      iArc;\\n  for (iArc = 1; iArc < nArcs; ++iArc) {\\n    rArc = disappearing[iArc];\\n    lArc = disappearing[iArc - 1];\\n    Edge_setEdgeEnd(rArc.edge, lArc.site, rArc.site, vertex);\\n  }\\n\\n  lArc = disappearing[0];\\n  rArc = disappearing[nArcs - 1];\\n  rArc.edge = Edge_createEdge(lArc.site, rArc.site, null, vertex);\\n\\n  Circle_attachCircle(lArc);\\n  Circle_attachCircle(rArc);\\n}\\n\\nfunction Beach_addBeach(site) {\\n  var x = site[0],\\n      directrix = site[1],\\n      lArc,\\n      rArc,\\n      dxl,\\n      dxr,\\n      node = Diagram_beaches._;\\n\\n  while (node) {\\n    dxl = Beach_leftBreakPoint(node, directrix) - x;\\n    if (dxl > Diagram_epsilon) node = node.L; else {\\n      dxr = x - Beach_rightBreakPoint(node, directrix);\\n      if (dxr > Diagram_epsilon) {\\n        if (!node.R) {\\n          lArc = node;\\n          break;\\n        }\\n        node = node.R;\\n      } else {\\n        if (dxl > -Diagram_epsilon) {\\n          lArc = node.P;\\n          rArc = node;\\n        } else if (dxr > -Diagram_epsilon) {\\n          lArc = node;\\n          rArc = node.N;\\n        } else {\\n          lArc = rArc = node;\\n        }\\n        break;\\n      }\\n    }\\n  }\\n\\n  Cell_createCell(site);\\n  var newArc = Beach_createBeach(site);\\n  Diagram_beaches.insert(lArc, newArc);\\n\\n  if (!lArc && !rArc) return;\\n\\n  if (lArc === rArc) {\\n    Circle_detachCircle(lArc);\\n    rArc = Beach_createBeach(lArc.site);\\n    Diagram_beaches.insert(newArc, rArc);\\n    newArc.edge = rArc.edge = Edge_createEdge(lArc.site, newArc.site);\\n    Circle_attachCircle(lArc);\\n    Circle_attachCircle(rArc);\\n    return;\\n  }\\n\\n  if (!rArc) { // && lArc\\n    newArc.edge = Edge_createEdge(lArc.site, newArc.site);\\n    return;\\n  }\\n\\n  // else lArc !== rArc\\n  Circle_detachCircle(lArc);\\n  Circle_detachCircle(rArc);\\n\\n  var lSite = lArc.site,\\n      ax = lSite[0],\\n      ay = lSite[1],\\n      bx = site[0] - ax,\\n      by = site[1] - ay,\\n      rSite = rArc.site,\\n      cx = rSite[0] - ax,\\n      cy = rSite[1] - ay,\\n      d = 2 * (bx * cy - by * cx),\\n      hb = bx * bx + by * by,\\n      hc = cx * cx + cy * cy,\\n      vertex = [(cy * hb - by * hc) / d + ax, (bx * hc - cx * hb) / d + ay];\\n\\n  Edge_setEdgeEnd(rArc.edge, lSite, rSite, vertex);\\n  newArc.edge = Edge_createEdge(lSite, site, null, vertex);\\n  rArc.edge = Edge_createEdge(site, rSite, null, vertex);\\n  Circle_attachCircle(lArc);\\n  Circle_attachCircle(rArc);\\n}\\n\\nfunction Beach_leftBreakPoint(arc, directrix) {\\n  var site = arc.site,\\n      rfocx = site[0],\\n      rfocy = site[1],\\n      pby2 = rfocy - directrix;\\n\\n  if (!pby2) return rfocx;\\n\\n  var lArc = arc.P;\\n  if (!lArc) return -Infinity;\\n\\n  site = lArc.site;\\n  var lfocx = site[0],\\n      lfocy = site[1],\\n      plby2 = lfocy - directrix;\\n\\n  if (!plby2) return lfocx;\\n\\n  var hl = lfocx - rfocx,\\n      aby2 = 1 / pby2 - 1 / plby2,\\n      b = hl / plby2;\\n\\n  if (aby2) return (-b + Math.sqrt(b * b - 2 * aby2 * (hl * hl / (-2 * plby2) - lfocy + plby2 / 2 + rfocy - pby2 / 2))) / aby2 + rfocx;\\n\\n  return (rfocx + lfocx) / 2;\\n}\\n\\nfunction Beach_rightBreakPoint(arc, directrix) {\\n  var rArc = arc.N;\\n  if (rArc) return Beach_leftBreakPoint(rArc, directrix);\\n  var site = arc.site;\\n  return site[1] === directrix ? site[0] : Infinity;\\n}\\n\\n// CONCATENATED MODULE: ./node_modules/d3-voronoi/src/Diagram.js\\n\\n\\n\\n\\n\\n\\nvar Diagram_epsilon = 1e-6;\\nvar Diagram_epsilon2 = 1e-12;\\nvar Diagram_beaches;\\nvar Diagram_cells;\\nvar Diagram_circles;\\nvar Diagram_edges;\\n\\nfunction Diagram_triangleArea(a, b, c) {\\n  return (a[0] - c[0]) * (b[1] - a[1]) - (a[0] - b[0]) * (c[1] - a[1]);\\n}\\n\\nfunction Diagram_lexicographic(a, b) {\\n  return b[1] - a[1]\\n      || b[0] - a[0];\\n}\\n\\nfunction Diagram_Diagram(sites, extent) {\\n  var site = sites.sort(Diagram_lexicographic).pop(),\\n      x,\\n      y,\\n      circle;\\n\\n  Diagram_edges = [];\\n  Diagram_cells = new Array(sites.length);\\n  Diagram_beaches = new src_RedBlackTree;\\n  Diagram_circles = new src_RedBlackTree;\\n\\n  while (true) {\\n    circle = Circle_firstCircle;\\n    if (site && (!circle || site[1] < circle.y || (site[1] === circle.y && site[0] < circle.x))) {\\n      if (site[0] !== x || site[1] !== y) {\\n        Beach_addBeach(site);\\n        x = site[0], y = site[1];\\n      }\\n      site = sites.pop();\\n    } else if (circle) {\\n      Beach_removeBeach(circle.arc);\\n    } else {\\n      break;\\n    }\\n  }\\n\\n  Cell_sortCellHalfedges();\\n\\n  if (extent) {\\n    var x0 = +extent[0][0],\\n        y0 = +extent[0][1],\\n        x1 = +extent[1][0],\\n        y1 = +extent[1][1];\\n    Edge_clipEdges(x0, y0, x1, y1);\\n    Cell_clipCells(x0, y0, x1, y1);\\n  }\\n\\n  this.edges = Diagram_edges;\\n  this.cells = Diagram_cells;\\n\\n  Diagram_beaches =\\n  Diagram_circles =\\n  Diagram_edges =\\n  Diagram_cells = null;\\n}\\n\\nDiagram_Diagram.prototype = {\\n  constructor: Diagram_Diagram,\\n\\n  polygons: function() {\\n    var edges = this.edges;\\n\\n    return this.cells.map(function(cell) {\\n      var polygon = cell.halfedges.map(function(i) { return Cell_cellHalfedgeStart(cell, edges[i]); });\\n      polygon.data = cell.site.data;\\n      return polygon;\\n    });\\n  },\\n\\n  triangles: function() {\\n    var triangles = [],\\n        edges = this.edges;\\n\\n    this.cells.forEach(function(cell, i) {\\n      if (!(m = (halfedges = cell.halfedges).length)) return;\\n      var site = cell.site,\\n          halfedges,\\n          j = -1,\\n          m,\\n          s0,\\n          e1 = edges[halfedges[m - 1]],\\n          s1 = e1.left === site ? e1.right : e1.left;\\n\\n      while (++j < m) {\\n        s0 = s1;\\n        e1 = edges[halfedges[j]];\\n        s1 = e1.left === site ? e1.right : e1.left;\\n        if (s0 && s1 && i < s0.index && i < s1.index && Diagram_triangleArea(site, s0, s1) < 0) {\\n          triangles.push([site.data, s0.data, s1.data]);\\n        }\\n      }\\n    });\\n\\n    return triangles;\\n  },\\n\\n  links: function() {\\n    return this.edges.filter(function(edge) {\\n      return edge.right;\\n    }).map(function(edge) {\\n      return {\\n        source: edge.left.data,\\n        target: edge.right.data\\n      };\\n    });\\n  },\\n\\n  find: function(x, y, radius) {\\n    var that = this, i0, i1 = that._found || 0, n = that.cells.length, cell;\\n\\n    // Use the previously-found cell, or start with an arbitrary one.\\n    while (!(cell = that.cells[i1])) if (++i1 >= n) return null;\\n    var dx = x - cell.site[0], dy = y - cell.site[1], d2 = dx * dx + dy * dy;\\n\\n    // Traverse the half-edges to find a closer cell, if any.\\n    do {\\n      cell = that.cells[i0 = i1], i1 = null;\\n      cell.halfedges.forEach(function(e) {\\n        var edge = that.edges[e], v = edge.left;\\n        if ((v === cell.site || !v) && !(v = edge.right)) return;\\n        var vx = x - v[0], vy = y - v[1], v2 = vx * vx + vy * vy;\\n        if (v2 < d2) d2 = v2, i1 = v.index;\\n      });\\n    } while (i1 !== null);\\n\\n    that._found = i0;\\n\\n    return radius == null || d2 <= radius * radius ? cell.site : null;\\n  }\\n}\\n\\n// CONCATENATED MODULE: ./node_modules/d3-voronoi/src/voronoi.js\\n\\n\\n\\n\\n/* harmony default export */ var src_voronoi = (function() {\\n  var x = src_point_x,\\n      y = src_point_y,\\n      extent = null;\\n\\n  function voronoi(data) {\\n    return new Diagram_Diagram(data.map(function(d, i) {\\n      var s = [Math.round(x(d, i, data) / Diagram_epsilon) * Diagram_epsilon, Math.round(y(d, i, data) / Diagram_epsilon) * Diagram_epsilon];\\n      s.index = i;\\n      s.data = d;\\n      return s;\\n    }), extent);\\n  }\\n\\n  voronoi.polygons = function(data) {\\n    return voronoi(data).polygons();\\n  };\\n\\n  voronoi.links = function(data) {\\n    return voronoi(data).links();\\n  };\\n\\n  voronoi.triangles = function(data) {\\n    return voronoi(data).triangles();\\n  };\\n\\n  voronoi.x = function(_) {\\n    return arguments.length ? (x = typeof _ === \"function\" ? _ : d3_voronoi_src_constant(+_), voronoi) : x;\\n  };\\n\\n  voronoi.y = function(_) {\\n    return arguments.length ? (y = typeof _ === \"function\" ? _ : d3_voronoi_src_constant(+_), voronoi) : y;\\n  };\\n\\n  voronoi.extent = function(_) {\\n    return arguments.length ? (extent = _ == null ? null : [[+_[0][0], +_[0][1]], [+_[1][0], +_[1][1]]], voronoi) : extent && [[extent[0][0], extent[0][1]], [extent[1][0], extent[1][1]]];\\n  };\\n\\n  voronoi.size = function(_) {\\n    return arguments.length ? (extent = _ == null ? null : [[0, 0], [+_[0], +_[1]]], voronoi) : extent && [extent[1][0] - extent[0][0], extent[1][1] - extent[0][1]];\\n  };\\n\\n  return voronoi;\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-voronoi/index.js\\n\\n\\n// CONCATENATED MODULE: ./node_modules/d3-zoom/src/constant.js\\n/* harmony default export */ var d3_zoom_src_constant = (function(x) {\\n  return function() {\\n    return x;\\n  };\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-zoom/src/event.js\\nfunction ZoomEvent(target, type, transform) {\\n  this.target = target;\\n  this.type = type;\\n  this.transform = transform;\\n}\\n\\n// CONCATENATED MODULE: ./node_modules/d3-zoom/src/transform.js\\nfunction Transform(k, x, y) {\\n  this.k = k;\\n  this.x = x;\\n  this.y = y;\\n}\\n\\nTransform.prototype = {\\n  constructor: Transform,\\n  scale: function(k) {\\n    return k === 1 ? this : new Transform(this.k * k, this.x, this.y);\\n  },\\n  translate: function(x, y) {\\n    return x === 0 & y === 0 ? this : new Transform(this.k, this.x + this.k * x, this.y + this.k * y);\\n  },\\n  apply: function(point) {\\n    return [point[0] * this.k + this.x, point[1] * this.k + this.y];\\n  },\\n  applyX: function(x) {\\n    return x * this.k + this.x;\\n  },\\n  applyY: function(y) {\\n    return y * this.k + this.y;\\n  },\\n  invert: function(location) {\\n    return [(location[0] - this.x) / this.k, (location[1] - this.y) / this.k];\\n  },\\n  invertX: function(x) {\\n    return (x - this.x) / this.k;\\n  },\\n  invertY: function(y) {\\n    return (y - this.y) / this.k;\\n  },\\n  rescaleX: function(x) {\\n    return x.copy().domain(x.range().map(this.invertX, this).map(x.invert, x));\\n  },\\n  rescaleY: function(y) {\\n    return y.copy().domain(y.range().map(this.invertY, this).map(y.invert, y));\\n  },\\n  toString: function() {\\n    return \"translate(\" + this.x + \",\" + this.y + \") scale(\" + this.k + \")\";\\n  }\\n};\\n\\nvar transform_identity = new Transform(1, 0, 0);\\n\\ntransform_transform.prototype = Transform.prototype;\\n\\nfunction transform_transform(node) {\\n  return node.__zoom || transform_identity;\\n}\\n\\n// CONCATENATED MODULE: ./node_modules/d3-zoom/src/noevent.js\\n\\n\\nfunction d3_zoom_src_noevent_nopropagation() {\\n  on_event.stopImmediatePropagation();\\n}\\n\\n/* harmony default export */ var d3_zoom_src_noevent = (function() {\\n  on_event.preventDefault();\\n  on_event.stopImmediatePropagation();\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-zoom/src/zoom.js\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n// Ignore right-click, since that should open the context menu.\\nfunction zoom_defaultFilter() {\\n  return !on_event.button;\\n}\\n\\nfunction zoom_defaultExtent() {\\n  var e = this, w, h;\\n  if (e instanceof SVGElement) {\\n    e = e.ownerSVGElement || e;\\n    w = e.width.baseVal.value;\\n    h = e.height.baseVal.value;\\n  } else {\\n    w = e.clientWidth;\\n    h = e.clientHeight;\\n  }\\n  return [[0, 0], [w, h]];\\n}\\n\\nfunction zoom_defaultTransform() {\\n  return this.__zoom || transform_identity;\\n}\\n\\nfunction zoom_defaultWheelDelta() {\\n  return -on_event.deltaY * (on_event.deltaMode ? 120 : 1) / 500;\\n}\\n\\nfunction zoom_defaultTouchable() {\\n  return \"ontouchstart\" in this;\\n}\\n\\nfunction zoom_defaultConstrain(transform, extent, translateExtent) {\\n  var dx0 = transform.invertX(extent[0][0]) - translateExtent[0][0],\\n      dx1 = transform.invertX(extent[1][0]) - translateExtent[1][0],\\n      dy0 = transform.invertY(extent[0][1]) - translateExtent[0][1],\\n      dy1 = transform.invertY(extent[1][1]) - translateExtent[1][1];\\n  return transform.translate(\\n    dx1 > dx0 ? (dx0 + dx1) / 2 : Math.min(0, dx0) || Math.max(0, dx1),\\n    dy1 > dy0 ? (dy0 + dy1) / 2 : Math.min(0, dy0) || Math.max(0, dy1)\\n  );\\n}\\n\\n/* harmony default export */ var d3_zoom_src_zoom = (function() {\\n  var filter = zoom_defaultFilter,\\n      extent = zoom_defaultExtent,\\n      constrain = zoom_defaultConstrain,\\n      wheelDelta = zoom_defaultWheelDelta,\\n      touchable = zoom_defaultTouchable,\\n      scaleExtent = [0, Infinity],\\n      translateExtent = [[-Infinity, -Infinity], [Infinity, Infinity]],\\n      duration = 250,\\n      interpolate = src_zoom,\\n      gestures = [],\\n      listeners = src_dispatch(\"start\", \"zoom\", \"end\"),\\n      touchstarting,\\n      touchending,\\n      touchDelay = 500,\\n      wheelDelay = 150,\\n      clickDistance2 = 0;\\n\\n  function zoom(selection) {\\n    selection\\n        .property(\"__zoom\", zoom_defaultTransform)\\n        .on(\"wheel.zoom\", wheeled)\\n        .on(\"mousedown.zoom\", mousedowned)\\n        .on(\"dblclick.zoom\", dblclicked)\\n      .filter(touchable)\\n        .on(\"touchstart.zoom\", touchstarted)\\n        .on(\"touchmove.zoom\", touchmoved)\\n        .on(\"touchend.zoom touchcancel.zoom\", touchended)\\n        .style(\"touch-action\", \"none\")\\n        .style(\"-webkit-tap-highlight-color\", \"rgba(0,0,0,0)\");\\n  }\\n\\n  zoom.transform = function(collection, transform) {\\n    var selection = collection.selection ? collection.selection() : collection;\\n    selection.property(\"__zoom\", zoom_defaultTransform);\\n    if (collection !== selection) {\\n      schedule(collection, transform);\\n    } else {\\n      selection.interrupt().each(function() {\\n        gesture(this, arguments)\\n            .start()\\n            .zoom(null, typeof transform === \"function\" ? transform.apply(this, arguments) : transform)\\n            .end();\\n      });\\n    }\\n  };\\n\\n  zoom.scaleBy = function(selection, k) {\\n    zoom.scaleTo(selection, function() {\\n      var k0 = this.__zoom.k,\\n          k1 = typeof k === \"function\" ? k.apply(this, arguments) : k;\\n      return k0 * k1;\\n    });\\n  };\\n\\n  zoom.scaleTo = function(selection, k) {\\n    zoom.transform(selection, function() {\\n      var e = extent.apply(this, arguments),\\n          t0 = this.__zoom,\\n          p0 = centroid(e),\\n          p1 = t0.invert(p0),\\n          k1 = typeof k === \"function\" ? k.apply(this, arguments) : k;\\n      return constrain(translate(scale(t0, k1), p0, p1), e, translateExtent);\\n    });\\n  };\\n\\n  zoom.translateBy = function(selection, x, y) {\\n    zoom.transform(selection, function() {\\n      return constrain(this.__zoom.translate(\\n        typeof x === \"function\" ? x.apply(this, arguments) : x,\\n        typeof y === \"function\" ? y.apply(this, arguments) : y\\n      ), extent.apply(this, arguments), translateExtent);\\n    });\\n  };\\n\\n  zoom.translateTo = function(selection, x, y) {\\n    zoom.transform(selection, function() {\\n      var e = extent.apply(this, arguments),\\n          t = this.__zoom,\\n          p = centroid(e);\\n      return constrain(transform_identity.translate(p[0], p[1]).scale(t.k).translate(\\n        typeof x === \"function\" ? -x.apply(this, arguments) : -x,\\n        typeof y === \"function\" ? -y.apply(this, arguments) : -y\\n      ), e, translateExtent);\\n    });\\n  };\\n\\n  function scale(transform, k) {\\n    k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], k));\\n    return k === transform.k ? transform : new Transform(k, transform.x, transform.y);\\n  }\\n\\n  function translate(transform, p0, p1) {\\n    var x = p0[0] - p1[0] * transform.k, y = p0[1] - p1[1] * transform.k;\\n    return x === transform.x && y === transform.y ? transform : new Transform(transform.k, x, y);\\n  }\\n\\n  function centroid(extent) {\\n    return [(+extent[0][0] + +extent[1][0]) / 2, (+extent[0][1] + +extent[1][1]) / 2];\\n  }\\n\\n  function schedule(transition, transform, center) {\\n    transition\\n        .on(\"start.zoom\", function() { gesture(this, arguments).start(); })\\n        .on(\"interrupt.zoom end.zoom\", function() { gesture(this, arguments).end(); })\\n        .tween(\"zoom\", function() {\\n          var that = this,\\n              args = arguments,\\n              g = gesture(that, args),\\n              e = extent.apply(that, args),\\n              p = center || centroid(e),\\n              w = Math.max(e[1][0] - e[0][0], e[1][1] - e[0][1]),\\n              a = that.__zoom,\\n              b = typeof transform === \"function\" ? transform.apply(that, args) : transform,\\n              i = interpolate(a.invert(p).concat(w / a.k), b.invert(p).concat(w / b.k));\\n          return function(t) {\\n            if (t === 1) t = b; // Avoid rounding error on end.\\n            else { var l = i(t), k = w / l[2]; t = new Transform(k, p[0] - l[0] * k, p[1] - l[1] * k); }\\n            g.zoom(null, t);\\n          };\\n        });\\n  }\\n\\n  function gesture(that, args) {\\n    for (var i = 0, n = gestures.length, g; i < n; ++i) {\\n      if ((g = gestures[i]).that === that) {\\n        return g;\\n      }\\n    }\\n    return new Gesture(that, args);\\n  }\\n\\n  function Gesture(that, args) {\\n    this.that = that;\\n    this.args = args;\\n    this.index = -1;\\n    this.active = 0;\\n    this.extent = extent.apply(that, args);\\n  }\\n\\n  Gesture.prototype = {\\n    start: function() {\\n      if (++this.active === 1) {\\n        this.index = gestures.push(this) - 1;\\n        this.emit(\"start\");\\n      }\\n      return this;\\n    },\\n    zoom: function(key, transform) {\\n      if (this.mouse && key !== \"mouse\") this.mouse[1] = transform.invert(this.mouse[0]);\\n      if (this.touch0 && key !== \"touch\") this.touch0[1] = transform.invert(this.touch0[0]);\\n      if (this.touch1 && key !== \"touch\") this.touch1[1] = transform.invert(this.touch1[0]);\\n      this.that.__zoom = transform;\\n      this.emit(\"zoom\");\\n      return this;\\n    },\\n    end: function() {\\n      if (--this.active === 0) {\\n        gestures.splice(this.index, 1);\\n        this.index = -1;\\n        this.emit(\"end\");\\n      }\\n      return this;\\n    },\\n    emit: function(type) {\\n      customEvent(new ZoomEvent(zoom, type, this.that.__zoom), listeners.apply, listeners, [type, this.that, this.args]);\\n    }\\n  };\\n\\n  function wheeled() {\\n    if (!filter.apply(this, arguments)) return;\\n    var g = gesture(this, arguments),\\n        t = this.__zoom,\\n        k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], t.k * Math.pow(2, wheelDelta.apply(this, arguments)))),\\n        p = mouse(this);\\n\\n    // If the mouse is in the same location as before, reuse it.\\n    // If there were recent wheel events, reset the wheel idle timeout.\\n    if (g.wheel) {\\n      if (g.mouse[0][0] !== p[0] || g.mouse[0][1] !== p[1]) {\\n        g.mouse[1] = t.invert(g.mouse[0] = p);\\n      }\\n      clearTimeout(g.wheel);\\n    }\\n\\n    // If this wheel event won’t trigger a transform change, ignore it.\\n    else if (t.k === k) return;\\n\\n    // Otherwise, capture the mouse point and location at the start.\\n    else {\\n      g.mouse = [p, t.invert(p)];\\n      interrupt(this);\\n      g.start();\\n    }\\n\\n    d3_zoom_src_noevent();\\n    g.wheel = setTimeout(wheelidled, wheelDelay);\\n    g.zoom(\"mouse\", constrain(translate(scale(t, k), g.mouse[0], g.mouse[1]), g.extent, translateExtent));\\n\\n    function wheelidled() {\\n      g.wheel = null;\\n      g.end();\\n    }\\n  }\\n\\n  function mousedowned() {\\n    if (touchending || !filter.apply(this, arguments)) return;\\n    var g = gesture(this, arguments),\\n        v = src_select(on_event.view).on(\"mousemove.zoom\", mousemoved, true).on(\"mouseup.zoom\", mouseupped, true),\\n        p = mouse(this),\\n        x0 = on_event.clientX,\\n        y0 = on_event.clientY;\\n\\n    nodrag(on_event.view);\\n    d3_zoom_src_noevent_nopropagation();\\n    g.mouse = [p, this.__zoom.invert(p)];\\n    interrupt(this);\\n    g.start();\\n\\n    function mousemoved() {\\n      d3_zoom_src_noevent();\\n      if (!g.moved) {\\n        var dx = on_event.clientX - x0, dy = on_event.clientY - y0;\\n        g.moved = dx * dx + dy * dy > clickDistance2;\\n      }\\n      g.zoom(\"mouse\", constrain(translate(g.that.__zoom, g.mouse[0] = mouse(g.that), g.mouse[1]), g.extent, translateExtent));\\n    }\\n\\n    function mouseupped() {\\n      v.on(\"mousemove.zoom mouseup.zoom\", null);\\n      nodrag_yesdrag(on_event.view, g.moved);\\n      d3_zoom_src_noevent();\\n      g.end();\\n    }\\n  }\\n\\n  function dblclicked() {\\n    if (!filter.apply(this, arguments)) return;\\n    var t0 = this.__zoom,\\n        p0 = mouse(this),\\n        p1 = t0.invert(p0),\\n        k1 = t0.k * (on_event.shiftKey ? 0.5 : 2),\\n        t1 = constrain(translate(scale(t0, k1), p0, p1), extent.apply(this, arguments), translateExtent);\\n\\n    d3_zoom_src_noevent();\\n    if (duration > 0) src_select(this).transition().duration(duration).call(schedule, t1, p0);\\n    else src_select(this).call(zoom.transform, t1);\\n  }\\n\\n  function touchstarted() {\\n    if (!filter.apply(this, arguments)) return;\\n    var g = gesture(this, arguments),\\n        touches = on_event.changedTouches,\\n        started,\\n        n = touches.length, i, t, p;\\n\\n    d3_zoom_src_noevent_nopropagation();\\n    for (i = 0; i < n; ++i) {\\n      t = touches[i], p = src_touch(this, touches, t.identifier);\\n      p = [p, this.__zoom.invert(p), t.identifier];\\n      if (!g.touch0) g.touch0 = p, started = true;\\n      else if (!g.touch1) g.touch1 = p;\\n    }\\n\\n    // If this is a dbltap, reroute to the (optional) dblclick.zoom handler.\\n    if (touchstarting) {\\n      touchstarting = clearTimeout(touchstarting);\\n      if (!g.touch1) {\\n        g.end();\\n        p = src_select(this).on(\"dblclick.zoom\");\\n        if (p) p.apply(this, arguments);\\n        return;\\n      }\\n    }\\n\\n    if (started) {\\n      touchstarting = setTimeout(function() { touchstarting = null; }, touchDelay);\\n      interrupt(this);\\n      g.start();\\n    }\\n  }\\n\\n  function touchmoved() {\\n    var g = gesture(this, arguments),\\n        touches = on_event.changedTouches,\\n        n = touches.length, i, t, p, l;\\n\\n    d3_zoom_src_noevent();\\n    if (touchstarting) touchstarting = clearTimeout(touchstarting);\\n    for (i = 0; i < n; ++i) {\\n      t = touches[i], p = src_touch(this, touches, t.identifier);\\n      if (g.touch0 && g.touch0[2] === t.identifier) g.touch0[0] = p;\\n      else if (g.touch1 && g.touch1[2] === t.identifier) g.touch1[0] = p;\\n    }\\n    t = g.that.__zoom;\\n    if (g.touch1) {\\n      var p0 = g.touch0[0], l0 = g.touch0[1],\\n          p1 = g.touch1[0], l1 = g.touch1[1],\\n          dp = (dp = p1[0] - p0[0]) * dp + (dp = p1[1] - p0[1]) * dp,\\n          dl = (dl = l1[0] - l0[0]) * dl + (dl = l1[1] - l0[1]) * dl;\\n      t = scale(t, Math.sqrt(dp / dl));\\n      p = [(p0[0] + p1[0]) / 2, (p0[1] + p1[1]) / 2];\\n      l = [(l0[0] + l1[0]) / 2, (l0[1] + l1[1]) / 2];\\n    }\\n    else if (g.touch0) p = g.touch0[0], l = g.touch0[1];\\n    else return;\\n    g.zoom(\"touch\", constrain(translate(t, p, l), g.extent, translateExtent));\\n  }\\n\\n  function touchended() {\\n    var g = gesture(this, arguments),\\n        touches = on_event.changedTouches,\\n        n = touches.length, i, t;\\n\\n    d3_zoom_src_noevent_nopropagation();\\n    if (touchending) clearTimeout(touchending);\\n    touchending = setTimeout(function() { touchending = null; }, touchDelay);\\n    for (i = 0; i < n; ++i) {\\n      t = touches[i];\\n      if (g.touch0 && g.touch0[2] === t.identifier) delete g.touch0;\\n      else if (g.touch1 && g.touch1[2] === t.identifier) delete g.touch1;\\n    }\\n    if (g.touch1 && !g.touch0) g.touch0 = g.touch1, delete g.touch1;\\n    if (g.touch0) g.touch0[1] = this.__zoom.invert(g.touch0[0]);\\n    else g.end();\\n  }\\n\\n  zoom.wheelDelta = function(_) {\\n    return arguments.length ? (wheelDelta = typeof _ === \"function\" ? _ : d3_zoom_src_constant(+_), zoom) : wheelDelta;\\n  };\\n\\n  zoom.filter = function(_) {\\n    return arguments.length ? (filter = typeof _ === \"function\" ? _ : d3_zoom_src_constant(!!_), zoom) : filter;\\n  };\\n\\n  zoom.touchable = function(_) {\\n    return arguments.length ? (touchable = typeof _ === \"function\" ? _ : d3_zoom_src_constant(!!_), zoom) : touchable;\\n  };\\n\\n  zoom.extent = function(_) {\\n    return arguments.length ? (extent = typeof _ === \"function\" ? _ : d3_zoom_src_constant([[+_[0][0], +_[0][1]], [+_[1][0], +_[1][1]]]), zoom) : extent;\\n  };\\n\\n  zoom.scaleExtent = function(_) {\\n    return arguments.length ? (scaleExtent[0] = +_[0], scaleExtent[1] = +_[1], zoom) : [scaleExtent[0], scaleExtent[1]];\\n  };\\n\\n  zoom.translateExtent = function(_) {\\n    return arguments.length ? (translateExtent[0][0] = +_[0][0], translateExtent[1][0] = +_[1][0], translateExtent[0][1] = +_[0][1], translateExtent[1][1] = +_[1][1], zoom) : [[translateExtent[0][0], translateExtent[0][1]], [translateExtent[1][0], translateExtent[1][1]]];\\n  };\\n\\n  zoom.constrain = function(_) {\\n    return arguments.length ? (constrain = _, zoom) : constrain;\\n  };\\n\\n  zoom.duration = function(_) {\\n    return arguments.length ? (duration = +_, zoom) : duration;\\n  };\\n\\n  zoom.interpolate = function(_) {\\n    return arguments.length ? (interpolate = _, zoom) : interpolate;\\n  };\\n\\n  zoom.on = function() {\\n    var value = listeners.on.apply(listeners, arguments);\\n    return value === listeners ? zoom : value;\\n  };\\n\\n  zoom.clickDistance = function(_) {\\n    return arguments.length ? (clickDistance2 = (_ = +_) * _, zoom) : Math.sqrt(clickDistance2);\\n  };\\n\\n  return zoom;\\n});\\n\\n// CONCATENATED MODULE: ./node_modules/d3-zoom/index.js\\n\\n\\n\\n// CONCATENATED MODULE: ./node_modules/d3/index.js\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib/selector.js?type=script&index=0!./src/views/home.vue\\n//\\n//\\n//\\n//\\n//\\n//\\n//\\n//\\n\\n\\n\\n/* harmony default export */ var home = ({\\n  name: \\'indexP\\',\\n  data() {\\n    return {\\n      todos: [{\\n        text: \\'Learn JavaScript\\'\\n      }, {\\n        text: \\'Learn Vue\\'\\n      }, {\\n        text: \\'Build something awesome\\'\\n      }]\\n    };\\n  },\\n\\n  created: function () {\\n    this.initChart();\\n  },\\n\\n  methods: {\\n    initChart() {\\n      var width = 500,\\n          height = 250,\\n          margin = {\\n        left: 50,\\n        top: 30,\\n        right: 20,\\n        bottom: 20\\n      },\\n          g_width = width - margin.left - margin.right,\\n          g_height = height - margin.top - margin.bottom;\\n\\n      //在html的元素里面增加一个svg\\n      console.log(src_select(\"#container\"));\\n      var container = src_select(\"#container\").append(\"svg\").attr(\"width\", 500).attr(\"height\", 250).attr(\"background\", \"white\");\\n\\n      console.log(src_select(\"#container\"));\\n      //在svg里面增加另外的元素\\n      var g = src_select(\"svg\").append(\"g\").attr(\"transform\", `translate(${margin.left},${margin.top})`);\\n\\n      var data = [1, 5, 2, 8, 3, 7];\\n\\n      var scale_x = src_linear_linear() //x轴缩放\\n      .domain([0, data.length - 1]) //输入范围\\n      .range([0, g_width]); //输出范围\\n\\n      var scale_y = src_linear_linear() //y轴缩放\\n      .domain([0, src_max(data)]) //输入范围\\n      .range([g_height, 0]); //输出范围\\n\\n      var line_generator = src_line() //线性图表\\n      .x(function (d, i) {\\n        return scale_x(i);\\n      }) //d是数组 i是数组的index\\n      .y(function (d) {\\n        return scale_y(d);\\n      }).curve(cardinal);\\n\\n      var area_generator = d3_shape_src_area() //面积图表\\n      .x(function (d, i) {\\n        return scale_x(i);\\n      }) //d是数组 i是数组的index\\n      .y0(g_height).y1(function (d) {\\n        return scale_y(d);\\n      }).curve(cardinal);\\n\\n      src_select(\"g\").append(\"path\").attr(\"d\", area_generator(data)).style(\"fill\", \"steelblue\");\\n\\n      var x_axis = axis_axisBottom(scale_x),\\n          y_axis = axis_axisLeft(scale_y);\\n\\n      g.append(\"g\").call(x_axis).attr(\"transform\", `translate(0,${g_height})`);\\n\\n      g.append(\"g\").call(y_axis);\\n    }\\n  }\\n});\\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-5a4bed13\",\"hasScoped\":false,\"optionsId\":\"0\",\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/views/home.vue\\nvar home_render = function() {\\n  var _vm = this\\n  var _h = _vm.$createElement\\n  var _c = _vm._self._c || _h\\n  return _vm._m(0)\\n}\\nvar home_staticRenderFns = [\\n  function() {\\n    var _vm = this\\n    var _h = _vm.$createElement\\n    var _c = _vm._self._c || _h\\n    return _c(\"div\", [\\n      _c(\"div\", { attrs: { id: \"container\" } }, [_c(\"h1\", [_vm._v(\"11111\")])])\\n    ])\\n  }\\n]\\nhome_render._withStripped = true\\n\\nif (true) {\\n  module.hot.accept()\\n  if (module.hot.data) {\\n    __webpack_require__(1)      .rerender(\"data-v-5a4bed13\", { render: home_render, staticRenderFns: home_staticRenderFns })\\n  }\\n}\\n// CONCATENATED MODULE: ./src/views/home.vue\\nvar home_disposed = false\\nfunction home_injectStyle (context) {\\n  if (home_disposed) return\\n  __webpack_require__(43)\\n}\\n/* script */\\n\\n\\n/* template */\\n\\n/* template functional */\\nvar home_vue_template_functional_ = false\\n/* styles */\\nvar home_vue_styles_ = home_injectStyle\\n/* scopeId */\\nvar home_vue_scopeId_ = null\\n/* moduleIdentifier (server only) */\\nvar home_vue_module_identifier_ = null\\n\\nvar home_Component = normalizeComponent(\\n  home,\\n  home_render,\\n  home_staticRenderFns,\\n  home_vue_template_functional_,\\n  home_vue_styles_,\\n  home_vue_scopeId_,\\n  home_vue_module_identifier_\\n)\\nhome_Component.options.__file = \"src\\\\\\\\views\\\\\\\\home.vue\"\\n\\n/* hot reload */\\nif (true) {(function () {\\n  var hotAPI = __webpack_require__(1)\\n  hotAPI.install(__webpack_require__(0), false)\\n  if (!hotAPI.compatible) return\\n  module.hot.accept()\\n  if (!module.hot.data) {\\n    hotAPI.createRecord(\"data-v-5a4bed13\", home_Component.options)\\n  } else {\\n    hotAPI.reload(\"data-v-5a4bed13\", home_Component.options)\\n  }\\n  module.hot.dispose(function (data) {\\n    home_disposed = true\\n  })\\n})()}\\n\\n/* harmony default export */ var views_home = (home_Component.exports);\\n\\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-23b71e09\",\"hasScoped\":false,\"optionsId\":\"0\",\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/views/about.vue\\nvar about_render = function() {\\n  var _vm = this\\n  var _h = _vm.$createElement\\n  var _c = _vm._self._c || _h\\n  return _c(\"div\", [_vm._v(\"about\")])\\n}\\nvar about_staticRenderFns = []\\nabout_render._withStripped = true\\n\\nif (true) {\\n  module.hot.accept()\\n  if (module.hot.data) {\\n    __webpack_require__(1)      .rerender(\"data-v-23b71e09\", { render: about_render, staticRenderFns: about_staticRenderFns })\\n  }\\n}\\n// CONCATENATED MODULE: ./src/views/about.vue\\nvar about_disposed = false\\n/* script */\\nvar about_vue_script_ = null\\n/* template */\\n\\n/* template functional */\\nvar about_vue_template_functional_ = false\\n/* styles */\\nvar about_vue_styles_ = null\\n/* scopeId */\\nvar about_vue_scopeId_ = null\\n/* moduleIdentifier (server only) */\\nvar about_vue_module_identifier_ = null\\n\\nvar about_Component = normalizeComponent(\\n  about_vue_script_,\\n  about_render,\\n  about_staticRenderFns,\\n  about_vue_template_functional_,\\n  about_vue_styles_,\\n  about_vue_scopeId_,\\n  about_vue_module_identifier_\\n)\\nabout_Component.options.__file = \"src\\\\\\\\views\\\\\\\\about.vue\"\\n\\n/* hot reload */\\nif (true) {(function () {\\n  var hotAPI = __webpack_require__(1)\\n  hotAPI.install(__webpack_require__(0), false)\\n  if (!hotAPI.compatible) return\\n  module.hot.accept()\\n  if (!module.hot.data) {\\n    hotAPI.createRecord(\"data-v-23b71e09\", about_Component.options)\\n  } else {\\n    hotAPI.reload(\"data-v-23b71e09\", about_Component.options)\\n  }\\n  module.hot.dispose(function (data) {\\n    about_disposed = true\\n  })\\n})()}\\n\\n/* harmony default export */ var about = (about_Component.exports);\\n\\n// CONCATENATED MODULE: ./src/routes.js\\n\\n\\n\\n\\n\\n\\nvue_esm[\"default\"].use(vue_router_esm);\\n\\n/* harmony default export */ var routes = (new vue_router_esm({\\n    routes: [{\\n        path: \\'/\\',\\n        component: views_home\\n    }, {\\n        path: \\'/about\\',\\n        component: about\\n    }]\\n}));\\n// EXTERNAL MODULE: ./src/assets/styles/base.css\\nvar styles_base = __webpack_require__(13);\\n\\n// CONCATENATED MODULE: ./src/main.js\\n//main.js这是项目的核心文件。全局的配置都在这个文件里面配置\\n\\n\\n\\n\\n\\n//import \\'./assets/sass/reset.sass\\'//报错暂时不用sass\\nvue_esm[\"default\"].config.debug = true; //开启错误提示\\n\\nnew vue_esm[\"default\"]({\\n  router: routes,\\n  el: \\'#appIndex\\',\\n  render: h => h(src_App)\\n});\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///10\\n')},42:function(module,exports,__webpack_require__){eval('exports = module.exports = __webpack_require__(6)(true);\\n// imports\\n\\n\\n// module\\nexports.push([module.i, \"\\\\n#container {\\\\r\\\\n  width: 500px;\\\\r\\\\n  height: 250px;\\\\r\\\\n  background: #fff;\\\\n}\\\\npath {\\\\r\\\\n  fill: none;\\\\r\\\\n  stroke: steelblue;\\\\r\\\\n  stroke-width: 2px;\\\\n}\\\\n.domain {\\\\r\\\\n  stroke: gray;\\\\n}\\\\r\\\\n\", \"\", {\"version\":3,\"sources\":[\"C:/Users/liaof/Desktop/vue-demo/src/views/src/views/home.vue\"],\"names\":[],\"mappings\":\";AAyGA;EACA,aAAA;EACA,cAAA;EACA,iBAAA;CACA;AAEA;EACA,WAAA;EACA,kBAAA;EACA,kBAAA;CACA;AAEA;EACA,aAAA;CACA\",\"file\":\"home.vue\",\"sourcesContent\":[\"\\x3c!-- //index.vue --\\x3e\\\\r\\\\n<template>\\\\r\\\\n  <div>\\\\r\\\\n    <div id=\\\\\"container\\\\\">\\\\r\\\\n      <h1>11111</h1>\\\\r\\\\n    </div>\\\\r\\\\n  </div>\\\\r\\\\n</template>\\\\r\\\\n<script>\\\\r\\\\nimport * as d3 from \\\\\"d3\\\\\";\\\\r\\\\n\\\\r\\\\nexport default {\\\\r\\\\n  name: \\'indexP\\',\\\\r\\\\n  data() {\\\\r\\\\n    return {\\\\r\\\\n      todos: [{\\\\r\\\\n        text: \\'Learn JavaScript\\'\\\\r\\\\n      }, {\\\\r\\\\n        text: \\'Learn Vue\\'\\\\r\\\\n      }, {\\\\r\\\\n        text: \\'Build something awesome\\'\\\\r\\\\n      }]\\\\r\\\\n    }\\\\r\\\\n  },\\\\r\\\\n\\\\r\\\\n  created: function() {\\\\r\\\\n    this.initChart()\\\\r\\\\n  },\\\\r\\\\n\\\\r\\\\n  methods: {\\\\r\\\\n    initChart() {\\\\r\\\\n      var width = 500,\\\\r\\\\n        height = 250,\\\\r\\\\n        margin = {\\\\r\\\\n          left: 50,\\\\r\\\\n          top: 30,\\\\r\\\\n          right: 20,\\\\r\\\\n          bottom: 20\\\\r\\\\n        },\\\\r\\\\n        g_width = width - margin.left - margin.right,\\\\r\\\\n        g_height = height - margin.top - margin.bottom;\\\\r\\\\n\\\\r\\\\n      //在html的元素里面增加一个svg\\\\r\\\\n      console.log(d3.select(\\\\\"#container\\\\\"))\\\\r\\\\n      var container = d3.select(\\\\\"#container\\\\\")\\\\r\\\\n        .append(\\\\\"svg\\\\\")\\\\r\\\\n        .attr(\\\\\"width\\\\\", 500)\\\\r\\\\n        .attr(\\\\\"height\\\\\", 250)\\\\r\\\\n        .attr(\\\\\"background\\\\\", \\\\\"white\\\\\")\\\\r\\\\n\\\\r\\\\n      console.log(d3.select(\\\\\"#container\\\\\"))\\\\r\\\\n        //在svg里面增加另外的元素\\\\r\\\\n      var g = d3.select(\\\\\"svg\\\\\")\\\\r\\\\n        .append(\\\\\"g\\\\\")\\\\r\\\\n        .attr(\\\\\"transform\\\\\", `translate(${margin.left},${margin.top})`)\\\\r\\\\n\\\\r\\\\n      var data = [1, 5, 2, 8, 3, 7];\\\\r\\\\n\\\\r\\\\n      var scale_x = d3.scaleLinear() //x轴缩放\\\\r\\\\n        .domain([0, data.length - 1]) //输入范围\\\\r\\\\n        .range([0, g_width]) //输出范围\\\\r\\\\n\\\\r\\\\n      var scale_y = d3.scaleLinear() //y轴缩放\\\\r\\\\n        .domain([0, d3.max(data)]) //输入范围\\\\r\\\\n        .range([g_height, 0]) //输出范围\\\\r\\\\n\\\\r\\\\n      var line_generator = d3.line() //线性图表\\\\r\\\\n        .x(function(d, i) {\\\\r\\\\n          return scale_x(i)\\\\r\\\\n        }) //d是数组 i是数组的index\\\\r\\\\n        .y(function(d) {\\\\r\\\\n          return scale_y(d)\\\\r\\\\n        })\\\\r\\\\n        .curve(d3.curveCardinal);\\\\r\\\\n\\\\r\\\\n      var area_generator = d3.area() //面积图表\\\\r\\\\n        .x(function(d, i) {\\\\r\\\\n          return scale_x(i)\\\\r\\\\n        }) //d是数组 i是数组的index\\\\r\\\\n        .y0(g_height)\\\\r\\\\n        .y1(function(d) {\\\\r\\\\n          return scale_y(d)\\\\r\\\\n        })\\\\r\\\\n        .curve(d3.curveCardinal);\\\\r\\\\n\\\\r\\\\n      d3.select(\\\\\"g\\\\\")\\\\r\\\\n        .append(\\\\\"path\\\\\")\\\\r\\\\n        .attr(\\\\\"d\\\\\", area_generator(data))\\\\r\\\\n        .style(\\\\\"fill\\\\\", \\\\\"steelblue\\\\\");\\\\r\\\\n\\\\r\\\\n      var x_axis = d3.axisBottom(scale_x),\\\\r\\\\n        y_axis = d3.axisLeft(scale_y);\\\\r\\\\n\\\\r\\\\n      g.append(\\\\\"g\\\\\")\\\\r\\\\n        .call(x_axis)\\\\r\\\\n        .attr(\\\\\"transform\\\\\", `translate(0,${g_height})`)\\\\r\\\\n\\\\r\\\\n      g.append(\\\\\"g\\\\\")\\\\r\\\\n        .call(y_axis)\\\\r\\\\n\\\\r\\\\n    }\\\\r\\\\n  }\\\\r\\\\n}\\\\r\\\\n<\\/script>\\\\r\\\\n<style>\\\\r\\\\n#container {\\\\r\\\\n  width: 500px;\\\\r\\\\n  height: 250px;\\\\r\\\\n  background: #fff;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\npath {\\\\r\\\\n  fill: none;\\\\r\\\\n  stroke: steelblue;\\\\r\\\\n  stroke-width: 2px;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\n.domain {\\\\r\\\\n  stroke: gray;\\\\r\\\\n}\\\\r\\\\n</style>\\\\r\\\\n\"],\"sourceRoot\":\"\"}]);\\n\\n// exports\\n\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdmlld3MvaG9tZS52dWU/MmFlOSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBOzs7QUFHQTtBQUNBLHVDQUF3QyxtQkFBbUIsb0JBQW9CLHVCQUF1QixHQUFHLFFBQVEsaUJBQWlCLHdCQUF3Qix3QkFBd0IsR0FBRyxXQUFXLG1CQUFtQixHQUFHLFlBQVksK0dBQStHLE1BQU0sVUFBVSxVQUFVLFdBQVcsS0FBSyxLQUFLLFVBQVUsV0FBVyxXQUFXLEtBQUssS0FBSyxVQUFVLGtPQUFrTyx3QkFBd0IsbUNBQW1DLGdCQUFnQixtQkFBbUIsK0NBQStDLEdBQUcsd0NBQXdDLEdBQUcsc0RBQXNELFVBQVUsT0FBTyxnQ0FBZ0MsK0JBQStCLHFCQUFxQixxQkFBcUIseUVBQXlFLDBHQUEwRyxxSEFBcUgsMGNBQTBjLFlBQVksR0FBRyxXQUFXLCtDQUErQyxvV0FBb1csNENBQTRDLCtDQUErQyw0Q0FBNEMsc0NBQXNDLGtGQUFrRiw0Q0FBNEMseUVBQXlFLDRDQUE0QyxzQ0FBc0MscUpBQXFKLDRGQUE0RixzR0FBc0csU0FBUyxzRUFBc0UsT0FBTyxLQUFLLHdDQUF3QyxtQkFBbUIsb0JBQW9CLHVCQUF1QixLQUFLLGNBQWMsaUJBQWlCLHdCQUF3Qix3QkFBd0IsS0FBSyxpQkFBaUIsbUJBQW1CLEtBQUssbUNBQW1DOztBQUVueUciLCJmaWxlIjoiNDIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXCIpKHRydWUpO1xuLy8gaW1wb3J0c1xuXG5cbi8vIG1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiXFxuI2NvbnRhaW5lciB7XFxyXFxuICB3aWR0aDogNTAwcHg7XFxyXFxuICBoZWlnaHQ6IDI1MHB4O1xcclxcbiAgYmFja2dyb3VuZDogI2ZmZjtcXG59XFxucGF0aCB7XFxyXFxuICBmaWxsOiBub25lO1xcclxcbiAgc3Ryb2tlOiBzdGVlbGJsdWU7XFxyXFxuICBzdHJva2Utd2lkdGg6IDJweDtcXG59XFxuLmRvbWFpbiB7XFxyXFxuICBzdHJva2U6IGdyYXk7XFxufVxcclxcblwiLCBcIlwiLCB7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJDOi9Vc2Vycy9saWFvZi9EZXNrdG9wL3Z1ZS1kZW1vL3NyYy92aWV3cy9zcmMvdmlld3MvaG9tZS52dWVcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIjtBQXlHQTtFQUNBLGFBQUE7RUFDQSxjQUFBO0VBQ0EsaUJBQUE7Q0FDQTtBQUVBO0VBQ0EsV0FBQTtFQUNBLGtCQUFBO0VBQ0Esa0JBQUE7Q0FDQTtBQUVBO0VBQ0EsYUFBQTtDQUNBXCIsXCJmaWxlXCI6XCJob21lLnZ1ZVwiLFwic291cmNlc0NvbnRlbnRcIjpbXCI8IS0tIC8vaW5kZXgudnVlIC0tPlxcclxcbjx0ZW1wbGF0ZT5cXHJcXG4gIDxkaXY+XFxyXFxuICAgIDxkaXYgaWQ9XFxcImNvbnRhaW5lclxcXCI+XFxyXFxuICAgICAgPGgxPjExMTExPC9oMT5cXHJcXG4gICAgPC9kaXY+XFxyXFxuICA8L2Rpdj5cXHJcXG48L3RlbXBsYXRlPlxcclxcbjxzY3JpcHQ+XFxyXFxuaW1wb3J0ICogYXMgZDMgZnJvbSBcXFwiZDNcXFwiO1xcclxcblxcclxcbmV4cG9ydCBkZWZhdWx0IHtcXHJcXG4gIG5hbWU6ICdpbmRleFAnLFxcclxcbiAgZGF0YSgpIHtcXHJcXG4gICAgcmV0dXJuIHtcXHJcXG4gICAgICB0b2RvczogW3tcXHJcXG4gICAgICAgIHRleHQ6ICdMZWFybiBKYXZhU2NyaXB0J1xcclxcbiAgICAgIH0sIHtcXHJcXG4gICAgICAgIHRleHQ6ICdMZWFybiBWdWUnXFxyXFxuICAgICAgfSwge1xcclxcbiAgICAgICAgdGV4dDogJ0J1aWxkIHNvbWV0aGluZyBhd2Vzb21lJ1xcclxcbiAgICAgIH1dXFxyXFxuICAgIH1cXHJcXG4gIH0sXFxyXFxuXFxyXFxuICBjcmVhdGVkOiBmdW5jdGlvbigpIHtcXHJcXG4gICAgdGhpcy5pbml0Q2hhcnQoKVxcclxcbiAgfSxcXHJcXG5cXHJcXG4gIG1ldGhvZHM6IHtcXHJcXG4gICAgaW5pdENoYXJ0KCkge1xcclxcbiAgICAgIHZhciB3aWR0aCA9IDUwMCxcXHJcXG4gICAgICAgIGhlaWdodCA9IDI1MCxcXHJcXG4gICAgICAgIG1hcmdpbiA9IHtcXHJcXG4gICAgICAgICAgbGVmdDogNTAsXFxyXFxuICAgICAgICAgIHRvcDogMzAsXFxyXFxuICAgICAgICAgIHJpZ2h0OiAyMCxcXHJcXG4gICAgICAgICAgYm90dG9tOiAyMFxcclxcbiAgICAgICAgfSxcXHJcXG4gICAgICAgIGdfd2lkdGggPSB3aWR0aCAtIG1hcmdpbi5sZWZ0IC0gbWFyZ2luLnJpZ2h0LFxcclxcbiAgICAgICAgZ19oZWlnaHQgPSBoZWlnaHQgLSBtYXJnaW4udG9wIC0gbWFyZ2luLmJvdHRvbTtcXHJcXG5cXHJcXG4gICAgICAvL+WcqGh0bWznmoTlhYPntKDph4zpnaLlop7liqDkuIDkuKpzdmdcXHJcXG4gICAgICBjb25zb2xlLmxvZyhkMy5zZWxlY3QoXFxcIiNjb250YWluZXJcXFwiKSlcXHJcXG4gICAgICB2YXIgY29udGFpbmVyID0gZDMuc2VsZWN0KFxcXCIjY29udGFpbmVyXFxcIilcXHJcXG4gICAgICAgIC5hcHBlbmQoXFxcInN2Z1xcXCIpXFxyXFxuICAgICAgICAuYXR0cihcXFwid2lkdGhcXFwiLCA1MDApXFxyXFxuICAgICAgICAuYXR0cihcXFwiaGVpZ2h0XFxcIiwgMjUwKVxcclxcbiAgICAgICAgLmF0dHIoXFxcImJhY2tncm91bmRcXFwiLCBcXFwid2hpdGVcXFwiKVxcclxcblxcclxcbiAgICAgIGNvbnNvbGUubG9nKGQzLnNlbGVjdChcXFwiI2NvbnRhaW5lclxcXCIpKVxcclxcbiAgICAgICAgLy/lnKhzdmfph4zpnaLlop7liqDlj6blpJbnmoTlhYPntKBcXHJcXG4gICAgICB2YXIgZyA9IGQzLnNlbGVjdChcXFwic3ZnXFxcIilcXHJcXG4gICAgICAgIC5hcHBlbmQoXFxcImdcXFwiKVxcclxcbiAgICAgICAgLmF0dHIoXFxcInRyYW5zZm9ybVxcXCIsIGB0cmFuc2xhdGUoJHttYXJnaW4ubGVmdH0sJHttYXJnaW4udG9wfSlgKVxcclxcblxcclxcbiAgICAgIHZhciBkYXRhID0gWzEsIDUsIDIsIDgsIDMsIDddO1xcclxcblxcclxcbiAgICAgIHZhciBzY2FsZV94ID0gZDMuc2NhbGVMaW5lYXIoKSAvL3jovbTnvKnmlL5cXHJcXG4gICAgICAgIC5kb21haW4oWzAsIGRhdGEubGVuZ3RoIC0gMV0pIC8v6L6T5YWl6IyD5Zu0XFxyXFxuICAgICAgICAucmFuZ2UoWzAsIGdfd2lkdGhdKSAvL+i+k+WHuuiMg+WbtFxcclxcblxcclxcbiAgICAgIHZhciBzY2FsZV95ID0gZDMuc2NhbGVMaW5lYXIoKSAvL3novbTnvKnmlL5cXHJcXG4gICAgICAgIC5kb21haW4oWzAsIGQzLm1heChkYXRhKV0pIC8v6L6T5YWl6IyD5Zu0XFxyXFxuICAgICAgICAucmFuZ2UoW2dfaGVpZ2h0LCAwXSkgLy/ovpPlh7rojIPlm7RcXHJcXG5cXHJcXG4gICAgICB2YXIgbGluZV9nZW5lcmF0b3IgPSBkMy5saW5lKCkgLy/nur/mgKflm77ooahcXHJcXG4gICAgICAgIC54KGZ1bmN0aW9uKGQsIGkpIHtcXHJcXG4gICAgICAgICAgcmV0dXJuIHNjYWxlX3goaSlcXHJcXG4gICAgICAgIH0pIC8vZOaYr+aVsOe7hCBp5piv5pWw57uE55qEaW5kZXhcXHJcXG4gICAgICAgIC55KGZ1bmN0aW9uKGQpIHtcXHJcXG4gICAgICAgICAgcmV0dXJuIHNjYWxlX3koZClcXHJcXG4gICAgICAgIH0pXFxyXFxuICAgICAgICAuY3VydmUoZDMuY3VydmVDYXJkaW5hbCk7XFxyXFxuXFxyXFxuICAgICAgdmFyIGFyZWFfZ2VuZXJhdG9yID0gZDMuYXJlYSgpIC8v6Z2i56ev5Zu+6KGoXFxyXFxuICAgICAgICAueChmdW5jdGlvbihkLCBpKSB7XFxyXFxuICAgICAgICAgIHJldHVybiBzY2FsZV94KGkpXFxyXFxuICAgICAgICB9KSAvL2TmmK/mlbDnu4QgaeaYr+aVsOe7hOeahGluZGV4XFxyXFxuICAgICAgICAueTAoZ19oZWlnaHQpXFxyXFxuICAgICAgICAueTEoZnVuY3Rpb24oZCkge1xcclxcbiAgICAgICAgICByZXR1cm4gc2NhbGVfeShkKVxcclxcbiAgICAgICAgfSlcXHJcXG4gICAgICAgIC5jdXJ2ZShkMy5jdXJ2ZUNhcmRpbmFsKTtcXHJcXG5cXHJcXG4gICAgICBkMy5zZWxlY3QoXFxcImdcXFwiKVxcclxcbiAgICAgICAgLmFwcGVuZChcXFwicGF0aFxcXCIpXFxyXFxuICAgICAgICAuYXR0cihcXFwiZFxcXCIsIGFyZWFfZ2VuZXJhdG9yKGRhdGEpKVxcclxcbiAgICAgICAgLnN0eWxlKFxcXCJmaWxsXFxcIiwgXFxcInN0ZWVsYmx1ZVxcXCIpO1xcclxcblxcclxcbiAgICAgIHZhciB4X2F4aXMgPSBkMy5heGlzQm90dG9tKHNjYWxlX3gpLFxcclxcbiAgICAgICAgeV9heGlzID0gZDMuYXhpc0xlZnQoc2NhbGVfeSk7XFxyXFxuXFxyXFxuICAgICAgZy5hcHBlbmQoXFxcImdcXFwiKVxcclxcbiAgICAgICAgLmNhbGwoeF9heGlzKVxcclxcbiAgICAgICAgLmF0dHIoXFxcInRyYW5zZm9ybVxcXCIsIGB0cmFuc2xhdGUoMCwke2dfaGVpZ2h0fSlgKVxcclxcblxcclxcbiAgICAgIGcuYXBwZW5kKFxcXCJnXFxcIilcXHJcXG4gICAgICAgIC5jYWxsKHlfYXhpcylcXHJcXG5cXHJcXG4gICAgfVxcclxcbiAgfVxcclxcbn1cXHJcXG48L3NjcmlwdD5cXHJcXG48c3R5bGU+XFxyXFxuI2NvbnRhaW5lciB7XFxyXFxuICB3aWR0aDogNTAwcHg7XFxyXFxuICBoZWlnaHQ6IDI1MHB4O1xcclxcbiAgYmFja2dyb3VuZDogI2ZmZjtcXHJcXG59XFxyXFxuXFxyXFxucGF0aCB7XFxyXFxuICBmaWxsOiBub25lO1xcclxcbiAgc3Ryb2tlOiBzdGVlbGJsdWU7XFxyXFxuICBzdHJva2Utd2lkdGg6IDJweDtcXHJcXG59XFxyXFxuXFxyXFxuLmRvbWFpbiB7XFxyXFxuICBzdHJva2U6IGdyYXk7XFxyXFxufVxcclxcbjwvc3R5bGU+XFxyXFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG5cbi8vIGV4cG9ydHNcbiJdLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///42\\n')}});","extractedComments":[]}